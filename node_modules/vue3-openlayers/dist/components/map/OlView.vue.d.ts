import { DefineComponent, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType } from 'vue';
import type { Extent } from "ol/extent";
import Projection from "ol/proj/Projection";
import type { AnimationOptions, FitOptions, ViewOptions } from "ol/View";
import View from "ol/View";
import type { Coordinate } from "ol/coordinate";
import type { Size } from "ol/size";
import type { Pixel } from "ol/pixel";
import type BaseEvent from "ol/events/Event";
import type { SimpleGeometry } from "ol/geom";
declare const _default: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ViewOptions>, {
    enableRotation: boolean;
}>, {
    view: View;
    adjustCenter: (deltaCoordinates: Coordinate) => void;
    adjustResolution: (ratio: number, optAnchor?: Coordinate | undefined) => void;
    adjustRotation: (delta: number, optAnchor?: Coordinate | undefined) => void;
    adjustZoom: (delta: number, optAnchor?: Coordinate | undefined) => void;
    animate: (...args: (AnimationOptions | ((arg0: boolean) => void))[]) => void;
    beginInteraction: () => void;
    calculateExtent: (optSize?: Size | undefined) => Extent;
    cancelAnimations: () => void;
    centerOn: (coordinate: Coordinate, size: Size, position: Pixel) => void;
    changed: () => void;
    dispatchEvent: (event: string | BaseEvent) => boolean | undefined;
    endInteraction: (optDuration?: number | undefined, optResolutionDirection?: number | undefined, optAnchor?: Coordinate | undefined) => void;
    fit: (geometryOrExtent: SimpleGeometry | Extent, options?: FitOptions | undefined) => void;
    get: (key: string) => unknown;
    getAnimating: () => boolean;
    getCenter: () => Coordinate | undefined;
    getInteracting: () => boolean;
    getKeys: () => string[];
    getMaxResolution: () => number;
    getMaxZoom: () => number;
    getMinResolution: () => number;
    getMinZoom: () => number;
    getProjection: () => Projection;
    getProperties: () => {
        [x: string]: any;
    };
    getResolution: () => number | undefined;
    getResolutionForExtent: (extent: Extent, size?: Size | undefined) => number;
    getResolutionForZoom: (zoom: number) => number;
    getResolutions: () => number[] | undefined;
    getRevision: () => number;
    getRotation: () => number;
    getZoom: () => number | undefined;
    getZoomForResolution: (resolution: number) => number | undefined;
    setCenter: (center: Coordinate | undefined) => void;
    setConstrainResolution: (enabled: boolean) => void;
    setMaxZoom: (zoom: number) => void;
    setMinZoom: (zoom: number) => void;
    setResolution: (resolution: number | undefined) => void;
    setRotation: (rotation: number) => void;
    setZoom: (zoom: number) => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ViewOptions>, {
    enableRotation: boolean;
}>>>, {
    enableRotation: boolean;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
