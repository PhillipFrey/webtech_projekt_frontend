import { DefineComponent, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType } from 'vue';
import type { PanIntoViewOptions, Positioning } from "ol/Overlay";
import Overlay, { type Options } from "ol/Overlay";
import type { Coordinate } from "ol/coordinate";
declare const _default: DefineComponent<__VLS_TypePropsToRuntimeProps<Options>, {
    overlay: ComputedRef<Overlay>;
    htmlContent: Ref<HTMLElement | undefined>;
    getOffset: () => number[];
    getPosition: () => Coordinate | undefined;
    getPositioning: () => Positioning;
    panIntoView: (optPanIntoViewOptions: PanIntoViewOptions) => void;
    setElement: (element: HTMLElement | undefined) => void;
    setOffset: (offset: number[]) => void;
    setPosition: (position?: Coordinate | undefined) => void;
    setPositioning: (positioning: Positioning) => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Options>>>, {}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
