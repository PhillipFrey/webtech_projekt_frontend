{
  "version": 3,
  "sources": ["../../@terraformer/arcgis/dist/t-arcgis.esm.js"],
  "sourcesContent": ["/* @preserve\n* @terraformer/arcgis - v2.1.1 - MIT\n* Copyright (c) 2012-2022 Environmental Systems Research Institute, Inc.\n* Tue Aug 02 2022 14:23:48 GMT-0700 (Pacific Daylight Time)\n*/\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar edgeIntersectsEdge = function edgeIntersectsEdge(a1, a2, b1, b2) {\n  var uaT = (b2[0] - b1[0]) * (a1[1] - b1[1]) - (b2[1] - b1[1]) * (a1[0] - b1[0]);\n  var ubT = (a2[0] - a1[0]) * (a1[1] - b1[1]) - (a2[1] - a1[1]) * (a1[0] - b1[0]);\n  var uB = (b2[1] - b1[1]) * (a2[0] - a1[0]) - (b2[0] - b1[0]) * (a2[1] - a1[1]);\n\n  if (uB !== 0) {\n    var ua = uaT / uB;\n    var ub = ubT / uB;\n\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\nvar coordinatesContainPoint = function coordinatesContainPoint(coordinates, point) {\n  var contains = false;\n\n  for (var i = -1, l = coordinates.length, j = l - 1; ++i < l; j = i) {\n    if ((coordinates[i][1] <= point[1] && point[1] < coordinates[j][1] || coordinates[j][1] <= point[1] && point[1] < coordinates[i][1]) && point[0] < (coordinates[j][0] - coordinates[i][0]) * (point[1] - coordinates[i][1]) / (coordinates[j][1] - coordinates[i][1]) + coordinates[i][0]) {\n      contains = !contains;\n    }\n  }\n\n  return contains;\n};\nvar pointsEqual = function pointsEqual(a, b) {\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\nvar arrayIntersectsArray = function arrayIntersectsArray(a, b) {\n  for (var i = 0; i < a.length - 1; i++) {\n    for (var j = 0; j < b.length - 1; j++) {\n      if (edgeIntersectsEdge(a[i], a[i + 1], b[j], b[j + 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar closeRing = function closeRing(coordinates) {\n  if (!pointsEqual(coordinates[0], coordinates[coordinates.length - 1])) {\n    coordinates.push(coordinates[0]);\n  }\n\n  return coordinates;\n}; // determine if polygon ring coordinates are clockwise. clockwise signifies outer ring, counter-clockwise an inner ring\n// or hole. this logic was found at http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-\n// points-are-in-clockwise-order\n\nvar ringIsClockwise = function ringIsClockwise(ringToTest) {\n  var total = 0;\n  var i = 0;\n  var rLength = ringToTest.length;\n  var pt1 = ringToTest[i];\n  var pt2;\n\n  for (i; i < rLength - 1; i++) {\n    pt2 = ringToTest[i + 1];\n    total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);\n    pt1 = pt2;\n  }\n\n  return total >= 0;\n}; // This function ensures that rings are oriented in the right directions\n// from http://jsperf.com/cloning-an-object/2\n\nvar shallowClone = function shallowClone(obj) {\n  var target = {};\n\n  for (var i in obj) {\n    // both arcgis attributes and geojson props are just hardcoded keys\n    if (obj.hasOwnProperty(i)) {\n      // eslint-disable-line no-prototype-builtins\n      target[i] = obj[i];\n    }\n  }\n\n  return target;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar coordinatesContainCoordinates = function coordinatesContainCoordinates(outer, inner) {\n  var intersects = arrayIntersectsArray(outer, inner);\n  var contains = coordinatesContainPoint(outer, inner[0]);\n\n  if (!intersects && contains) {\n    return true;\n  }\n\n  return false;\n}; // do any polygons in this array contain any other polygons in this array?\n// used for checking for holes in arcgis rings\n\n\nvar convertRingsToGeoJSON = function convertRingsToGeoJSON(rings) {\n  var outerRings = [];\n  var holes = [];\n  var x; // iterator\n\n  var outerRing; // current outer ring being evaluated\n\n  var hole; // current hole being evaluated\n  // for each ring\n\n  for (var r = 0; r < rings.length; r++) {\n    var ring = closeRing(rings[r].slice(0));\n\n    if (ring.length < 4) {\n      continue;\n    } // is this ring an outer ring? is it clockwise?\n\n\n    if (ringIsClockwise(ring)) {\n      var polygon = [ring.slice().reverse()]; // wind outer rings counterclockwise for RFC 7946 compliance\n\n      outerRings.push(polygon); // push to outer rings\n    } else {\n      holes.push(ring.slice().reverse()); // wind inner rings clockwise for RFC 7946 compliance\n    }\n  }\n\n  var uncontainedHoles = []; // while there are holes left...\n\n  while (holes.length) {\n    // pop a hole off out stack\n    hole = holes.pop(); // loop over all outer rings and see if they contain our hole.\n\n    var contained = false;\n\n    for (x = outerRings.length - 1; x >= 0; x--) {\n      outerRing = outerRings[x][0];\n\n      if (coordinatesContainCoordinates(outerRing, hole)) {\n        // the hole is contained push it into our polygon\n        outerRings[x].push(hole);\n        contained = true;\n        break;\n      }\n    } // ring is not contained in any outer ring\n    // sometimes this happens https://github.com/Esri/esri-leaflet/issues/320\n\n\n    if (!contained) {\n      uncontainedHoles.push(hole);\n    }\n  } // if we couldn't match any holes using contains we can try intersects...\n\n\n  while (uncontainedHoles.length) {\n    // pop a hole off out stack\n    hole = uncontainedHoles.pop(); // loop over all outer rings and see if any intersect our hole.\n\n    var intersects = false;\n\n    for (x = outerRings.length - 1; x >= 0; x--) {\n      outerRing = outerRings[x][0];\n\n      if (arrayIntersectsArray(outerRing, hole)) {\n        // the hole is contained push it into our polygon\n        outerRings[x].push(hole);\n        intersects = true;\n        break;\n      }\n    }\n\n    if (!intersects) {\n      outerRings.push([hole.reverse()]);\n    }\n  }\n\n  if (outerRings.length === 1) {\n    return {\n      type: 'Polygon',\n      coordinates: outerRings[0]\n    };\n  } else {\n    return {\n      type: 'MultiPolygon',\n      coordinates: outerRings\n    };\n  }\n};\n\nvar getId = function getId(attributes, idAttribute) {\n  var keys = idAttribute ? [idAttribute, 'OBJECTID', 'FID'] : ['OBJECTID', 'FID'];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (key in attributes && (typeof attributes[key] === 'string' || typeof attributes[key] === 'number')) {\n      return attributes[key];\n    }\n  }\n\n  throw Error('No valid id attribute found');\n};\n\nvar arcgisToGeoJSON = function arcgisToGeoJSON(arcgis, idAttribute) {\n  var geojson = {};\n\n  if (arcgis.features) {\n    geojson.type = 'FeatureCollection';\n    geojson.features = [];\n\n    for (var i = 0; i < arcgis.features.length; i++) {\n      geojson.features.push(arcgisToGeoJSON(arcgis.features[i], idAttribute));\n    }\n  }\n\n  if (typeof arcgis.x === 'number' && typeof arcgis.y === 'number') {\n    geojson.type = 'Point';\n    geojson.coordinates = [arcgis.x, arcgis.y];\n\n    if (typeof arcgis.z === 'number') {\n      geojson.coordinates.push(arcgis.z);\n    }\n  }\n\n  if (arcgis.points) {\n    geojson.type = 'MultiPoint';\n    geojson.coordinates = arcgis.points.slice(0);\n  }\n\n  if (arcgis.paths) {\n    if (arcgis.paths.length === 1) {\n      geojson.type = 'LineString';\n      geojson.coordinates = arcgis.paths[0].slice(0);\n    } else {\n      geojson.type = 'MultiLineString';\n      geojson.coordinates = arcgis.paths.slice(0);\n    }\n  }\n\n  if (arcgis.rings) {\n    geojson = convertRingsToGeoJSON(arcgis.rings.slice(0));\n  }\n\n  if (typeof arcgis.xmin === 'number' && typeof arcgis.ymin === 'number' && typeof arcgis.xmax === 'number' && typeof arcgis.ymax === 'number') {\n    geojson.type = 'Polygon';\n    geojson.coordinates = [[[arcgis.xmax, arcgis.ymax], [arcgis.xmin, arcgis.ymax], [arcgis.xmin, arcgis.ymin], [arcgis.xmax, arcgis.ymin], [arcgis.xmax, arcgis.ymax]]];\n  }\n\n  if (arcgis.geometry || arcgis.attributes) {\n    geojson.type = 'Feature';\n    geojson.geometry = arcgis.geometry ? arcgisToGeoJSON(arcgis.geometry) : null;\n    geojson.properties = arcgis.attributes ? shallowClone(arcgis.attributes) : null;\n\n    if (arcgis.attributes) {\n      try {\n        geojson.id = getId(arcgis.attributes, idAttribute);\n      } catch (err) {// don't set an id\n      }\n    }\n  } // if no valid geometry was encountered\n\n\n  if (JSON.stringify(geojson.geometry) === JSON.stringify({})) {\n    geojson.geometry = null;\n  }\n\n  if (arcgis.spatialReference && arcgis.spatialReference.wkid && arcgis.spatialReference.wkid !== 4326) {\n    console.warn('Object converted in non-standard crs - ' + JSON.stringify(arcgis.spatialReference));\n  }\n\n  return geojson;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n// outer rings are clockwise, holes are counterclockwise\n// used for converting GeoJSON Polygons to ArcGIS Polygons\n\nvar orientRings = function orientRings(poly) {\n  var output = [];\n  var polygon = poly.slice(0);\n  var outerRing = closeRing(polygon.shift().slice(0));\n\n  if (outerRing.length >= 4) {\n    if (!ringIsClockwise(outerRing)) {\n      outerRing.reverse();\n    }\n\n    output.push(outerRing);\n\n    for (var i = 0; i < polygon.length; i++) {\n      var hole = closeRing(polygon[i].slice(0));\n\n      if (hole.length >= 4) {\n        if (ringIsClockwise(hole)) {\n          hole.reverse();\n        }\n\n        output.push(hole);\n      }\n    }\n  }\n\n  return output;\n}; // This function flattens holes in multipolygons to one array of polygons\n// used for converting GeoJSON Polygons to ArcGIS Polygons\n\n\nvar flattenMultiPolygonRings = function flattenMultiPolygonRings(rings) {\n  var output = [];\n\n  for (var i = 0; i < rings.length; i++) {\n    var polygon = orientRings(rings[i]);\n\n    for (var x = polygon.length - 1; x >= 0; x--) {\n      var ring = polygon[x].slice(0);\n      output.push(ring);\n    }\n  }\n\n  return output;\n};\n\nvar geojsonToArcGIS = function geojsonToArcGIS(geojson, idAttribute) {\n  idAttribute = idAttribute || 'OBJECTID';\n  var spatialReference = {\n    wkid: 4326\n  };\n  var result = {};\n  var i;\n\n  switch (geojson.type) {\n    case 'Point':\n      result.x = geojson.coordinates[0];\n      result.y = geojson.coordinates[1];\n\n      if (geojson.coordinates[2] != null) {\n        result.z = geojson.coordinates[2];\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiPoint':\n      result.points = geojson.coordinates.slice(0);\n\n      if (geojson.coordinates[0][2] != null) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'LineString':\n      result.paths = [geojson.coordinates.slice(0)];\n\n      if (geojson.coordinates[0][2] != null) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiLineString':\n      result.paths = geojson.coordinates.slice(0);\n\n      if (geojson.coordinates[0][0][2] != null) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'Polygon':\n      result.rings = orientRings(geojson.coordinates.slice(0));\n\n      if (geojson.coordinates[0][0][2] != null) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiPolygon':\n      result.rings = flattenMultiPolygonRings(geojson.coordinates.slice(0));\n\n      if (geojson.coordinates[0][0][0][2] != null) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'Feature':\n      if (geojson.geometry) {\n        result.geometry = geojsonToArcGIS(geojson.geometry, idAttribute);\n      }\n\n      result.attributes = geojson.properties ? shallowClone(geojson.properties) : {};\n\n      if (geojson.id) {\n        result.attributes[idAttribute] = geojson.id;\n      }\n\n      break;\n\n    case 'FeatureCollection':\n      result = [];\n\n      for (i = 0; i < geojson.features.length; i++) {\n        result.push(geojsonToArcGIS(geojson.features[i], idAttribute));\n      }\n\n      break;\n\n    case 'GeometryCollection':\n      result = [];\n\n      for (i = 0; i < geojson.geometries.length; i++) {\n        result.push(geojsonToArcGIS(geojson.geometries[i], idAttribute));\n      }\n\n      break;\n  }\n\n  return result;\n};\n\nexport { arcgisToGeoJSON, geojsonToArcGIS };\n"],
  "mappings": "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",
  "names": ["edgeIntersectsEdge", "coordinatesContainPoint", "pointsEqual", "arrayIntersectsArray", "closeRing", "ringIsClockwise", "shallowClone", "coordinatesContainCoordinates", "convertRingsToGeoJSON", "getId", "arcgisToGeoJSON", "orientRings", "flattenMultiPolygonRings", "geojsonToArcGIS"]
}
