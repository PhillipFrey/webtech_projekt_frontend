{
  "version": 3,
  "sources": ["../../color-name/index.js", "../../ieee754/index.js", "../../pbf/index.js", "../../ol/format.js", "../../ol/events/Event.js", "../../ol/ObjectEventType.js", "../../ol/Disposable.js", "../../ol/array.js", "../../ol/functions.js", "../../ol/obj.js", "../../ol/events/Target.js", "../../ol/events/EventType.js", "../../ol/events.js", "../../ol/Observable.js", "../../ol/util.js", "../../ol/Object.js", "../../ol/asserts.js", "../../ol/Feature.js", "../../ol/geom.js", "../../ol/has.js", "../../ol/transform.js", "../../ol/extent.js", "../../ol/extent/Relationship.js", "../../ol/proj/Units.js", "../../ol/proj/Projection.js", "../../ol/proj/epsg3857.js", "../../ol/proj/epsg4326.js", "../../ol/proj/projections.js", "../../ol/proj/transforms.js", "../../ol/math.js", "../../ol/string.js", "../../ol/coordinate.js", "../../ol/sphere.js", "../../ol/console.js", "../../ol/proj.js", "../../ol/geom/flat/transform.js", "../../ol/geom/Geometry.js", "../../ol/geom/SimpleGeometry.js", "../../ol/geom/flat/deflate.js", "../../ol/geom/Circle.js", "../../ol/geom/GeometryCollection.js", "../../ol/geom/flat/closest.js", "../../ol/geom/flat/simplify.js", "../../ol/geom/flat/inflate.js", "../../ol/geom/flat/area.js", "../../ol/geom/LinearRing.js", "../../ol/geom/flat/segments.js", "../../ol/geom/flat/interpolate.js", "../../ol/geom/flat/contains.js", "../../ol/geom/flat/intersectsextent.js", "../../ol/geom/flat/length.js", "../../ol/geom/LineString.js", "../../ol/geom/MultiLineString.js", "../../ol/geom/Point.js", "../../ol/geom/MultiPoint.js", "../../ol/geom/flat/interiorpoint.js", "../../ol/geom/flat/reverse.js", "../../ol/geom/flat/orient.js", "../../ol/geom/Polygon.js", "../../ol/geom/flat/center.js", "../../ol/geom/MultiPolygon.js", "../../ol/render/Feature.js", "../../ol/format/Feature.js", "../../ol/format/JSONFeature.js", "../../ol/format/EsriJSON.js", "../../ol/format/GeoJSON.js", "../../ol/xml.js", "../../ol/format/XMLFeature.js", "../../ol/format/GMLBase.js", "../../ol/format/xsd.js", "../../ol/format/GML2.js", "../../ol/format/GML3.js", "../../ol/format/GML.js", "../../ol/format/GPX.js", "../../ol/format/TextFeature.js", "../../ol/format/IGC.js", "../../ol/format/IIIFInfo.js", "../../ol/style/Fill.js", "../../ol/ImageState.js", "../../ol/size.js", "../../ol/style/Image.js", "../../color-space/rgb.js", "../../color-space/xyz.js", "../../color-space/luv.js", "../../color-space/lchuv.js", "../../color-parse/index.js", "../../color-space/hsl.js", "../../color-rgba/index.js", "../../ol/color.js", "../../ol/dom.js", "../../ol/Image.js", "../../ol/style/IconImageCache.js", "../../ol/style/IconImage.js", "../../ol/style/Icon.js", "../../ol/style/Stroke.js", "../../ol/colorlike.js", "../../ol/css.js", "../../ol/render/canvas.js", "../../ol/style/RegularShape.js", "../../ol/style/Circle.js", "../../ol/style/Style.js", "../../ol/style/Text.js", "../../ol/format/KML.js", "../../ol/format/MVT.js", "../../ol/format/XML.js", "../../ol/format/xlink.js", "../../ol/format/OWS.js", "../../ol/geom/flat/flip.js", "../../ol/format/Polyline.js", "../../ol/format/TopoJSON.js", "../../ol/format/GML32.js", "../../ol/format/filter/Filter.js", "../../ol/format/filter/LogicalNary.js", "../../ol/format/filter/And.js", "../../ol/format/filter/Bbox.js", "../../ol/format/filter.js", "../../ol/format/WFS.js", "../../ol/format/WKB.js", "../../ol/format/WKT.js", "../../ol/format/WMSCapabilities.js", "../../ol/format/WMSGetFeatureInfo.js", "../../ol/format/WMTSCapabilities.js"],
  "sourcesContent": ["'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\r\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\r\n  var e, m\r\n  var eLen = (nBytes * 8) - mLen - 1\r\n  var eMax = (1 << eLen) - 1\r\n  var eBias = eMax >> 1\r\n  var nBits = -7\r\n  var i = isLE ? (nBytes - 1) : 0\r\n  var d = isLE ? -1 : 1\r\n  var s = buffer[offset + i]\r\n\r\n  i += d\r\n\r\n  e = s & ((1 << (-nBits)) - 1)\r\n  s >>= (-nBits)\r\n  nBits += eLen\r\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n  m = e & ((1 << (-nBits)) - 1)\r\n  e >>= (-nBits)\r\n  nBits += mLen\r\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n  if (e === 0) {\r\n    e = 1 - eBias\r\n  } else if (e === eMax) {\r\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\r\n  } else {\r\n    m = m + Math.pow(2, mLen)\r\n    e = e - eBias\r\n  }\r\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\r\n}\r\n\r\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\r\n  var e, m, c\r\n  var eLen = (nBytes * 8) - mLen - 1\r\n  var eMax = (1 << eLen) - 1\r\n  var eBias = eMax >> 1\r\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\r\n  var i = isLE ? 0 : (nBytes - 1)\r\n  var d = isLE ? 1 : -1\r\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\r\n\r\n  value = Math.abs(value)\r\n\r\n  if (isNaN(value) || value === Infinity) {\r\n    m = isNaN(value) ? 1 : 0\r\n    e = eMax\r\n  } else {\r\n    e = Math.floor(Math.log(value) / Math.LN2)\r\n    if (value * (c = Math.pow(2, -e)) < 1) {\r\n      e--\r\n      c *= 2\r\n    }\r\n    if (e + eBias >= 1) {\r\n      value += rt / c\r\n    } else {\r\n      value += rt * Math.pow(2, 1 - eBias)\r\n    }\r\n    if (value * c >= 2) {\r\n      e++\r\n      c /= 2\r\n    }\r\n\r\n    if (e + eBias >= eMax) {\r\n      m = 0\r\n      e = eMax\r\n    } else if (e + eBias >= 1) {\r\n      m = ((value * c) - 1) * Math.pow(2, mLen)\r\n      e = e + eBias\r\n    } else {\r\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\r\n      e = 0\r\n    }\r\n  }\r\n\r\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\r\n\r\n  e = (e << mLen) | m\r\n  eLen += mLen\r\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\r\n\r\n  buffer[offset + i - d] |= s * 128\r\n}\r\n", "'use strict';\r\n\r\nmodule.exports = Pbf;\r\n\r\nvar ieee754 = require('ieee754');\r\n\r\nfunction Pbf(buf) {\r\n    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);\r\n    this.pos = 0;\r\n    this.type = 0;\r\n    this.length = this.buf.length;\r\n}\r\n\r\nPbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum\r\nPbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64\r\nPbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields\r\nPbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32\r\n\r\nvar SHIFT_LEFT_32 = (1 << 16) * (1 << 16),\r\n    SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\r\n\r\n// Threshold chosen based on both benchmarking and knowledge about browser string\r\n// data structures (which currently switch structure types at 12 bytes or more)\r\nvar TEXT_DECODER_MIN_LENGTH = 12;\r\nvar utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');\r\n\r\nPbf.prototype = {\r\n\r\n    destroy: function() {\r\n        this.buf = null;\r\n    },\r\n\r\n    // === READING =================================================================\r\n\r\n    readFields: function(readField, result, end) {\r\n        end = end || this.length;\r\n\r\n        while (this.pos < end) {\r\n            var val = this.readVarint(),\r\n                tag = val >> 3,\r\n                startPos = this.pos;\r\n\r\n            this.type = val & 0x7;\r\n            readField(tag, result, this);\r\n\r\n            if (this.pos === startPos) this.skip(val);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    readMessage: function(readField, result) {\r\n        return this.readFields(readField, result, this.readVarint() + this.pos);\r\n    },\r\n\r\n    readFixed32: function() {\r\n        var val = readUInt32(this.buf, this.pos);\r\n        this.pos += 4;\r\n        return val;\r\n    },\r\n\r\n    readSFixed32: function() {\r\n        var val = readInt32(this.buf, this.pos);\r\n        this.pos += 4;\r\n        return val;\r\n    },\r\n\r\n    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)\r\n\r\n    readFixed64: function() {\r\n        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;\r\n        this.pos += 8;\r\n        return val;\r\n    },\r\n\r\n    readSFixed64: function() {\r\n        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;\r\n        this.pos += 8;\r\n        return val;\r\n    },\r\n\r\n    readFloat: function() {\r\n        var val = ieee754.read(this.buf, this.pos, true, 23, 4);\r\n        this.pos += 4;\r\n        return val;\r\n    },\r\n\r\n    readDouble: function() {\r\n        var val = ieee754.read(this.buf, this.pos, true, 52, 8);\r\n        this.pos += 8;\r\n        return val;\r\n    },\r\n\r\n    readVarint: function(isSigned) {\r\n        var buf = this.buf,\r\n            val, b;\r\n\r\n        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;\r\n        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;\r\n        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;\r\n        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;\r\n        b = buf[this.pos];   val |= (b & 0x0f) << 28;\r\n\r\n        return readVarintRemainder(val, isSigned, this);\r\n    },\r\n\r\n    readVarint64: function() { // for compatibility with v2.0.1\r\n        return this.readVarint(true);\r\n    },\r\n\r\n    readSVarint: function() {\r\n        var num = this.readVarint();\r\n        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\r\n    },\r\n\r\n    readBoolean: function() {\r\n        return Boolean(this.readVarint());\r\n    },\r\n\r\n    readString: function() {\r\n        var end = this.readVarint() + this.pos;\r\n        var pos = this.pos;\r\n        this.pos = end;\r\n\r\n        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {\r\n            // longer strings are fast with the built-in browser TextDecoder API\r\n            return readUtf8TextDecoder(this.buf, pos, end);\r\n        }\r\n        // short strings are fast with our custom implementation\r\n        return readUtf8(this.buf, pos, end);\r\n    },\r\n\r\n    readBytes: function() {\r\n        var end = this.readVarint() + this.pos,\r\n            buffer = this.buf.subarray(this.pos, end);\r\n        this.pos = end;\r\n        return buffer;\r\n    },\r\n\r\n    // verbose for performance reasons; doesn't affect gzipped size\r\n\r\n    readPackedVarint: function(arr, isSigned) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readVarint(isSigned));\r\n        return arr;\r\n    },\r\n    readPackedSVarint: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readSVarint());\r\n        return arr;\r\n    },\r\n    readPackedBoolean: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readBoolean());\r\n        return arr;\r\n    },\r\n    readPackedFloat: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readFloat());\r\n        return arr;\r\n    },\r\n    readPackedDouble: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readDouble());\r\n        return arr;\r\n    },\r\n    readPackedFixed32: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readFixed32());\r\n        return arr;\r\n    },\r\n    readPackedSFixed32: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readSFixed32());\r\n        return arr;\r\n    },\r\n    readPackedFixed64: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readFixed64());\r\n        return arr;\r\n    },\r\n    readPackedSFixed64: function(arr) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readSFixed64());\r\n        return arr;\r\n    },\r\n\r\n    skip: function(val) {\r\n        var type = val & 0x7;\r\n        if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}\r\n        else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;\r\n        else if (type === Pbf.Fixed32) this.pos += 4;\r\n        else if (type === Pbf.Fixed64) this.pos += 8;\r\n        else throw new Error('Unimplemented type: ' + type);\r\n    },\r\n\r\n    // === WRITING =================================================================\r\n\r\n    writeTag: function(tag, type) {\r\n        this.writeVarint((tag << 3) | type);\r\n    },\r\n\r\n    realloc: function(min) {\r\n        var length = this.length || 16;\r\n\r\n        while (length < this.pos + min) length *= 2;\r\n\r\n        if (length !== this.length) {\r\n            var buf = new Uint8Array(length);\r\n            buf.set(this.buf);\r\n            this.buf = buf;\r\n            this.length = length;\r\n        }\r\n    },\r\n\r\n    finish: function() {\r\n        this.length = this.pos;\r\n        this.pos = 0;\r\n        return this.buf.subarray(0, this.length);\r\n    },\r\n\r\n    writeFixed32: function(val) {\r\n        this.realloc(4);\r\n        writeInt32(this.buf, val, this.pos);\r\n        this.pos += 4;\r\n    },\r\n\r\n    writeSFixed32: function(val) {\r\n        this.realloc(4);\r\n        writeInt32(this.buf, val, this.pos);\r\n        this.pos += 4;\r\n    },\r\n\r\n    writeFixed64: function(val) {\r\n        this.realloc(8);\r\n        writeInt32(this.buf, val & -1, this.pos);\r\n        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);\r\n        this.pos += 8;\r\n    },\r\n\r\n    writeSFixed64: function(val) {\r\n        this.realloc(8);\r\n        writeInt32(this.buf, val & -1, this.pos);\r\n        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);\r\n        this.pos += 8;\r\n    },\r\n\r\n    writeVarint: function(val) {\r\n        val = +val || 0;\r\n\r\n        if (val > 0xfffffff || val < 0) {\r\n            writeBigVarint(val, this);\r\n            return;\r\n        }\r\n\r\n        this.realloc(4);\r\n\r\n        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\r\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\r\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\r\n        this.buf[this.pos++] =   (val >>> 7) & 0x7f;\r\n    },\r\n\r\n    writeSVarint: function(val) {\r\n        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);\r\n    },\r\n\r\n    writeBoolean: function(val) {\r\n        this.writeVarint(Boolean(val));\r\n    },\r\n\r\n    writeString: function(str) {\r\n        str = String(str);\r\n        this.realloc(str.length * 4);\r\n\r\n        this.pos++; // reserve 1 byte for short string length\r\n\r\n        var startPos = this.pos;\r\n        // write the string directly to the buffer and see how much was written\r\n        this.pos = writeUtf8(this.buf, str, this.pos);\r\n        var len = this.pos - startPos;\r\n\r\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\r\n\r\n        // finally, write the message length in the reserved place and restore the position\r\n        this.pos = startPos - 1;\r\n        this.writeVarint(len);\r\n        this.pos += len;\r\n    },\r\n\r\n    writeFloat: function(val) {\r\n        this.realloc(4);\r\n        ieee754.write(this.buf, val, this.pos, true, 23, 4);\r\n        this.pos += 4;\r\n    },\r\n\r\n    writeDouble: function(val) {\r\n        this.realloc(8);\r\n        ieee754.write(this.buf, val, this.pos, true, 52, 8);\r\n        this.pos += 8;\r\n    },\r\n\r\n    writeBytes: function(buffer) {\r\n        var len = buffer.length;\r\n        this.writeVarint(len);\r\n        this.realloc(len);\r\n        for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];\r\n    },\r\n\r\n    writeRawMessage: function(fn, obj) {\r\n        this.pos++; // reserve 1 byte for short message length\r\n\r\n        // write the message directly to the buffer and see how much was written\r\n        var startPos = this.pos;\r\n        fn(obj, this);\r\n        var len = this.pos - startPos;\r\n\r\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\r\n\r\n        // finally, write the message length in the reserved place and restore the position\r\n        this.pos = startPos - 1;\r\n        this.writeVarint(len);\r\n        this.pos += len;\r\n    },\r\n\r\n    writeMessage: function(tag, fn, obj) {\r\n        this.writeTag(tag, Pbf.Bytes);\r\n        this.writeRawMessage(fn, obj);\r\n    },\r\n\r\n    writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },\r\n    writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },\r\n    writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },\r\n    writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },\r\n    writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },\r\n    writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },\r\n    writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },\r\n    writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },\r\n    writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },\r\n\r\n    writeBytesField: function(tag, buffer) {\r\n        this.writeTag(tag, Pbf.Bytes);\r\n        this.writeBytes(buffer);\r\n    },\r\n    writeFixed32Field: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Fixed32);\r\n        this.writeFixed32(val);\r\n    },\r\n    writeSFixed32Field: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Fixed32);\r\n        this.writeSFixed32(val);\r\n    },\r\n    writeFixed64Field: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Fixed64);\r\n        this.writeFixed64(val);\r\n    },\r\n    writeSFixed64Field: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Fixed64);\r\n        this.writeSFixed64(val);\r\n    },\r\n    writeVarintField: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Varint);\r\n        this.writeVarint(val);\r\n    },\r\n    writeSVarintField: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Varint);\r\n        this.writeSVarint(val);\r\n    },\r\n    writeStringField: function(tag, str) {\r\n        this.writeTag(tag, Pbf.Bytes);\r\n        this.writeString(str);\r\n    },\r\n    writeFloatField: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Fixed32);\r\n        this.writeFloat(val);\r\n    },\r\n    writeDoubleField: function(tag, val) {\r\n        this.writeTag(tag, Pbf.Fixed64);\r\n        this.writeDouble(val);\r\n    },\r\n    writeBooleanField: function(tag, val) {\r\n        this.writeVarintField(tag, Boolean(val));\r\n    }\r\n};\r\n\r\nfunction readVarintRemainder(l, s, p) {\r\n    var buf = p.buf,\r\n        h, b;\r\n\r\n    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);\r\n    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);\r\n    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);\r\n    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);\r\n    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);\r\n    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);\r\n\r\n    throw new Error('Expected varint not more than 10 bytes');\r\n}\r\n\r\nfunction readPackedEnd(pbf) {\r\n    return pbf.type === Pbf.Bytes ?\r\n        pbf.readVarint() + pbf.pos : pbf.pos + 1;\r\n}\r\n\r\nfunction toNum(low, high, isSigned) {\r\n    if (isSigned) {\r\n        return high * 0x100000000 + (low >>> 0);\r\n    }\r\n\r\n    return ((high >>> 0) * 0x100000000) + (low >>> 0);\r\n}\r\n\r\nfunction writeBigVarint(val, pbf) {\r\n    var low, high;\r\n\r\n    if (val >= 0) {\r\n        low  = (val % 0x100000000) | 0;\r\n        high = (val / 0x100000000) | 0;\r\n    } else {\r\n        low  = ~(-val % 0x100000000);\r\n        high = ~(-val / 0x100000000);\r\n\r\n        if (low ^ 0xffffffff) {\r\n            low = (low + 1) | 0;\r\n        } else {\r\n            low = 0;\r\n            high = (high + 1) | 0;\r\n        }\r\n    }\r\n\r\n    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {\r\n        throw new Error('Given varint doesn\\'t fit into 10 bytes');\r\n    }\r\n\r\n    pbf.realloc(10);\r\n\r\n    writeBigVarintLow(low, high, pbf);\r\n    writeBigVarintHigh(high, pbf);\r\n}\r\n\r\nfunction writeBigVarintLow(low, high, pbf) {\r\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\r\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\r\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\r\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\r\n    pbf.buf[pbf.pos]   = low & 0x7f;\r\n}\r\n\r\nfunction writeBigVarintHigh(high, pbf) {\r\n    var lsb = (high & 0x07) << 4;\r\n\r\n    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;\r\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\r\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\r\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\r\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\r\n    pbf.buf[pbf.pos++]  = high & 0x7f;\r\n}\r\n\r\nfunction makeRoomForExtraLength(startPos, len, pbf) {\r\n    var extraLen =\r\n        len <= 0x3fff ? 1 :\r\n        len <= 0x1fffff ? 2 :\r\n        len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));\r\n\r\n    // if 1 byte isn't enough for encoding message length, shift the data to the right\r\n    pbf.realloc(extraLen);\r\n    for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];\r\n}\r\n\r\nfunction writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }\r\nfunction writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }\r\nfunction writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }\r\nfunction writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }\r\nfunction writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }\r\nfunction writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }\r\nfunction writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }\r\nfunction writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }\r\nfunction writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }\r\n\r\n// Buffer code below from https://github.com/feross/buffer, MIT-licensed\r\n\r\nfunction readUInt32(buf, pos) {\r\n    return ((buf[pos]) |\r\n        (buf[pos + 1] << 8) |\r\n        (buf[pos + 2] << 16)) +\r\n        (buf[pos + 3] * 0x1000000);\r\n}\r\n\r\nfunction writeInt32(buf, val, pos) {\r\n    buf[pos] = val;\r\n    buf[pos + 1] = (val >>> 8);\r\n    buf[pos + 2] = (val >>> 16);\r\n    buf[pos + 3] = (val >>> 24);\r\n}\r\n\r\nfunction readInt32(buf, pos) {\r\n    return ((buf[pos]) |\r\n        (buf[pos + 1] << 8) |\r\n        (buf[pos + 2] << 16)) +\r\n        (buf[pos + 3] << 24);\r\n}\r\n\r\nfunction readUtf8(buf, pos, end) {\r\n    var str = '';\r\n    var i = pos;\r\n\r\n    while (i < end) {\r\n        var b0 = buf[i];\r\n        var c = null; // codepoint\r\n        var bytesPerSequence =\r\n            b0 > 0xEF ? 4 :\r\n            b0 > 0xDF ? 3 :\r\n            b0 > 0xBF ? 2 : 1;\r\n\r\n        if (i + bytesPerSequence > end) break;\r\n\r\n        var b1, b2, b3;\r\n\r\n        if (bytesPerSequence === 1) {\r\n            if (b0 < 0x80) {\r\n                c = b0;\r\n            }\r\n        } else if (bytesPerSequence === 2) {\r\n            b1 = buf[i + 1];\r\n            if ((b1 & 0xC0) === 0x80) {\r\n                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);\r\n                if (c <= 0x7F) {\r\n                    c = null;\r\n                }\r\n            }\r\n        } else if (bytesPerSequence === 3) {\r\n            b1 = buf[i + 1];\r\n            b2 = buf[i + 2];\r\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {\r\n                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);\r\n                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {\r\n                    c = null;\r\n                }\r\n            }\r\n        } else if (bytesPerSequence === 4) {\r\n            b1 = buf[i + 1];\r\n            b2 = buf[i + 2];\r\n            b3 = buf[i + 3];\r\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\r\n                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);\r\n                if (c <= 0xFFFF || c >= 0x110000) {\r\n                    c = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (c === null) {\r\n            c = 0xFFFD;\r\n            bytesPerSequence = 1;\r\n\r\n        } else if (c > 0xFFFF) {\r\n            c -= 0x10000;\r\n            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);\r\n            c = 0xDC00 | c & 0x3FF;\r\n        }\r\n\r\n        str += String.fromCharCode(c);\r\n        i += bytesPerSequence;\r\n    }\r\n\r\n    return str;\r\n}\r\n\r\nfunction readUtf8TextDecoder(buf, pos, end) {\r\n    return utf8TextDecoder.decode(buf.subarray(pos, end));\r\n}\r\n\r\nfunction writeUtf8(buf, str, pos) {\r\n    for (var i = 0, c, lead; i < str.length; i++) {\r\n        c = str.charCodeAt(i); // code point\r\n\r\n        if (c > 0xD7FF && c < 0xE000) {\r\n            if (lead) {\r\n                if (c < 0xDC00) {\r\n                    buf[pos++] = 0xEF;\r\n                    buf[pos++] = 0xBF;\r\n                    buf[pos++] = 0xBD;\r\n                    lead = c;\r\n                    continue;\r\n                } else {\r\n                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\r\n                    lead = null;\r\n                }\r\n            } else {\r\n                if (c > 0xDBFF || (i + 1 === str.length)) {\r\n                    buf[pos++] = 0xEF;\r\n                    buf[pos++] = 0xBF;\r\n                    buf[pos++] = 0xBD;\r\n                } else {\r\n                    lead = c;\r\n                }\r\n                continue;\r\n            }\r\n        } else if (lead) {\r\n            buf[pos++] = 0xEF;\r\n            buf[pos++] = 0xBF;\r\n            buf[pos++] = 0xBD;\r\n            lead = null;\r\n        }\r\n\r\n        if (c < 0x80) {\r\n            buf[pos++] = c;\r\n        } else {\r\n            if (c < 0x800) {\r\n                buf[pos++] = c >> 0x6 | 0xC0;\r\n            } else {\r\n                if (c < 0x10000) {\r\n                    buf[pos++] = c >> 0xC | 0xE0;\r\n                } else {\r\n                    buf[pos++] = c >> 0x12 | 0xF0;\r\n                    buf[pos++] = c >> 0xC & 0x3F | 0x80;\r\n                }\r\n                buf[pos++] = c >> 0x6 & 0x3F | 0x80;\r\n            }\r\n            buf[pos++] = c & 0x3F | 0x80;\r\n        }\r\n    }\r\n    return pos;\r\n}\r\n", "/**\r\n * @module ol/format\r\n */\r\n\r\nexport {default as EsriJSON} from './format/EsriJSON.js';\r\nexport {default as GeoJSON} from './format/GeoJSON.js';\r\nexport {default as GML} from './format/GML.js';\r\nexport {default as GPX} from './format/GPX.js';\r\nexport {default as IGC} from './format/IGC.js';\r\nexport {default as IIIFInfo} from './format/IIIFInfo.js';\r\nexport {default as KML} from './format/KML.js';\r\nexport {default as MVT} from './format/MVT.js';\r\nexport {default as OWS} from './format/OWS.js';\r\nexport {default as Polyline} from './format/Polyline.js';\r\nexport {default as TopoJSON} from './format/TopoJSON.js';\r\nexport {default as WFS} from './format/WFS.js';\r\nexport {default as WKB} from './format/WKB.js';\r\nexport {default as WKT} from './format/WKT.js';\r\nexport {default as WMSCapabilities} from './format/WMSCapabilities.js';\r\nexport {default as WMSGetFeatureInfo} from './format/WMSGetFeatureInfo.js';\r\nexport {default as WMTSCapabilities} from './format/WMTSCapabilities.js';\r\n", "/**\r\n * @module ol/events/Event\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\r\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\r\n *\r\n * This implementation only provides `type` and `target` properties, and\r\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\r\n * for higher level events defined in the library, and works with\r\n * {@link module:ol/events/Target~Target}.\r\n */\r\nclass BaseEvent {\r\n  /**\r\n   * @param {string} type Type.\r\n   */\r\n  constructor(type) {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.propagationStopped;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.defaultPrevented;\r\n\r\n    /**\r\n     * The event type.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.type = type;\r\n\r\n    /**\r\n     * The event target.\r\n     * @type {Object}\r\n     * @api\r\n     */\r\n    this.target = null;\r\n  }\r\n\r\n  /**\r\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\r\n   * will be fired.\r\n   * @api\r\n   */\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n\r\n  /**\r\n   * Stop event propagation.\r\n   * @api\r\n   */\r\n  stopPropagation() {\r\n    this.propagationStopped = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Event|import(\"./Event.js\").default} evt Event\r\n */\r\nexport function stopPropagation(evt) {\r\n  evt.stopPropagation();\r\n}\r\n\r\n/**\r\n * @param {Event|import(\"./Event.js\").default} evt Event\r\n */\r\nexport function preventDefault(evt) {\r\n  evt.preventDefault();\r\n}\r\n\r\nexport default BaseEvent;\r\n", "/**\r\n * @module ol/ObjectEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a property is changed.\r\n   * @event module:ol/Object.ObjectEvent#propertychange\r\n   * @api\r\n   */\r\n  PROPERTYCHANGE: 'propertychange',\r\n};\r\n\r\n/**\r\n * @typedef {'propertychange'} Types\r\n */\r\n", "/**\r\n * @module ol/Disposable\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Objects that need to clean up after themselves.\r\n */\r\nclass Disposable {\r\n  constructor() {\r\n    /**\r\n     * The object has already been disposed.\r\n     * @type {boolean}\r\n     * @protected\r\n     */\r\n    this.disposed = false;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  dispose() {\r\n    if (!this.disposed) {\r\n      this.disposed = true;\r\n      this.disposeInternal();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extension point for disposable objects.\r\n   * @protected\r\n   */\r\n  disposeInternal() {}\r\n}\r\n\r\nexport default Disposable;\r\n", "/**\r\n * @module ol/array\r\n */\r\n\r\n/**\r\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\r\n * https://github.com/darkskyapp/binary-search\r\n *\r\n * @param {Array<*>} haystack Items to search through.\r\n * @param {*} needle The item to look for.\r\n * @param {Function} [comparator] Comparator function.\r\n * @return {number} The index of the item if found, -1 if not.\r\n */\r\nexport function binarySearch(haystack, needle, comparator) {\r\n  let mid, cmp;\r\n  comparator = comparator || ascending;\r\n  let low = 0;\r\n  let high = haystack.length;\r\n  let found = false;\r\n\r\n  while (low < high) {\r\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\r\n     * to double (which gives the wrong results). */\r\n    mid = low + ((high - low) >> 1);\r\n    cmp = +comparator(haystack[mid], needle);\r\n\r\n    if (cmp < 0.0) {\r\n      /* Too low. */\r\n      low = mid + 1;\r\n    } else {\r\n      /* Key found or too high */\r\n      high = mid;\r\n      found = !cmp;\r\n    }\r\n  }\r\n\r\n  /* Key not found. */\r\n  return found ? low : ~low;\r\n}\r\n\r\n/**\r\n * Compare function sorting arrays in ascending order.  Safe to use for numeric values.\r\n * @param {*} a The first object to be compared.\r\n * @param {*} b The second object to be compared.\r\n * @return {number} A negative number, zero, or a positive number as the first\r\n *     argument is less than, equal to, or greater than the second.\r\n */\r\nexport function ascending(a, b) {\r\n  return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\n/**\r\n * Compare function sorting arrays in descending order.  Safe to use for numeric values.\r\n * @param {*} a The first object to be compared.\r\n * @param {*} b The second object to be compared.\r\n * @return {number} A negative number, zero, or a positive number as the first\r\n *     argument is greater than, equal to, or less than the second.\r\n */\r\nexport function descending(a, b) {\r\n  return a < b ? 1 : a > b ? -1 : 0;\r\n}\r\n\r\n/**\r\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\r\n * of this type to determine which nearest resolution to use.\r\n *\r\n * This function takes a `{number}` representing a value between two array entries,\r\n * a `{number}` representing the value of the nearest higher entry and\r\n * a `{number}` representing the value of the nearest lower entry\r\n * as arguments and returns a `{number}`. If a negative number or zero is returned\r\n * the lower value will be used, if a positive number is returned the higher value\r\n * will be used.\r\n * @typedef {function(number, number, number): number} NearestDirectionFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {Array<number>} arr Array in descending order.\r\n * @param {number} target Target.\r\n * @param {number|NearestDirectionFunction} direction\r\n *    0 means return the nearest,\r\n *    > 0 means return the largest nearest,\r\n *    < 0 means return the smallest nearest.\r\n * @return {number} Index.\r\n */\r\nexport function linearFindNearest(arr, target, direction) {\r\n  if (arr[0] <= target) {\r\n    return 0;\r\n  }\r\n\r\n  const n = arr.length;\r\n  if (target <= arr[n - 1]) {\r\n    return n - 1;\r\n  }\r\n\r\n  if (typeof direction === 'function') {\r\n    for (let i = 1; i < n; ++i) {\r\n      const candidate = arr[i];\r\n      if (candidate === target) {\r\n        return i;\r\n      }\r\n      if (candidate < target) {\r\n        if (direction(target, arr[i - 1], candidate) > 0) {\r\n          return i - 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n    return n - 1;\r\n  }\r\n\r\n  if (direction > 0) {\r\n    for (let i = 1; i < n; ++i) {\r\n      if (arr[i] < target) {\r\n        return i - 1;\r\n      }\r\n    }\r\n    return n - 1;\r\n  }\r\n\r\n  if (direction < 0) {\r\n    for (let i = 1; i < n; ++i) {\r\n      if (arr[i] <= target) {\r\n        return i;\r\n      }\r\n    }\r\n    return n - 1;\r\n  }\r\n\r\n  for (let i = 1; i < n; ++i) {\r\n    if (arr[i] == target) {\r\n      return i;\r\n    }\r\n    if (arr[i] < target) {\r\n      if (arr[i - 1] - target < target - arr[i]) {\r\n        return i - 1;\r\n      }\r\n      return i;\r\n    }\r\n  }\r\n  return n - 1;\r\n}\r\n\r\n/**\r\n * @param {Array<*>} arr Array.\r\n * @param {number} begin Begin index.\r\n * @param {number} end End index.\r\n */\r\nexport function reverseSubArray(arr, begin, end) {\r\n  while (begin < end) {\r\n    const tmp = arr[begin];\r\n    arr[begin] = arr[end];\r\n    arr[end] = tmp;\r\n    ++begin;\r\n    --end;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<VALUE>} arr The array to modify.\r\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\r\n * @template VALUE\r\n */\r\nexport function extend(arr, data) {\r\n  const extension = Array.isArray(data) ? data : [data];\r\n  const length = extension.length;\r\n  for (let i = 0; i < length; i++) {\r\n    arr[arr.length] = extension[i];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<VALUE>} arr The array to modify.\r\n * @param {VALUE} obj The element to remove.\r\n * @template VALUE\r\n * @return {boolean} If the element was removed.\r\n */\r\nexport function remove(arr, obj) {\r\n  const i = arr.indexOf(obj);\r\n  const found = i > -1;\r\n  if (found) {\r\n    arr.splice(i, 1);\r\n  }\r\n  return found;\r\n}\r\n\r\n/**\r\n * @param {Array<any>|Uint8ClampedArray} arr1 The first array to compare.\r\n * @param {Array<any>|Uint8ClampedArray} arr2 The second array to compare.\r\n * @return {boolean} Whether the two arrays are equal.\r\n */\r\nexport function equals(arr1, arr2) {\r\n  const len1 = arr1.length;\r\n  if (len1 !== arr2.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < len1; i++) {\r\n    if (arr1[i] !== arr2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Sort the passed array such that the relative order of equal elements is preserved.\r\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\r\n * @param {Array<*>} arr The array to sort (modifies original).\r\n * @param {!function(*, *): number} compareFnc Comparison function.\r\n * @api\r\n */\r\nexport function stableSort(arr, compareFnc) {\r\n  const length = arr.length;\r\n  const tmp = Array(arr.length);\r\n  let i;\r\n  for (i = 0; i < length; i++) {\r\n    tmp[i] = {index: i, value: arr[i]};\r\n  }\r\n  tmp.sort(function (a, b) {\r\n    return compareFnc(a.value, b.value) || a.index - b.index;\r\n  });\r\n  for (i = 0; i < arr.length; i++) {\r\n    arr[i] = tmp[i].value;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<*>} arr The array to test.\r\n * @param {Function} [func] Comparison function.\r\n * @param {boolean} [strict] Strictly sorted (default false).\r\n * @return {boolean} Return index.\r\n */\r\nexport function isSorted(arr, func, strict) {\r\n  const compare = func || ascending;\r\n  return arr.every(function (currentVal, index) {\r\n    if (index === 0) {\r\n      return true;\r\n    }\r\n    const res = compare(arr[index - 1], currentVal);\r\n    return !(res > 0 || (strict && res === 0));\r\n  });\r\n}\r\n", "/**\r\n * @module ol/functions\r\n */\r\n\r\nimport {equals as arrayEquals} from './array.js';\r\n\r\n/**\r\n * Always returns true.\r\n * @return {boolean} true.\r\n */\r\nexport function TRUE() {\r\n  return true;\r\n}\r\n\r\n/**\r\n * Always returns false.\r\n * @return {boolean} false.\r\n */\r\nexport function FALSE() {\r\n  return false;\r\n}\r\n\r\n/**\r\n * A reusable function, used e.g. as a default for callbacks.\r\n *\r\n * @return {void} Nothing.\r\n */\r\nexport function VOID() {}\r\n\r\n/**\r\n * Wrap a function in another function that remembers the last return.  If the\r\n * returned function is called twice in a row with the same arguments and the same\r\n * this object, it will return the value from the first call in the second call.\r\n *\r\n * @param {function(...any): ReturnType} fn The function to memoize.\r\n * @return {function(...any): ReturnType} The memoized function.\r\n * @template ReturnType\r\n */\r\nexport function memoizeOne(fn) {\r\n  let called = false;\r\n\r\n  /** @type {ReturnType} */\r\n  let lastResult;\r\n\r\n  /** @type {Array<any>} */\r\n  let lastArgs;\r\n\r\n  let lastThis;\r\n\r\n  return function () {\r\n    const nextArgs = Array.prototype.slice.call(arguments);\r\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\r\n      called = true;\r\n      lastThis = this;\r\n      lastArgs = nextArgs;\r\n      lastResult = fn.apply(this, arguments);\r\n    }\r\n    return lastResult;\r\n  };\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\r\n * @return {Promise<T>} A promise for the value.\r\n */\r\nexport function toPromise(getter) {\r\n  function promiseGetter() {\r\n    let value;\r\n    try {\r\n      value = getter();\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    if (value instanceof Promise) {\r\n      return value;\r\n    }\r\n    return Promise.resolve(value);\r\n  }\r\n  return promiseGetter();\r\n}\r\n", "/**\r\n * @module ol/obj\r\n */\r\n\r\n/**\r\n * Removes all properties from an object.\r\n * @param {Object<string, unknown>} object The object to clear.\r\n */\r\nexport function clear(object) {\r\n  for (const property in object) {\r\n    delete object[property];\r\n  }\r\n}\r\n\r\n/**\r\n * Determine if an object has any properties.\r\n * @param {Object} object The object to check.\r\n * @return {boolean} The object is empty.\r\n */\r\nexport function isEmpty(object) {\r\n  let property;\r\n  for (property in object) {\r\n    return false;\r\n  }\r\n  return !property;\r\n}\r\n", "/**\r\n * @module ol/events/Target\r\n */\r\nimport Disposable from '../Disposable.js';\r\nimport Event from './Event.js';\r\nimport {VOID} from '../functions.js';\r\nimport {clear} from '../obj.js';\r\n\r\n/**\r\n * @typedef {EventTarget|Target} EventTargetLike\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\r\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\r\n *\r\n * There are two important simplifications compared to the specification:\r\n *\r\n * 1. The handling of `useCapture` in `addEventListener` and\r\n *    `removeEventListener`. There is no real capture model.\r\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\r\n *    There is no event target hierarchy. When a listener calls\r\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\r\n *    more listeners after this one will be called. Same as when the listener\r\n *    returns false.\r\n */\r\nclass Target extends Disposable {\r\n  /**\r\n   * @param {*} [target] Default event target for dispatched events.\r\n   */\r\n  constructor(target) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {*}\r\n     */\r\n    this.eventTarget_ = target;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, number>|null}\r\n     */\r\n    this.pendingRemovals_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, number>|null}\r\n     */\r\n    this.dispatching_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>|null}\r\n     */\r\n    this.listeners_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */\r\n  addEventListener(type, listener) {\r\n    if (!type || !listener) {\r\n      return;\r\n    }\r\n    const listeners = this.listeners_ || (this.listeners_ = {});\r\n    const listenersForType = listeners[type] || (listeners[type] = []);\r\n    if (!listenersForType.includes(listener)) {\r\n      listenersForType.push(listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatches an event and calls all listeners listening for events\r\n   * of this type. The event parameter can either be a string or an\r\n   * Object with a `type` property.\r\n   *\r\n   * @param {import(\"./Event.js\").default|string} event Event object.\r\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\r\n   *     event object or if any of the listeners returned false.\r\n   * @api\r\n   */\r\n  dispatchEvent(event) {\r\n    const isString = typeof event === 'string';\r\n    const type = isString ? event : event.type;\r\n    const listeners = this.listeners_ && this.listeners_[type];\r\n    if (!listeners) {\r\n      return;\r\n    }\r\n\r\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\r\n    if (!evt.target) {\r\n      evt.target = this.eventTarget_ || this;\r\n    }\r\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\r\n    const pendingRemovals =\r\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\r\n    if (!(type in dispatching)) {\r\n      dispatching[type] = 0;\r\n      pendingRemovals[type] = 0;\r\n    }\r\n    ++dispatching[type];\r\n    let propagate;\r\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\r\n      if ('handleEvent' in listeners[i]) {\r\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\r\n          listeners[i]\r\n        ).handleEvent(evt);\r\n      } else {\r\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\r\n          listeners[i]\r\n        ).call(this, evt);\r\n      }\r\n      if (propagate === false || evt.propagationStopped) {\r\n        propagate = false;\r\n        break;\r\n      }\r\n    }\r\n    if (--dispatching[type] === 0) {\r\n      let pr = pendingRemovals[type];\r\n      delete pendingRemovals[type];\r\n      while (pr--) {\r\n        this.removeEventListener(type, VOID);\r\n      }\r\n      delete dispatching[type];\r\n    }\r\n    return propagate;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.listeners_ && clear(this.listeners_);\r\n  }\r\n\r\n  /**\r\n   * Get the listeners for a specified event type. Listeners are returned in the\r\n   * order that they will be called in.\r\n   *\r\n   * @param {string} type Type.\r\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\r\n   */\r\n  getListeners(type) {\r\n    return (this.listeners_ && this.listeners_[type]) || undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {string} [type] Type. If not provided,\r\n   *     `true` will be returned if this event target has any listeners.\r\n   * @return {boolean} Has listeners.\r\n   */\r\n  hasListener(type) {\r\n    if (!this.listeners_) {\r\n      return false;\r\n    }\r\n    return type\r\n      ? type in this.listeners_\r\n      : Object.keys(this.listeners_).length > 0;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */\r\n  removeEventListener(type, listener) {\r\n    if (!this.listeners_) {\r\n      return;\r\n    }\r\n    const listeners = this.listeners_[type];\r\n    if (!listeners) {\r\n      return;\r\n    }\r\n    const index = listeners.indexOf(listener);\r\n    if (index !== -1) {\r\n      if (this.pendingRemovals_ && type in this.pendingRemovals_) {\r\n        // make listener a no-op, and remove later in #dispatchEvent()\r\n        listeners[index] = VOID;\r\n        ++this.pendingRemovals_[type];\r\n      } else {\r\n        listeners.splice(index, 1);\r\n        if (listeners.length === 0) {\r\n          delete this.listeners_[type];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Target;\r\n", "/**\r\n * @module ol/events/EventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @const\r\n */\r\nexport default {\r\n  /**\r\n   * Generic change event. Triggered when the revision counter is increased.\r\n   * @event module:ol/events/Event~BaseEvent#change\r\n   * @api\r\n   */\r\n  CHANGE: 'change',\r\n\r\n  /**\r\n   * Generic error event. Triggered when an error occurs.\r\n   * @event module:ol/events/Event~BaseEvent#error\r\n   * @api\r\n   */\r\n  ERROR: 'error',\r\n\r\n  BLUR: 'blur',\r\n  CLEAR: 'clear',\r\n  CONTEXTMENU: 'contextmenu',\r\n  CLICK: 'click',\r\n  DBLCLICK: 'dblclick',\r\n  DRAGENTER: 'dragenter',\r\n  DRAGOVER: 'dragover',\r\n  DROP: 'drop',\r\n  FOCUS: 'focus',\r\n  KEYDOWN: 'keydown',\r\n  KEYPRESS: 'keypress',\r\n  LOAD: 'load',\r\n  RESIZE: 'resize',\r\n  TOUCHMOVE: 'touchmove',\r\n  WHEEL: 'wheel',\r\n};\r\n", "/**\r\n * @module ol/events\r\n */\r\nimport {clear} from './obj.js';\r\n\r\n/**\r\n * Key to use with {@link module:ol/Observable.unByKey}.\r\n * @typedef {Object} EventsKey\r\n * @property {ListenerFunction} listener Listener.\r\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\r\n * @property {string} type Type.\r\n * @api\r\n */\r\n\r\n/**\r\n * Listener function. This function is called with an event object as argument.\r\n * When the function returns `false`, event propagation will stop.\r\n *\r\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} ListenerObject\r\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\r\n */\r\n\r\n/**\r\n * @typedef {ListenerFunction|ListenerObject} Listener\r\n */\r\n\r\n/**\r\n * Registers an event listener on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * This function efficiently binds a `listener` to a `this` object, and returns\r\n * a key for use with {@link module:ol/events.unlistenByKey}.\r\n *\r\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\r\n * @param {string} type Event type.\r\n * @param {ListenerFunction} listener Listener.\r\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\r\n *     listener. Default is the `target`.\r\n * @param {boolean} [once] If true, add the listener as one-off listener.\r\n * @return {EventsKey} Unique key for the listener.\r\n */\r\nexport function listen(target, type, listener, thisArg, once) {\r\n  if (thisArg && thisArg !== target) {\r\n    listener = listener.bind(thisArg);\r\n  }\r\n  if (once) {\r\n    const originalListener = listener;\r\n    listener = function () {\r\n      target.removeEventListener(type, listener);\r\n      originalListener.apply(this, arguments);\r\n    };\r\n  }\r\n  const eventsKey = {\r\n    target: target,\r\n    type: type,\r\n    listener: listener,\r\n  };\r\n  target.addEventListener(type, listener);\r\n  return eventsKey;\r\n}\r\n\r\n/**\r\n * Registers a one-off event listener on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * This function efficiently binds a `listener` as self-unregistering listener\r\n * to a `this` object, and returns a key for use with\r\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\r\n * unregistered before it is called.\r\n *\r\n * When {@link module:ol/events.listen} is called with the same arguments after this\r\n * function, the self-unregistering listener will be turned into a permanent\r\n * listener.\r\n *\r\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\r\n * @param {string} type Event type.\r\n * @param {ListenerFunction} listener Listener.\r\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\r\n *     listener. Default is the `target`.\r\n * @return {EventsKey} Key for unlistenByKey.\r\n */\r\nexport function listenOnce(target, type, listener, thisArg) {\r\n  return listen(target, type, listener, thisArg, true);\r\n}\r\n\r\n/**\r\n * Unregisters event listeners on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * The argument passed to this function is the key returned from\r\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\r\n *\r\n * @param {EventsKey} key The key.\r\n */\r\nexport function unlistenByKey(key) {\r\n  if (key && key.target) {\r\n    key.target.removeEventListener(key.type, key.listener);\r\n    clear(key);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/Observable\r\n */\r\nimport EventTarget from './events/Target.js';\r\nimport EventType from './events/EventType.js';\r\nimport {listen, listenOnce, unlistenByKey} from './events.js';\r\n\r\n/***\r\n * @template {string} Type\r\n * @template {Event|import(\"./events/Event.js\").default} EventClass\r\n * @template Return\r\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\r\n */\r\n\r\n/***\r\n * @template {string} Type\r\n * @template Return\r\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {'change'|'error'} EventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * An event target providing convenient methods for listener registration\r\n * and unregistration. A generic `change` event is always available through\r\n * {@link module:ol/Observable~Observable#changed}.\r\n *\r\n * @fires import(\"./events/Event.js\").default\r\n * @api\r\n */\r\nclass Observable extends EventTarget {\r\n  constructor() {\r\n    super();\r\n\r\n    this.on =\r\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\r\n        this.onInternal\r\n      );\r\n\r\n    this.once =\r\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\r\n        this.onceInternal\r\n      );\r\n\r\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.revision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Increases the revision counter and dispatches a 'change' event.\r\n   * @api\r\n   */\r\n  changed() {\r\n    ++this.revision_;\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * Get the version number for this object.  Each time the object is modified,\r\n   * its version number will be incremented.\r\n   * @return {number} Revision.\r\n   * @api\r\n   */\r\n  getRevision() {\r\n    return this.revision_;\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */\r\n  onInternal(type, listener) {\r\n    if (Array.isArray(type)) {\r\n      const len = type.length;\r\n      const keys = new Array(len);\r\n      for (let i = 0; i < len; ++i) {\r\n        keys[i] = listen(this, type[i], listener);\r\n      }\r\n      return keys;\r\n    }\r\n    return listen(this, /** @type {string} */ (type), listener);\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */\r\n  onceInternal(type, listener) {\r\n    let key;\r\n    if (Array.isArray(type)) {\r\n      const len = type.length;\r\n      key = new Array(len);\r\n      for (let i = 0; i < len; ++i) {\r\n        key[i] = listenOnce(this, type[i], listener);\r\n      }\r\n    } else {\r\n      key = listenOnce(this, /** @type {string} */ (type), listener);\r\n    }\r\n    /** @type {Object} */ (listener).ol_key = key;\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * Unlisten for a certain type of event.\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @protected\r\n   */\r\n  unInternal(type, listener) {\r\n    const key = /** @type {Object} */ (listener).ol_key;\r\n    if (key) {\r\n      unByKey(key);\r\n    } else if (Array.isArray(type)) {\r\n      for (let i = 0, ii = type.length; i < ii; ++i) {\r\n        this.removeEventListener(type[i], listener);\r\n      }\r\n    } else {\r\n      this.removeEventListener(type, listener);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Listen for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */\r\nObservable.prototype.on;\r\n\r\n/**\r\n * Listen once for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */\r\nObservable.prototype.once;\r\n\r\n/**\r\n * Unlisten for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @api\r\n */\r\nObservable.prototype.un;\r\n\r\n/**\r\n * Removes an event listener using the key returned by `on()` or `once()`.\r\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\r\n *     or `once()` (or an array of keys).\r\n * @api\r\n */\r\nexport function unByKey(key) {\r\n  if (Array.isArray(key)) {\r\n    for (let i = 0, ii = key.length; i < ii; ++i) {\r\n      unlistenByKey(key[i]);\r\n    }\r\n  } else {\r\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\r\n  }\r\n}\r\n\r\nexport default Observable;\r\n", "/**\r\n * @module ol/util\r\n */\r\n\r\n/**\r\n * @return {never} Any return.\r\n */\r\nexport function abstract() {\r\n  throw new Error('Unimplemented abstract method.');\r\n}\r\n\r\n/**\r\n * Counter for getUid.\r\n * @type {number}\r\n * @private\r\n */\r\nlet uidCounter_ = 0;\r\n\r\n/**\r\n * Gets a unique ID for an object. This mutates the object so that further calls\r\n * with the same object as a parameter returns the same value. Unique IDs are generated\r\n * as a strictly increasing sequence. Adapted from goog.getUid.\r\n *\r\n * @param {Object} obj The object to get the unique ID for.\r\n * @return {string} The unique ID for the object.\r\n * @api\r\n */\r\nexport function getUid(obj) {\r\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\r\n}\r\n\r\n/**\r\n * OpenLayers version.\r\n * @type {string}\r\n */\r\nexport const VERSION = '8.2.0';\r\n", "/**\r\n * @module ol/Object\r\n */\r\nimport Event from './events/Event.js';\r\nimport ObjectEventType from './ObjectEventType.js';\r\nimport Observable from './Observable.js';\r\nimport {getUid} from './util.js';\r\nimport {isEmpty} from './obj.js';\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\r\n */\r\nexport class ObjectEvent extends Event {\r\n  /**\r\n   * @param {string} type The event type.\r\n   * @param {string} key The property name.\r\n   * @param {*} oldValue The old value for `key`.\r\n   */\r\n  constructor(type, key, oldValue) {\r\n    super(type);\r\n\r\n    /**\r\n     * The name of the property whose value is changing.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.key = key;\r\n\r\n    /**\r\n     * The old value. To get the new value use `e.target.get(e.key)` where\r\n     * `e` is the event object.\r\n     * @type {*}\r\n     * @api\r\n     */\r\n    this.oldValue = oldValue;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Most non-trivial classes inherit from this.\r\n *\r\n * This extends {@link module:ol/Observable~Observable} with observable\r\n * properties, where each property is observable as well as the object as a\r\n * whole.\r\n *\r\n * Classes that inherit from this have pre-defined properties, to which you can\r\n * add your owns. The pre-defined properties are listed in this documentation as\r\n * 'Observable Properties', and have their own accessors; for example,\r\n * {@link module:ol/Map~Map} has a `target` property, accessed with\r\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\r\n * settable. There are also general-purpose accessors `get()` and `set()`. For\r\n * example, `get('target')` is equivalent to `getTarget()`.\r\n *\r\n * The `set` accessors trigger a change event, and you can monitor this by\r\n * registering a listener. For example, {@link module:ol/View~View} has a\r\n * `center` property, so `view.on('change:center', function(evt) {...});` would\r\n * call the function whenever the value of the center property changes. Within\r\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\r\n * would return the new center.\r\n *\r\n * You can add your own observable properties with\r\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\r\n * You can listen for changes on that property value with\r\n * `object.on('change:prop', listener)`. You can get a list of all\r\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\r\n *\r\n * Note that the observable properties are separate from standard JS properties.\r\n * You can, for example, give your map object a title with\r\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\r\n * first will be a `hasOwnProperty`; the second will appear in\r\n * `getProperties()`. Only the second is observable.\r\n *\r\n * Properties can be deleted by using the unset method. E.g.\r\n * object.unset('foo').\r\n *\r\n * @fires ObjectEvent\r\n * @api\r\n */\r\nclass BaseObject extends Observable {\r\n  /**\r\n   * @param {Object<string, *>} [values] An object with key-value pairs.\r\n   */\r\n  constructor(values) {\r\n    super();\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\r\n    // the same as the order in which they were created.  This also helps to\r\n    // ensure that object properties are always added in the same order, which\r\n    // helps many JavaScript engines generate faster code.\r\n    getUid(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, *>|null}\r\n     */\r\n    this.values_ = null;\r\n\r\n    if (values !== undefined) {\r\n      this.setProperties(values);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a value.\r\n   * @param {string} key Key name.\r\n   * @return {*} Value.\r\n   * @api\r\n   */\r\n  get(key) {\r\n    let value;\r\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\r\n      value = this.values_[key];\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Get a list of object property names.\r\n   * @return {Array<string>} List of property names.\r\n   * @api\r\n   */\r\n  getKeys() {\r\n    return (this.values_ && Object.keys(this.values_)) || [];\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object<string, *>} Object.\r\n   * @api\r\n   */\r\n  getProperties() {\r\n    return (this.values_ && Object.assign({}, this.values_)) || {};\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object<string, *>?} Object.\r\n   */\r\n  getPropertiesInternal() {\r\n    return this.values_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The object has properties.\r\n   */\r\n  hasProperties() {\r\n    return !!this.values_;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {*} oldValue Old value.\r\n   */\r\n  notify(key, oldValue) {\r\n    let eventType;\r\n    eventType = `change:${key}`;\r\n    if (this.hasListener(eventType)) {\r\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n    }\r\n    eventType = ObjectEventType.PROPERTYCHANGE;\r\n    if (this.hasListener(eventType)) {\r\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */\r\n  addChangeListener(key, listener) {\r\n    this.addEventListener(`change:${key}`, listener);\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */\r\n  removeChangeListener(key, listener) {\r\n    this.removeEventListener(`change:${key}`, listener);\r\n  }\r\n\r\n  /**\r\n   * Sets a value.\r\n   * @param {string} key Key name.\r\n   * @param {*} value Value.\r\n   * @param {boolean} [silent] Update without triggering an event.\r\n   * @api\r\n   */\r\n  set(key, value, silent) {\r\n    const values = this.values_ || (this.values_ = {});\r\n    if (silent) {\r\n      values[key] = value;\r\n    } else {\r\n      const oldValue = values[key];\r\n      values[key] = value;\r\n      if (oldValue !== value) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a collection of key-value pairs.  Note that this changes any existing\r\n   * properties and adds new ones (it does not remove any existing properties).\r\n   * @param {Object<string, *>} values Values.\r\n   * @param {boolean} [silent] Update without triggering an event.\r\n   * @api\r\n   */\r\n  setProperties(values, silent) {\r\n    for (const key in values) {\r\n      this.set(key, values[key], silent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply any properties from another object without triggering events.\r\n   * @param {BaseObject} source The source object.\r\n   * @protected\r\n   */\r\n  applyProperties(source) {\r\n    if (!source.values_) {\r\n      return;\r\n    }\r\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\r\n  }\r\n\r\n  /**\r\n   * Unsets a property.\r\n   * @param {string} key Key name.\r\n   * @param {boolean} [silent] Unset without triggering an event.\r\n   * @api\r\n   */\r\n  unset(key, silent) {\r\n    if (this.values_ && key in this.values_) {\r\n      const oldValue = this.values_[key];\r\n      delete this.values_[key];\r\n      if (isEmpty(this.values_)) {\r\n        this.values_ = null;\r\n      }\r\n      if (!silent) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseObject;\r\n", "/**\r\n * @module ol/asserts\r\n */\r\n\r\n/**\r\n * @param {*} assertion Assertion we expected to be truthy.\r\n * @param {string} errorMessage Error message.\r\n */\r\nexport function assert(assertion, errorMessage) {\r\n  if (!assertion) {\r\n    throw new Error(errorMessage);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/Feature\r\n */\r\nimport BaseObject from './Object.js';\r\nimport EventType from './events/EventType.js';\r\nimport {assert} from './asserts.js';\r\nimport {listen, unlistenByKey} from './events.js';\r\n\r\n/**\r\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\r\n */\r\n\r\n/**\r\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\r\n *     |'change:geometry', Return>} FeatureOnSignature\r\n */\r\n\r\n/***\r\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\r\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A vector object for geographic features with a geometry and other\r\n * attribute properties, similar to the features in vector file formats like\r\n * GeoJSON.\r\n *\r\n * Features can be styled individually with `setStyle`; otherwise they use the\r\n * style of their vector layer.\r\n *\r\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\r\n * the feature object, so they are observable, and have get/set accessors.\r\n *\r\n * Typically, a feature has a single geometry property. You can set the\r\n * geometry using the `setGeometry` method and get it with `getGeometry`.\r\n * It is possible to store more than one geometry on a feature using attribute\r\n * properties. By default, the geometry used for rendering is identified by\r\n * the property name `geometry`. If you want to use another geometry property\r\n * for rendering, use the `setGeometryName` method to change the attribute\r\n * property associated with the geometry for the feature.  For example:\r\n *\r\n * ```js\r\n *\r\n * import Feature from 'ol/Feature.js';\r\n * import Polygon from 'ol/geom/Polygon.js';\r\n * import Point from 'ol/geom/Point.js';\r\n *\r\n * const feature = new Feature({\r\n *   geometry: new Polygon(polyCoords),\r\n *   labelPoint: new Point(labelCoords),\r\n *   name: 'My Polygon',\r\n * });\r\n *\r\n * // get the polygon geometry\r\n * const poly = feature.getGeometry();\r\n *\r\n * // Render the feature as a point using the coordinates from labelPoint\r\n * feature.setGeometryName('labelPoint');\r\n *\r\n * // get the point geometry\r\n * const point = feature.getGeometry();\r\n * ```\r\n *\r\n * @api\r\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\r\n */\r\nclass Feature extends BaseObject {\r\n  /**\r\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]\r\n   *     You may pass a Geometry object directly, or an object literal containing\r\n   *     properties. If you pass an object literal, you may include a Geometry\r\n   *     associated with a `geometry` key.\r\n   */\r\n  constructor(geometryOrProperties) {\r\n    super();\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id_ = undefined;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.geometryName_ = 'geometry';\r\n\r\n    /**\r\n     * User provided style.\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleLike}\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.geometryChangeKey_ = null;\r\n\r\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n\r\n    if (geometryOrProperties) {\r\n      if (\r\n        typeof (\r\n          /** @type {?} */ (geometryOrProperties).getSimplifiedGeometry\r\n        ) === 'function'\r\n      ) {\r\n        const geometry = /** @type {Geometry} */ (geometryOrProperties);\r\n        this.setGeometry(geometry);\r\n      } else {\r\n        /** @type {Object<string, *>} */\r\n        const properties = geometryOrProperties;\r\n        this.setProperties(properties);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this feature. If the original feature has a geometry it\r\n   * is also cloned. The feature id is not set in the clone.\r\n   * @return {Feature<Geometry>} The clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const clone = /** @type {Feature<Geometry>} */ (\r\n      new Feature(this.hasProperties() ? this.getProperties() : null)\r\n    );\r\n    clone.setGeometryName(this.getGeometryName());\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));\r\n    }\r\n    const style = this.getStyle();\r\n    if (style) {\r\n      clone.setStyle(style);\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's default geometry.  A feature may have any number of named\r\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\r\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\r\n   * @return {Geometry|undefined} The default geometry for the feature.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getGeometry() {\r\n    return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));\r\n  }\r\n\r\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is either set when reading data from a remote source or set explicitly by\r\n   * calling {@link module:ol/Feature~Feature#setId}.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id_;\r\n  }\r\n\r\n  /**\r\n   * Get the name of the feature's default geometry.  By default, the default\r\n   * geometry is named `geometry`.\r\n   * @return {string} Get the property name associated with the default geometry\r\n   *     for this feature.\r\n   * @api\r\n   */\r\n  getGeometryName() {\r\n    return this.geometryName_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style. Will return what was provided to the\r\n   * {@link module:ol/Feature~Feature#setStyle} method.\r\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style function.\r\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\r\n   * representing the current style of this feature.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChange_() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChanged_() {\r\n    if (this.geometryChangeKey_) {\r\n      unlistenByKey(this.geometryChangeKey_);\r\n      this.geometryChangeKey_ = null;\r\n    }\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      this.geometryChangeKey_ = listen(\r\n        geometry,\r\n        EventType.CHANGE,\r\n        this.handleGeometryChange_,\r\n        this\r\n      );\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the default geometry for the feature.  This will update the property\r\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\r\n   * @param {Geometry|undefined} geometry The new geometry.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setGeometry(geometry) {\r\n    this.set(this.geometryName_, geometry);\r\n  }\r\n\r\n  /**\r\n   * Set the style for the feature to override the layer style.  This can be a\r\n   * single style object, an array of styles, or a function that takes a\r\n   * resolution and returns an array of styles. To unset the feature style, call\r\n   * `setStyle()` without arguments or a falsey value.\r\n   * @param {import(\"./style/Style.js\").StyleLike} [style] Style for this feature.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */\r\n  setStyle(style) {\r\n    this.style_ = style;\r\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the feature id.  The feature id is considered stable and may be used when\r\n   * requesting features or comparing identifiers returned from a remote source.\r\n   * The feature id can be used with the\r\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\r\n   * @param {number|string|undefined} id The feature id.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */\r\n  setId(id) {\r\n    this.id_ = id;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the property name to be used when getting the feature's default geometry.\r\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\r\n   * this name will be returned.\r\n   * @param {string} name The property name of the default geometry.\r\n   * @api\r\n   */\r\n  setGeometryName(name) {\r\n    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n    this.geometryName_ = name;\r\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n    this.handleGeometryChanged_();\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a feature style function.  Functions passed\r\n * through unchanged.  Arrays of Style or single style objects wrapped\r\n * in a new feature style function.\r\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\r\n *     A feature style function, a single style, or an array of styles.\r\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\r\n */\r\nexport function createStyleFunction(obj) {\r\n  if (typeof obj === 'function') {\r\n    return obj;\r\n  }\r\n  /**\r\n   * @type {Array<import(\"./style/Style.js\").default>}\r\n   */\r\n  let styles;\r\n  if (Array.isArray(obj)) {\r\n    styles = obj;\r\n  } else {\r\n    assert(\r\n      typeof (/** @type {?} */ (obj).getZIndex) === 'function',\r\n      'Expected an `ol/style/Style` or an array of `ol/style/Style.js`'\r\n    );\r\n    const style = /** @type {import(\"./style/Style.js\").default} */ (obj);\r\n    styles = [style];\r\n  }\r\n  return function () {\r\n    return styles;\r\n  };\r\n}\r\nexport default Feature;\r\n", "/**\r\n * @module ol/geom\r\n */\r\n\r\nexport {default as Circle} from './geom/Circle.js';\r\nexport {default as Geometry} from './geom/Geometry.js';\r\nexport {default as GeometryCollection} from './geom/GeometryCollection.js';\r\nexport {default as LinearRing} from './geom/LinearRing.js';\r\nexport {default as LineString} from './geom/LineString.js';\r\nexport {default as MultiLineString} from './geom/MultiLineString.js';\r\nexport {default as MultiPoint} from './geom/MultiPoint.js';\r\nexport {default as MultiPolygon} from './geom/MultiPolygon.js';\r\nexport {default as Point} from './geom/Point.js';\r\nexport {default as Polygon} from './geom/Polygon.js';\r\nexport {default as SimpleGeometry} from './geom/SimpleGeometry.js';\r\n", "/**\r\n * @module ol/has\r\n */\r\n\r\nconst ua =\r\n  typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'\r\n    ? navigator.userAgent.toLowerCase()\r\n    : '';\r\n\r\n/**\r\n * User agent string says we are dealing with Firefox as browser.\r\n * @type {boolean}\r\n */\r\nexport const FIREFOX = ua.includes('firefox');\r\n\r\n/**\r\n * User agent string says we are dealing with Safari as browser.\r\n * @type {boolean}\r\n */\r\nexport const SAFARI = ua.includes('safari') && !ua.includes('chrom');\r\n\r\n/**\r\n * https://bugs.webkit.org/show_bug.cgi?id=237906\r\n * @type {boolean}\r\n */\r\nexport const SAFARI_BUG_237906 =\r\n  SAFARI &&\r\n  (ua.includes('version/15.4') ||\r\n    /cpu (os|iphone os) 15_4 like mac os x/.test(ua));\r\n\r\n/**\r\n * User agent string says we are dealing with a WebKit engine.\r\n * @type {boolean}\r\n */\r\nexport const WEBKIT = ua.includes('webkit') && !ua.includes('edge');\r\n\r\n/**\r\n * User agent string says we are dealing with a Mac as platform.\r\n * @type {boolean}\r\n */\r\nexport const MAC = ua.includes('macintosh');\r\n\r\n/**\r\n * The ratio between physical pixels and device-independent pixels\r\n * (dips) on the device (`window.devicePixelRatio`).\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const DEVICE_PIXEL_RATIO =\r\n  typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\r\n\r\n/**\r\n * The execution context is a worker with OffscreenCanvas available.\r\n * @const\r\n * @type {boolean}\r\n */\r\nexport const WORKER_OFFSCREEN_CANVAS =\r\n  typeof WorkerGlobalScope !== 'undefined' &&\r\n  typeof OffscreenCanvas !== 'undefined' &&\r\n  self instanceof WorkerGlobalScope; //eslint-disable-line\r\n\r\n/**\r\n * Image.prototype.decode() is supported.\r\n * @type {boolean}\r\n */\r\nexport const IMAGE_DECODE =\r\n  typeof Image !== 'undefined' && Image.prototype.decode;\r\n\r\n/**\r\n * createImageBitmap() is supported.\r\n * @type {boolean}\r\n */\r\nexport const CREATE_IMAGE_BITMAP = typeof createImageBitmap === 'function';\r\n\r\n/**\r\n * @type {boolean}\r\n */\r\nexport const PASSIVE_EVENT_LISTENERS = (function () {\r\n  let passive = false;\r\n  try {\r\n    const options = Object.defineProperty({}, 'passive', {\r\n      get: function () {\r\n        passive = true;\r\n      },\r\n    });\r\n\r\n    // @ts-ignore Ignore invalid event type '_'\r\n    window.addEventListener('_', null, options);\r\n    // @ts-ignore Ignore invalid event type '_'\r\n    window.removeEventListener('_', null, options);\r\n  } catch (error) {\r\n    // passive not supported\r\n  }\r\n  return passive;\r\n})();\r\n", "/**\r\n * @module ol/transform\r\n */\r\nimport {WORKER_OFFSCREEN_CANVAS} from './has.js';\r\nimport {assert} from './asserts.js';\r\n\r\n/**\r\n * An array representing an affine 2d transformation for use with\r\n * {@link module:ol/transform} functions. The array has 6 elements.\r\n * @typedef {!Array<number>} Transform\r\n * @api\r\n */\r\n\r\n/**\r\n * Collection of affine 2d transformation functions. The functions work on an\r\n * array of 6 elements. The element order is compatible with the [SVGMatrix\r\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\r\n * a subset (elements a to f) of a 3×3 matrix:\r\n * ```\r\n * [ a c e ]\r\n * [ b d f ]\r\n * [ 0 0 1 ]\r\n * ```\r\n */\r\n\r\n/**\r\n * @private\r\n * @type {Transform}\r\n */\r\nconst tmp_ = new Array(6);\r\n\r\n/**\r\n * Create an identity transform.\r\n * @return {!Transform} Identity transform.\r\n */\r\nexport function create() {\r\n  return [1, 0, 0, 1, 0, 0];\r\n}\r\n\r\n/**\r\n * Resets the given transform to an identity transform.\r\n * @param {!Transform} transform Transform.\r\n * @return {!Transform} Transform.\r\n */\r\nexport function reset(transform) {\r\n  return set(transform, 1, 0, 0, 1, 0, 0);\r\n}\r\n\r\n/**\r\n * Multiply the underlying matrices of two transforms and return the result in\r\n * the first transform.\r\n * @param {!Transform} transform1 Transform parameters of matrix 1.\r\n * @param {!Transform} transform2 Transform parameters of matrix 2.\r\n * @return {!Transform} transform1 multiplied with transform2.\r\n */\r\nexport function multiply(transform1, transform2) {\r\n  const a1 = transform1[0];\r\n  const b1 = transform1[1];\r\n  const c1 = transform1[2];\r\n  const d1 = transform1[3];\r\n  const e1 = transform1[4];\r\n  const f1 = transform1[5];\r\n  const a2 = transform2[0];\r\n  const b2 = transform2[1];\r\n  const c2 = transform2[2];\r\n  const d2 = transform2[3];\r\n  const e2 = transform2[4];\r\n  const f2 = transform2[5];\r\n\r\n  transform1[0] = a1 * a2 + c1 * b2;\r\n  transform1[1] = b1 * a2 + d1 * b2;\r\n  transform1[2] = a1 * c2 + c1 * d2;\r\n  transform1[3] = b1 * c2 + d1 * d2;\r\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\r\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\r\n\r\n  return transform1;\r\n}\r\n\r\n/**\r\n * Set the transform components a-f on a given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} a The a component of the transform.\r\n * @param {number} b The b component of the transform.\r\n * @param {number} c The c component of the transform.\r\n * @param {number} d The d component of the transform.\r\n * @param {number} e The e component of the transform.\r\n * @param {number} f The f component of the transform.\r\n * @return {!Transform} Matrix with transform applied.\r\n */\r\nexport function set(transform, a, b, c, d, e, f) {\r\n  transform[0] = a;\r\n  transform[1] = b;\r\n  transform[2] = c;\r\n  transform[3] = d;\r\n  transform[4] = e;\r\n  transform[5] = f;\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Set transform on one matrix from another matrix.\r\n * @param {!Transform} transform1 Matrix to set transform to.\r\n * @param {!Transform} transform2 Matrix to set transform from.\r\n * @return {!Transform} transform1 with transform from transform2 applied.\r\n */\r\nexport function setFromArray(transform1, transform2) {\r\n  transform1[0] = transform2[0];\r\n  transform1[1] = transform2[1];\r\n  transform1[2] = transform2[2];\r\n  transform1[3] = transform2[3];\r\n  transform1[4] = transform2[4];\r\n  transform1[5] = transform2[5];\r\n  return transform1;\r\n}\r\n\r\n/**\r\n * Transforms the given coordinate with the given transform returning the\r\n * resulting, transformed coordinate. The coordinate will be modified in-place.\r\n *\r\n * @param {Transform} transform The transformation.\r\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\r\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\r\n *     chained together.\r\n */\r\nexport function apply(transform, coordinate) {\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\r\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * Applies rotation to the given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} angle Angle in radians.\r\n * @return {!Transform} The rotated transform.\r\n */\r\nexport function rotate(transform, angle) {\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\r\n}\r\n\r\n/**\r\n * Applies scale to a given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} x Scale factor x.\r\n * @param {number} y Scale factor y.\r\n * @return {!Transform} The scaled transform.\r\n */\r\nexport function scale(transform, x, y) {\r\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\r\n}\r\n\r\n/**\r\n * Creates a scale transform.\r\n * @param {!Transform} target Transform to overwrite.\r\n * @param {number} x Scale factor x.\r\n * @param {number} y Scale factor y.\r\n * @return {!Transform} The scale transform.\r\n */\r\nexport function makeScale(target, x, y) {\r\n  return set(target, x, 0, 0, y, 0, 0);\r\n}\r\n\r\n/**\r\n * Applies translation to the given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} dx Translation x.\r\n * @param {number} dy Translation y.\r\n * @return {!Transform} The translated transform.\r\n */\r\nexport function translate(transform, dx, dy) {\r\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\r\n}\r\n\r\n/**\r\n * Creates a composite transform given an initial translation, scale, rotation, and\r\n * final translation (in that order only, not commutative).\r\n * @param {!Transform} transform The transform (will be modified in place).\r\n * @param {number} dx1 Initial translation x.\r\n * @param {number} dy1 Initial translation y.\r\n * @param {number} sx Scale factor x.\r\n * @param {number} sy Scale factor y.\r\n * @param {number} angle Rotation (in counter-clockwise radians).\r\n * @param {number} dx2 Final translation x.\r\n * @param {number} dy2 Final translation y.\r\n * @return {!Transform} The composite transform.\r\n */\r\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\r\n  const sin = Math.sin(angle);\r\n  const cos = Math.cos(angle);\r\n  transform[0] = sx * cos;\r\n  transform[1] = sy * sin;\r\n  transform[2] = -sx * sin;\r\n  transform[3] = sy * cos;\r\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\r\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Creates a composite transform given an initial translation, scale, rotation, and\r\n * final translation (in that order only, not commutative). The resulting transform\r\n * string can be applied as `transform` property of an HTMLElement's style.\r\n * @param {number} dx1 Initial translation x.\r\n * @param {number} dy1 Initial translation y.\r\n * @param {number} sx Scale factor x.\r\n * @param {number} sy Scale factor y.\r\n * @param {number} angle Rotation (in counter-clockwise radians).\r\n * @param {number} dx2 Final translation x.\r\n * @param {number} dy2 Final translation y.\r\n * @return {string} The composite css transform.\r\n * @api\r\n */\r\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\r\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\r\n}\r\n\r\n/**\r\n * Invert the given transform.\r\n * @param {!Transform} source The source transform to invert.\r\n * @return {!Transform} The inverted (source) transform.\r\n */\r\nexport function invert(source) {\r\n  return makeInverse(source, source);\r\n}\r\n\r\n/**\r\n * Invert the given transform.\r\n * @param {!Transform} target Transform to be set as the inverse of\r\n *     the source transform.\r\n * @param {!Transform} source The source transform to invert.\r\n * @return {!Transform} The inverted (target) transform.\r\n */\r\nexport function makeInverse(target, source) {\r\n  const det = determinant(source);\r\n  assert(det !== 0, 'Transformation matrix cannot be inverted');\r\n\r\n  const a = source[0];\r\n  const b = source[1];\r\n  const c = source[2];\r\n  const d = source[3];\r\n  const e = source[4];\r\n  const f = source[5];\r\n\r\n  target[0] = d / det;\r\n  target[1] = -b / det;\r\n  target[2] = -c / det;\r\n  target[3] = a / det;\r\n  target[4] = (c * f - d * e) / det;\r\n  target[5] = -(a * f - b * e) / det;\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Returns the determinant of the given matrix.\r\n * @param {!Transform} mat Matrix.\r\n * @return {number} Determinant.\r\n */\r\nexport function determinant(mat) {\r\n  return mat[0] * mat[3] - mat[1] * mat[2];\r\n}\r\n\r\n/**\r\n * @type {HTMLElement}\r\n * @private\r\n */\r\nlet transformStringDiv;\r\n\r\n/**\r\n * A rounded string version of the transform.  This can be used\r\n * for CSS transforms.\r\n * @param {!Transform} mat Matrix.\r\n * @return {string} The transform as a string.\r\n */\r\nexport function toString(mat) {\r\n  const transformString = 'matrix(' + mat.join(', ') + ')';\r\n  if (WORKER_OFFSCREEN_CANVAS) {\r\n    return transformString;\r\n  }\r\n  const node =\r\n    transformStringDiv || (transformStringDiv = document.createElement('div'));\r\n  node.style.transform = transformString;\r\n  return node.style.transform;\r\n}\r\n", "/**\r\n * @module ol/extent\r\n */\r\nimport Relationship from './extent/Relationship.js';\r\n\r\n/**\r\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\r\n * @typedef {Array<number>} Extent\r\n * @api\r\n */\r\n\r\n/**\r\n * Extent corner.\r\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\r\n */\r\n\r\n/**\r\n * Build an extent that includes all given coordinates.\r\n *\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @return {Extent} Bounding extent.\r\n * @api\r\n */\r\nexport function boundingExtent(coordinates) {\r\n  const extent = createEmpty();\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} xs Xs.\r\n * @param {Array<number>} ys Ys.\r\n * @param {Extent} [dest] Destination extent.\r\n * @private\r\n * @return {Extent} Extent.\r\n */\r\nfunction _boundingExtentXYs(xs, ys, dest) {\r\n  const minX = Math.min.apply(null, xs);\r\n  const minY = Math.min.apply(null, ys);\r\n  const maxX = Math.max.apply(null, xs);\r\n  const maxY = Math.max.apply(null, ys);\r\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\r\n}\r\n\r\n/**\r\n * Return extent increased by the provided value.\r\n * @param {Extent} extent Extent.\r\n * @param {number} value The amount by which the extent should be buffered.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n * @api\r\n */\r\nexport function buffer(extent, value, dest) {\r\n  if (dest) {\r\n    dest[0] = extent[0] - value;\r\n    dest[1] = extent[1] - value;\r\n    dest[2] = extent[2] + value;\r\n    dest[3] = extent[3] + value;\r\n    return dest;\r\n  }\r\n  return [\r\n    extent[0] - value,\r\n    extent[1] - value,\r\n    extent[2] + value,\r\n    extent[3] + value,\r\n  ];\r\n}\r\n\r\n/**\r\n * Creates a clone of an extent.\r\n *\r\n * @param {Extent} extent Extent to clone.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} The clone.\r\n */\r\nexport function clone(extent, dest) {\r\n  if (dest) {\r\n    dest[0] = extent[0];\r\n    dest[1] = extent[1];\r\n    dest[2] = extent[2];\r\n    dest[3] = extent[3];\r\n    return dest;\r\n  }\r\n  return extent.slice();\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {number} Closest squared distance.\r\n */\r\nexport function closestSquaredDistanceXY(extent, x, y) {\r\n  let dx, dy;\r\n  if (x < extent[0]) {\r\n    dx = extent[0] - x;\r\n  } else if (extent[2] < x) {\r\n    dx = x - extent[2];\r\n  } else {\r\n    dx = 0;\r\n  }\r\n  if (y < extent[1]) {\r\n    dy = extent[1] - y;\r\n  } else if (extent[3] < y) {\r\n    dy = y - extent[3];\r\n  } else {\r\n    dy = 0;\r\n  }\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @return {boolean} The coordinate is contained in the extent.\r\n * @api\r\n */\r\nexport function containsCoordinate(extent, coordinate) {\r\n  return containsXY(extent, coordinate[0], coordinate[1]);\r\n}\r\n\r\n/**\r\n * Check if one extent contains another.\r\n *\r\n * An extent is deemed contained if it lies completely within the other extent,\r\n * including if they share one or more edges.\r\n *\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {boolean} The second extent is contained by or on the edge of the\r\n *     first.\r\n * @api\r\n */\r\nexport function containsExtent(extent1, extent2) {\r\n  return (\r\n    extent1[0] <= extent2[0] &&\r\n    extent2[2] <= extent1[2] &&\r\n    extent1[1] <= extent2[1] &&\r\n    extent2[3] <= extent1[3]\r\n  );\r\n}\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X coordinate.\r\n * @param {number} y Y coordinate.\r\n * @return {boolean} The x, y values are contained in the extent.\r\n * @api\r\n */\r\nexport function containsXY(extent, x, y) {\r\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\r\n}\r\n\r\n/**\r\n * Get the relationship between a coordinate and extent.\r\n * @param {Extent} extent The extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\r\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\r\n *     import(\"./extent/Relationship.js\").Relationship).\r\n */\r\nexport function coordinateRelationship(extent, coordinate) {\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  let relationship = Relationship.UNKNOWN;\r\n  if (x < minX) {\r\n    relationship = relationship | Relationship.LEFT;\r\n  } else if (x > maxX) {\r\n    relationship = relationship | Relationship.RIGHT;\r\n  }\r\n  if (y < minY) {\r\n    relationship = relationship | Relationship.BELOW;\r\n  } else if (y > maxY) {\r\n    relationship = relationship | Relationship.ABOVE;\r\n  }\r\n  if (relationship === Relationship.UNKNOWN) {\r\n    relationship = Relationship.INTERSECTING;\r\n  }\r\n  return relationship;\r\n}\r\n\r\n/**\r\n * Create an empty extent.\r\n * @return {Extent} Empty extent.\r\n * @api\r\n */\r\nexport function createEmpty() {\r\n  return [Infinity, Infinity, -Infinity, -Infinity];\r\n}\r\n\r\n/**\r\n * Create a new extent or update the provided extent.\r\n * @param {number} minX Minimum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} maxY Maximum Y.\r\n * @param {Extent} [dest] Destination extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\r\n  if (dest) {\r\n    dest[0] = minX;\r\n    dest[1] = minY;\r\n    dest[2] = maxX;\r\n    dest[3] = maxY;\r\n    return dest;\r\n  }\r\n  return [minX, minY, maxX, maxY];\r\n}\r\n\r\n/**\r\n * Create a new empty extent or make the provided one empty.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateEmpty(dest) {\r\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  return createOrUpdate(x, y, x, y, dest);\r\n}\r\n\r\n/**\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\r\n  const extent = createOrUpdateEmpty(dest);\r\n  return extendCoordinates(extent, coordinates);\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromFlatCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  dest\r\n) {\r\n  const extent = createOrUpdateEmpty(dest);\r\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\r\n}\r\n\r\n/**\r\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromRings(rings, dest) {\r\n  const extent = createOrUpdateEmpty(dest);\r\n  return extendRings(extent, rings);\r\n}\r\n\r\n/**\r\n * Determine if two extents are equivalent.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {boolean} The two extents are equivalent.\r\n * @api\r\n */\r\nexport function equals(extent1, extent2) {\r\n  return (\r\n    extent1[0] == extent2[0] &&\r\n    extent1[2] == extent2[2] &&\r\n    extent1[1] == extent2[1] &&\r\n    extent1[3] == extent2[3]\r\n  );\r\n}\r\n\r\n/**\r\n * Determine if two extents are approximately equivalent.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @param {number} tolerance Tolerance in extent coordinate units.\r\n * @return {boolean} The two extents differ by less than the tolerance.\r\n */\r\nexport function approximatelyEquals(extent1, extent2, tolerance) {\r\n  return (\r\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\r\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\r\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\r\n    Math.abs(extent1[3] - extent2[3]) < tolerance\r\n  );\r\n}\r\n\r\n/**\r\n * Modify an extent to include another extent.\r\n * @param {Extent} extent1 The extent to be modified.\r\n * @param {Extent} extent2 The extent that will be included in the first.\r\n * @return {Extent} A reference to the first (extended) extent.\r\n * @api\r\n */\r\nexport function extend(extent1, extent2) {\r\n  if (extent2[0] < extent1[0]) {\r\n    extent1[0] = extent2[0];\r\n  }\r\n  if (extent2[2] > extent1[2]) {\r\n    extent1[2] = extent2[2];\r\n  }\r\n  if (extent2[1] < extent1[1]) {\r\n    extent1[1] = extent2[1];\r\n  }\r\n  if (extent2[3] > extent1[3]) {\r\n    extent1[3] = extent2[3];\r\n  }\r\n  return extent1;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n */\r\nexport function extendCoordinate(extent, coordinate) {\r\n  if (coordinate[0] < extent[0]) {\r\n    extent[0] = coordinate[0];\r\n  }\r\n  if (coordinate[0] > extent[2]) {\r\n    extent[2] = coordinate[0];\r\n  }\r\n  if (coordinate[1] < extent[1]) {\r\n    extent[1] = coordinate[1];\r\n  }\r\n  if (coordinate[1] > extent[3]) {\r\n    extent[3] = coordinate[1];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendCoordinates(extent, coordinates) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendFlatCoordinates(\r\n  extent,\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride\r\n) {\r\n  for (; offset < end; offset += stride) {\r\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendRings(extent, rings) {\r\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\r\n    extendCoordinates(extent, rings[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n */\r\nexport function extendXY(extent, x, y) {\r\n  extent[0] = Math.min(extent[0], x);\r\n  extent[1] = Math.min(extent[1], y);\r\n  extent[2] = Math.max(extent[2], x);\r\n  extent[3] = Math.max(extent[3], y);\r\n}\r\n\r\n/**\r\n * This function calls `callback` for each corner of the extent. If the\r\n * callback returns a truthy value the function returns that value\r\n * immediately. Otherwise the function returns `false`.\r\n * @param {Extent} extent Extent.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\r\n * @return {S|boolean} Value.\r\n * @template S\r\n */\r\nexport function forEachCorner(extent, callback) {\r\n  let val;\r\n  val = callback(getBottomLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getBottomRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getTopRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getTopLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Get the size of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Area.\r\n * @api\r\n */\r\nexport function getArea(extent) {\r\n  let area = 0;\r\n  if (!isEmpty(extent)) {\r\n    area = getWidth(extent) * getHeight(extent);\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * Get the bottom left coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\r\n * @api\r\n */\r\nexport function getBottomLeft(extent) {\r\n  return [extent[0], extent[1]];\r\n}\r\n\r\n/**\r\n * Get the bottom right coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\r\n * @api\r\n */\r\nexport function getBottomRight(extent) {\r\n  return [extent[2], extent[1]];\r\n}\r\n\r\n/**\r\n * Get the center coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Center.\r\n * @api\r\n */\r\nexport function getCenter(extent) {\r\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\r\n}\r\n\r\n/**\r\n * Get a corner coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @param {Corner} corner Corner.\r\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\r\n */\r\nexport function getCorner(extent, corner) {\r\n  let coordinate;\r\n  if (corner === 'bottom-left') {\r\n    coordinate = getBottomLeft(extent);\r\n  } else if (corner === 'bottom-right') {\r\n    coordinate = getBottomRight(extent);\r\n  } else if (corner === 'top-left') {\r\n    coordinate = getTopLeft(extent);\r\n  } else if (corner === 'top-right') {\r\n    coordinate = getTopRight(extent);\r\n  } else {\r\n    throw new Error('Invalid corner');\r\n  }\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {number} Enlarged area.\r\n */\r\nexport function getEnlargedArea(extent1, extent2) {\r\n  const minX = Math.min(extent1[0], extent2[0]);\r\n  const minY = Math.min(extent1[1], extent2[1]);\r\n  const maxX = Math.max(extent1[2], extent2[2]);\r\n  const maxY = Math.max(extent1[3], extent2[3]);\r\n  return (maxX - minX) * (maxY - minY);\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {import(\"./size.js\").Size} size Size.\r\n * @param {Extent} [dest] Destination extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\r\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\r\n    center,\r\n    resolution,\r\n    rotation,\r\n    size\r\n  );\r\n  return createOrUpdate(\r\n    Math.min(x0, x1, x2, x3),\r\n    Math.min(y0, y1, y2, y3),\r\n    Math.max(x0, x1, x2, x3),\r\n    Math.max(y0, y1, y2, y3),\r\n    dest\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {import(\"./size.js\").Size} size Size.\r\n * @return {Array<number>} Linear ring representing the viewport.\r\n */\r\nexport function getRotatedViewport(center, resolution, rotation, size) {\r\n  const dx = (resolution * size[0]) / 2;\r\n  const dy = (resolution * size[1]) / 2;\r\n  const cosRotation = Math.cos(rotation);\r\n  const sinRotation = Math.sin(rotation);\r\n  const xCos = dx * cosRotation;\r\n  const xSin = dx * sinRotation;\r\n  const yCos = dy * cosRotation;\r\n  const ySin = dy * sinRotation;\r\n  const x = center[0];\r\n  const y = center[1];\r\n  return [\r\n    x - xCos + ySin,\r\n    y - xSin - yCos,\r\n    x - xCos - ySin,\r\n    y - xSin + yCos,\r\n    x + xCos - ySin,\r\n    y + xSin + yCos,\r\n    x + xCos + ySin,\r\n    y + xSin - yCos,\r\n    x - xCos + ySin,\r\n    y - xSin - yCos,\r\n  ];\r\n}\r\n\r\n/**\r\n * Get the height of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Height.\r\n * @api\r\n */\r\nexport function getHeight(extent) {\r\n  return extent[3] - extent[1];\r\n}\r\n\r\n/**\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {number} Intersection area.\r\n */\r\nexport function getIntersectionArea(extent1, extent2) {\r\n  const intersection = getIntersection(extent1, extent2);\r\n  return getArea(intersection);\r\n}\r\n\r\n/**\r\n * Get the intersection of two extents.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @param {Extent} [dest] Optional extent to populate with intersection.\r\n * @return {Extent} Intersecting extent.\r\n * @api\r\n */\r\nexport function getIntersection(extent1, extent2, dest) {\r\n  const intersection = dest ? dest : createEmpty();\r\n  if (intersects(extent1, extent2)) {\r\n    if (extent1[0] > extent2[0]) {\r\n      intersection[0] = extent1[0];\r\n    } else {\r\n      intersection[0] = extent2[0];\r\n    }\r\n    if (extent1[1] > extent2[1]) {\r\n      intersection[1] = extent1[1];\r\n    } else {\r\n      intersection[1] = extent2[1];\r\n    }\r\n    if (extent1[2] < extent2[2]) {\r\n      intersection[2] = extent1[2];\r\n    } else {\r\n      intersection[2] = extent2[2];\r\n    }\r\n    if (extent1[3] < extent2[3]) {\r\n      intersection[3] = extent1[3];\r\n    } else {\r\n      intersection[3] = extent2[3];\r\n    }\r\n  } else {\r\n    createOrUpdateEmpty(intersection);\r\n  }\r\n  return intersection;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @return {number} Margin.\r\n */\r\nexport function getMargin(extent) {\r\n  return getWidth(extent) + getHeight(extent);\r\n}\r\n\r\n/**\r\n * Get the size (width, height) of an extent.\r\n * @param {Extent} extent The extent.\r\n * @return {import(\"./size.js\").Size} The extent size.\r\n * @api\r\n */\r\nexport function getSize(extent) {\r\n  return [extent[2] - extent[0], extent[3] - extent[1]];\r\n}\r\n\r\n/**\r\n * Get the top left coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\r\n * @api\r\n */\r\nexport function getTopLeft(extent) {\r\n  return [extent[0], extent[3]];\r\n}\r\n\r\n/**\r\n * Get the top right coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\r\n * @api\r\n */\r\nexport function getTopRight(extent) {\r\n  return [extent[2], extent[3]];\r\n}\r\n\r\n/**\r\n * Get the width of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Width.\r\n * @api\r\n */\r\nexport function getWidth(extent) {\r\n  return extent[2] - extent[0];\r\n}\r\n\r\n/**\r\n * Determine if one extent intersects another.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent.\r\n * @return {boolean} The two extents intersect.\r\n * @api\r\n */\r\nexport function intersects(extent1, extent2) {\r\n  return (\r\n    extent1[0] <= extent2[2] &&\r\n    extent1[2] >= extent2[0] &&\r\n    extent1[1] <= extent2[3] &&\r\n    extent1[3] >= extent2[1]\r\n  );\r\n}\r\n\r\n/**\r\n * Determine if an extent is empty.\r\n * @param {Extent} extent Extent.\r\n * @return {boolean} Is empty.\r\n * @api\r\n */\r\nexport function isEmpty(extent) {\r\n  return extent[2] < extent[0] || extent[3] < extent[1];\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function returnOrUpdate(extent, dest) {\r\n  if (dest) {\r\n    dest[0] = extent[0];\r\n    dest[1] = extent[1];\r\n    dest[2] = extent[2];\r\n    dest[3] = extent[3];\r\n    return dest;\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} value Value.\r\n */\r\nexport function scaleFromCenter(extent, value) {\r\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\r\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\r\n  extent[0] -= deltaX;\r\n  extent[2] += deltaX;\r\n  extent[1] -= deltaY;\r\n  extent[3] += deltaY;\r\n}\r\n\r\n/**\r\n * Determine if the segment between two coordinates intersects (crosses,\r\n * touches, or is contained by) the provided extent.\r\n * @param {Extent} extent The extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\r\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\r\n * @return {boolean} The segment intersects the extent.\r\n */\r\nexport function intersectsSegment(extent, start, end) {\r\n  let intersects = false;\r\n  const startRel = coordinateRelationship(extent, start);\r\n  const endRel = coordinateRelationship(extent, end);\r\n  if (\r\n    startRel === Relationship.INTERSECTING ||\r\n    endRel === Relationship.INTERSECTING\r\n  ) {\r\n    intersects = true;\r\n  } else {\r\n    const minX = extent[0];\r\n    const minY = extent[1];\r\n    const maxX = extent[2];\r\n    const maxY = extent[3];\r\n    const startX = start[0];\r\n    const startY = start[1];\r\n    const endX = end[0];\r\n    const endY = end[1];\r\n    const slope = (endY - startY) / (endX - startX);\r\n    let x, y;\r\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\r\n      // potentially intersects top\r\n      x = endX - (endY - maxY) / slope;\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.RIGHT) &&\r\n      !(startRel & Relationship.RIGHT)\r\n    ) {\r\n      // potentially intersects right\r\n      y = endY - (endX - maxX) * slope;\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.BELOW) &&\r\n      !(startRel & Relationship.BELOW)\r\n    ) {\r\n      // potentially intersects bottom\r\n      x = endX - (endY - minY) / slope;\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.LEFT) &&\r\n      !(startRel & Relationship.LEFT)\r\n    ) {\r\n      // potentially intersects left\r\n      y = endY - (endX - minX) * slope;\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n  }\r\n  return intersects;\r\n}\r\n\r\n/**\r\n * Apply a transform function to the extent.\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\r\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\r\n * @param {Extent} [dest] Destination extent.\r\n * @param {number} [stops] Number of stops per side used for the transform.\r\n * By default only the corners are used.\r\n * @return {Extent} Extent.\r\n * @api\r\n */\r\nexport function applyTransform(extent, transformFn, dest, stops) {\r\n  if (isEmpty(extent)) {\r\n    return createOrUpdateEmpty(dest);\r\n  }\r\n  let coordinates = [];\r\n  if (stops > 1) {\r\n    const width = extent[2] - extent[0];\r\n    const height = extent[3] - extent[1];\r\n    for (let i = 0; i < stops; ++i) {\r\n      coordinates.push(\r\n        extent[0] + (width * i) / stops,\r\n        extent[1],\r\n        extent[2],\r\n        extent[1] + (height * i) / stops,\r\n        extent[2] - (width * i) / stops,\r\n        extent[3],\r\n        extent[0],\r\n        extent[3] - (height * i) / stops\r\n      );\r\n    }\r\n  } else {\r\n    coordinates = [\r\n      extent[0],\r\n      extent[1],\r\n      extent[2],\r\n      extent[1],\r\n      extent[2],\r\n      extent[3],\r\n      extent[0],\r\n      extent[3],\r\n    ];\r\n  }\r\n  transformFn(coordinates, coordinates, 2);\r\n  const xs = [];\r\n  const ys = [];\r\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\r\n    xs.push(coordinates[i]);\r\n    ys.push(coordinates[i + 1]);\r\n  }\r\n  return _boundingExtentXYs(xs, ys, dest);\r\n}\r\n\r\n/**\r\n * Modifies the provided extent in-place to be within the real world\r\n * extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection\r\n * @return {Extent} The extent within the real world extent.\r\n */\r\nexport function wrapX(extent, projection) {\r\n  const projectionExtent = projection.getExtent();\r\n  const center = getCenter(extent);\r\n  if (\r\n    projection.canWrapX() &&\r\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\r\n  ) {\r\n    const worldWidth = getWidth(projectionExtent);\r\n    const worldsAway = Math.floor(\r\n      (center[0] - projectionExtent[0]) / worldWidth\r\n    );\r\n    const offset = worldsAway * worldWidth;\r\n    extent[0] -= offset;\r\n    extent[2] -= offset;\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * Fits the extent to the real world\r\n *\r\n * If the extent does not cross the anti meridian, this will return the extent in an array\r\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\r\n * real world\r\n *\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection\r\n * @return {Array<Extent>} The extent within the real world extent.\r\n */\r\nexport function wrapAndSliceX(extent, projection) {\r\n  if (projection.canWrapX()) {\r\n    const projectionExtent = projection.getExtent();\r\n\r\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\r\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\r\n    }\r\n\r\n    wrapX(extent, projection);\r\n    const worldWidth = getWidth(projectionExtent);\r\n\r\n    if (getWidth(extent) > worldWidth) {\r\n      // the extent wraps around on itself\r\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\r\n    }\r\n    if (extent[0] < projectionExtent[0]) {\r\n      // the extent crosses the anti meridian, so it needs to be sliced\r\n      return [\r\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\r\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\r\n      ];\r\n    }\r\n    if (extent[2] > projectionExtent[2]) {\r\n      // the extent crosses the anti meridian, so it needs to be sliced\r\n      return [\r\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\r\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\r\n      ];\r\n    }\r\n  }\r\n\r\n  return [extent];\r\n}\r\n", "/**\r\n * @module ol/extent/Relationship\r\n */\r\n\r\n/**\r\n * Relationship to an extent.\r\n * @enum {number}\r\n */\r\nexport default {\r\n  UNKNOWN: 0,\r\n  INTERSECTING: 1,\r\n  ABOVE: 2,\r\n  RIGHT: 4,\r\n  BELOW: 8,\r\n  LEFT: 16,\r\n};\r\n", "/**\r\n * @module ol/proj/Units\r\n */\r\n\r\n/**\r\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\r\n * Projection units.\r\n */\r\n\r\n/**\r\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\r\n * @type {Object<number, Units>}\r\n */\r\nconst unitByCode = {\r\n  '9001': 'm',\r\n  '9002': 'ft',\r\n  '9003': 'us-ft',\r\n  '9101': 'radians',\r\n  '9102': 'degrees',\r\n};\r\n\r\n/**\r\n * @param {number} code Unit code.\r\n * @return {Units} Units.\r\n */\r\nexport function fromCode(code) {\r\n  return unitByCode[code];\r\n}\r\n\r\n/**\r\n * @typedef {Object} MetersPerUnitLookup\r\n * @property {number} radians Radians\r\n * @property {number} degrees Degrees\r\n * @property {number} ft  Feet\r\n * @property {number} m Meters\r\n * @property {number} us-ft US feet\r\n */\r\n\r\n/**\r\n * Meters per unit lookup table.\r\n * @const\r\n * @type {MetersPerUnitLookup}\r\n * @api\r\n */\r\nexport const METERS_PER_UNIT = {\r\n  // use the radius of the Normal sphere\r\n  'radians': 6370997 / (2 * Math.PI),\r\n  'degrees': (2 * Math.PI * 6370997) / 360,\r\n  'ft': 0.3048,\r\n  'm': 1,\r\n  'us-ft': 1200 / 3937,\r\n};\r\n", "/**\r\n * @module ol/proj/Projection\r\n */\r\nimport {METERS_PER_UNIT} from './Units.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\r\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\r\n * proj4 projection is defined for `code`.\r\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\r\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\r\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\r\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\r\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\r\n * lookup table.\r\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\r\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\r\n * Function to determine resolution at a point. The function is called with a\r\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\r\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\r\n * the default {@link module:ol/proj.getPointResolution} function will be used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Projection definition class. One of these is created for each projection\r\n * supported in the application and stored in the {@link module:ol/proj} namespace.\r\n * You can use these in applications, but this is not required, as API params\r\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\r\n * code will suffice.\r\n *\r\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\r\n * projection.\r\n *\r\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\r\n * with the following aliases:\r\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\r\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\r\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\r\n *     urn:x-ogc:def:crs:EPSG:4326\r\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\r\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\r\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\r\n *\r\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\r\n * be added using `proj4.defs()`. After all required projection definitions are\r\n * added, call the {@link module:ol/proj/proj4.register} function.\r\n *\r\n * @api\r\n */\r\nclass Projection {\r\n  /**\r\n   * @param {Options} options Projection options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.code_ = options.code;\r\n\r\n    /**\r\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\r\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\r\n     * tile.\r\n     * @private\r\n     * @type {import(\"./Units.js\").Units}\r\n     */\r\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\r\n\r\n    /**\r\n     * Validity extent of the projection in projected coordinates. For projections\r\n     * with `TILE_PIXELS` units, this is the extent of the tile in\r\n     * tile pixel space.\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = options.extent !== undefined ? options.extent : null;\r\n\r\n    /**\r\n     * Extent of the world in EPSG:4326. For projections with\r\n     * `TILE_PIXELS` units, this is the extent of the tile in\r\n     * projected coordinate space.\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.worldExtent_ =\r\n      options.worldExtent !== undefined ? options.worldExtent : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.axisOrientation_ =\r\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.global_ = options.global !== undefined ? options.global : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.canWrapX_ = !!(this.global_ && this.extent_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\r\n     */\r\n    this.getPointResolutionFunc_ = options.getPointResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.defaultTileGrid_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.metersPerUnit_ = options.metersPerUnit;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The projection is suitable for wrapping the x-axis\r\n   */\r\n  canWrapX() {\r\n    return this.canWrapX_;\r\n  }\r\n\r\n  /**\r\n   * Get the code for this projection, e.g. 'EPSG:4326'.\r\n   * @return {string} Code.\r\n   * @api\r\n   */\r\n  getCode() {\r\n    return this.code_;\r\n  }\r\n\r\n  /**\r\n   * Get the validity extent for this projection.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Get the units of this projection.\r\n   * @return {import(\"./Units.js\").Units} Units.\r\n   * @api\r\n   */\r\n  getUnits() {\r\n    return this.units_;\r\n  }\r\n\r\n  /**\r\n   * Get the amount of meters per unit of this projection.  If the projection is\r\n   * not configured with `metersPerUnit` or a units identifier, the return is\r\n   * `undefined`.\r\n   * @return {number|undefined} Meters.\r\n   * @api\r\n   */\r\n  getMetersPerUnit() {\r\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\r\n  }\r\n\r\n  /**\r\n   * Get the world extent for this projection.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getWorldExtent() {\r\n    return this.worldExtent_;\r\n  }\r\n\r\n  /**\r\n   * Get the axis orientation of this projection.\r\n   * Example values are:\r\n   * enu - the default easting, northing, elevation.\r\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\r\n   *     or south orientated transverse mercator.\r\n   * wnu - westing, northing, up - some planetary coordinate systems have\r\n   *     \"west positive\" coordinate systems\r\n   * @return {string} Axis orientation.\r\n   * @api\r\n   */\r\n  getAxisOrientation() {\r\n    return this.axisOrientation_;\r\n  }\r\n\r\n  /**\r\n   * Is this projection a global projection which spans the whole world?\r\n   * @return {boolean} Whether the projection is global.\r\n   * @api\r\n   */\r\n  isGlobal() {\r\n    return this.global_;\r\n  }\r\n\r\n  /**\r\n   * Set if the projection is a global projection which spans the whole world\r\n   * @param {boolean} global Whether the projection is global.\r\n   * @api\r\n   */\r\n  setGlobal(global) {\r\n    this.global_ = global;\r\n    this.canWrapX_ = !!(global && this.extent_);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\r\n   */\r\n  getDefaultTileGrid() {\r\n    return this.defaultTileGrid_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\r\n   */\r\n  setDefaultTileGrid(tileGrid) {\r\n    this.defaultTileGrid_ = tileGrid;\r\n  }\r\n\r\n  /**\r\n   * Set the validity extent for this projection.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  setExtent(extent) {\r\n    this.extent_ = extent;\r\n    this.canWrapX_ = !!(this.global_ && extent);\r\n  }\r\n\r\n  /**\r\n   * Set the world extent for this projection.\r\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\r\n   *     [minlon, minlat, maxlon, maxlat].\r\n   * @api\r\n   */\r\n  setWorldExtent(worldExtent) {\r\n    this.worldExtent_ = worldExtent;\r\n  }\r\n\r\n  /**\r\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\r\n   * for this projection.\r\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\r\n   * @api\r\n   */\r\n  setGetPointResolution(func) {\r\n    this.getPointResolutionFunc_ = func;\r\n  }\r\n\r\n  /**\r\n   * Get the custom point resolution function for this projection (if set).\r\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\r\n   * resolution function (if set).\r\n   */\r\n  getPointResolutionFunc() {\r\n    return this.getPointResolutionFunc_;\r\n  }\r\n}\r\n\r\nexport default Projection;\r\n", "/**\r\n * @module ol/proj/epsg3857\r\n */\r\nimport Projection from './Projection.js';\r\n\r\n/**\r\n * Radius of WGS84 sphere\r\n *\r\n * @const\r\n * @type {number}\r\n */\r\nexport const RADIUS = 6378137;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const HALF_SIZE = Math.PI * RADIUS;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\r\n\r\n/**\r\n * Maximum safe value in y direction\r\n * @const\r\n * @type {number}\r\n */\r\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\r\n\r\n/**\r\n * @classdesc\r\n * Projection object for web/spherical Mercator (EPSG:3857).\r\n */\r\nclass EPSG3857Projection extends Projection {\r\n  /**\r\n   * @param {string} code Code.\r\n   */\r\n  constructor(code) {\r\n    super({\r\n      code: code,\r\n      units: 'm',\r\n      extent: EXTENT,\r\n      global: true,\r\n      worldExtent: WORLD_EXTENT,\r\n      getPointResolution: function (resolution, point) {\r\n        return resolution / Math.cosh(point[1] / RADIUS);\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Projections equal to EPSG:3857.\r\n *\r\n * @const\r\n * @type {Array<import(\"./Projection.js\").default>}\r\n */\r\nexport const PROJECTIONS = [\r\n  new EPSG3857Projection('EPSG:3857'),\r\n  new EPSG3857Projection('EPSG:102100'),\r\n  new EPSG3857Projection('EPSG:102113'),\r\n  new EPSG3857Projection('EPSG:900913'),\r\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\r\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\r\n];\r\n\r\n/**\r\n * Transformation from EPSG:4326 to EPSG:3857.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\r\nexport function fromEPSG4326(input, output, dimension) {\r\n  const length = input.length;\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  if (output === undefined) {\r\n    if (dimension > 2) {\r\n      // preserve values beyond second dimension\r\n      output = input.slice();\r\n    } else {\r\n      output = new Array(length);\r\n    }\r\n  }\r\n  for (let i = 0; i < length; i += dimension) {\r\n    output[i] = (HALF_SIZE * input[i]) / 180;\r\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\r\n    if (y > MAX_SAFE_Y) {\r\n      y = MAX_SAFE_Y;\r\n    } else if (y < -MAX_SAFE_Y) {\r\n      y = -MAX_SAFE_Y;\r\n    }\r\n    output[i + 1] = y;\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * Transformation from EPSG:3857 to EPSG:4326.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\r\nexport function toEPSG4326(input, output, dimension) {\r\n  const length = input.length;\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  if (output === undefined) {\r\n    if (dimension > 2) {\r\n      // preserve values beyond second dimension\r\n      output = input.slice();\r\n    } else {\r\n      output = new Array(length);\r\n    }\r\n  }\r\n  for (let i = 0; i < length; i += dimension) {\r\n    output[i] = (180 * input[i]) / HALF_SIZE;\r\n    output[i + 1] =\r\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\r\n  }\r\n  return output;\r\n}\r\n", "/**\r\n * @module ol/proj/epsg4326\r\n */\r\nimport Projection from './Projection.js';\r\n\r\n/**\r\n * Semi-major radius of the WGS84 ellipsoid.\r\n *\r\n * @const\r\n * @type {number}\r\n */\r\nexport const RADIUS = 6378137;\r\n\r\n/**\r\n * Extent of the EPSG:4326 projection which is the whole world.\r\n *\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const EXTENT = [-180, -90, 180, 90];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\r\n\r\n/**\r\n * @classdesc\r\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\r\n *\r\n * Note that OpenLayers does not strictly comply with the EPSG definition.\r\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\r\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\r\n */\r\nclass EPSG4326Projection extends Projection {\r\n  /**\r\n   * @param {string} code Code.\r\n   * @param {string} [axisOrientation] Axis orientation.\r\n   */\r\n  constructor(code, axisOrientation) {\r\n    super({\r\n      code: code,\r\n      units: 'degrees',\r\n      extent: EXTENT,\r\n      axisOrientation: axisOrientation,\r\n      global: true,\r\n      metersPerUnit: METERS_PER_UNIT,\r\n      worldExtent: EXTENT,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Projections equal to EPSG:4326.\r\n *\r\n * @const\r\n * @type {Array<import(\"./Projection.js\").default>}\r\n */\r\nexport const PROJECTIONS = [\r\n  new EPSG4326Projection('CRS:84'),\r\n  new EPSG4326Projection('EPSG:4326', 'neu'),\r\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\r\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\r\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\r\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\r\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\r\n];\r\n", "/**\r\n * @module ol/proj/projections\r\n */\r\n\r\n/**\r\n * @type {Object<string, import(\"./Projection.js\").default>}\r\n */\r\nlet cache = {};\r\n\r\n/**\r\n * Clear the projections cache.\r\n */\r\nexport function clear() {\r\n  cache = {};\r\n}\r\n\r\n/**\r\n * Get a cached projection by code.\r\n * @param {string} code The code for the projection.\r\n * @return {import(\"./Projection.js\").default} The projection (if cached).\r\n */\r\nexport function get(code) {\r\n  return (\r\n    cache[code] ||\r\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\r\n    null\r\n  );\r\n}\r\n\r\n/**\r\n * Add a projection to the cache.\r\n * @param {string} code The projection code.\r\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\r\n */\r\nexport function add(code, projection) {\r\n  cache[code] = projection;\r\n}\r\n", "/**\r\n * @module ol/proj/transforms\r\n */\r\nimport {isEmpty} from '../obj.js';\r\n\r\n/**\r\n * @private\r\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\r\n */\r\nlet transforms = {};\r\n\r\n/**\r\n * Clear the transform cache.\r\n */\r\nexport function clear() {\r\n  transforms = {};\r\n}\r\n\r\n/**\r\n * Registers a conversion function to convert coordinates from the source\r\n * projection to the destination projection.\r\n *\r\n * @param {import(\"./Projection.js\").default} source Source.\r\n * @param {import(\"./Projection.js\").default} destination Destination.\r\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\r\n */\r\nexport function add(source, destination, transformFn) {\r\n  const sourceCode = source.getCode();\r\n  const destinationCode = destination.getCode();\r\n  if (!(sourceCode in transforms)) {\r\n    transforms[sourceCode] = {};\r\n  }\r\n  transforms[sourceCode][destinationCode] = transformFn;\r\n}\r\n\r\n/**\r\n * Unregisters the conversion function to convert coordinates from the source\r\n * projection to the destination projection.  This method is used to clean up\r\n * cached transforms during testing.\r\n *\r\n * @param {import(\"./Projection.js\").default} source Source projection.\r\n * @param {import(\"./Projection.js\").default} destination Destination projection.\r\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\r\n */\r\nexport function remove(source, destination) {\r\n  const sourceCode = source.getCode();\r\n  const destinationCode = destination.getCode();\r\n  const transform = transforms[sourceCode][destinationCode];\r\n  delete transforms[sourceCode][destinationCode];\r\n  if (isEmpty(transforms[sourceCode])) {\r\n    delete transforms[sourceCode];\r\n  }\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Get a transform given a source code and a destination code.\r\n * @param {string} sourceCode The code for the source projection.\r\n * @param {string} destinationCode The code for the destination projection.\r\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\r\n */\r\nexport function get(sourceCode, destinationCode) {\r\n  let transform;\r\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\r\n    transform = transforms[sourceCode][destinationCode];\r\n  }\r\n  return transform;\r\n}\r\n", "/**\r\n * @module ol/math\r\n */\r\n\r\n/**\r\n * Takes a number and clamps it to within the provided bounds.\r\n * @param {number} value The input number.\r\n * @param {number} min The minimum value to return.\r\n * @param {number} max The maximum value to return.\r\n * @return {number} The input number if it is within bounds, or the nearest\r\n *     number within the bounds.\r\n */\r\nexport function clamp(value, min, max) {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n\r\n/**\r\n * Returns the square of the closest distance between the point (x, y) and the\r\n * line segment (x1, y1) to (x2, y2).\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\r\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  if (dx !== 0 || dy !== 0) {\r\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\r\n    if (t > 1) {\r\n      x1 = x2;\r\n      y1 = y2;\r\n    } else if (t > 0) {\r\n      x1 += dx * t;\r\n      y1 += dy * t;\r\n    }\r\n  }\r\n  return squaredDistance(x, y, x1, y1);\r\n}\r\n\r\n/**\r\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\r\nexport function squaredDistance(x1, y1, x2, y2) {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Solves system of linear equations using Gaussian elimination method.\r\n *\r\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\r\n *                                     in row-major order.\r\n * @return {Array<number>|null} The resulting vector.\r\n */\r\nexport function solveLinearSystem(mat) {\r\n  const n = mat.length;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    // Find max in the i-th column (ignoring i - 1 first rows)\r\n    let maxRow = i;\r\n    let maxEl = Math.abs(mat[i][i]);\r\n    for (let r = i + 1; r < n; r++) {\r\n      const absValue = Math.abs(mat[r][i]);\r\n      if (absValue > maxEl) {\r\n        maxEl = absValue;\r\n        maxRow = r;\r\n      }\r\n    }\r\n\r\n    if (maxEl === 0) {\r\n      return null; // matrix is singular\r\n    }\r\n\r\n    // Swap max row with i-th (current) row\r\n    const tmp = mat[maxRow];\r\n    mat[maxRow] = mat[i];\r\n    mat[i] = tmp;\r\n\r\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\r\n    for (let j = i + 1; j < n; j++) {\r\n      const coef = -mat[j][i] / mat[i][i];\r\n      for (let k = i; k < n + 1; k++) {\r\n        if (i == k) {\r\n          mat[j][k] = 0;\r\n        } else {\r\n          mat[j][k] += coef * mat[i][k];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Solve Ax=b for upper triangular matrix A (mat)\r\n  const x = new Array(n);\r\n  for (let l = n - 1; l >= 0; l--) {\r\n    x[l] = mat[l][n] / mat[l][l];\r\n    for (let m = l - 1; m >= 0; m--) {\r\n      mat[m][n] -= mat[m][l] * x[l];\r\n    }\r\n  }\r\n  return x;\r\n}\r\n\r\n/**\r\n * Converts radians to to degrees.\r\n *\r\n * @param {number} angleInRadians Angle in radians.\r\n * @return {number} Angle in degrees.\r\n */\r\nexport function toDegrees(angleInRadians) {\r\n  return (angleInRadians * 180) / Math.PI;\r\n}\r\n\r\n/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} angleInDegrees Angle in degrees.\r\n * @return {number} Angle in radians.\r\n */\r\nexport function toRadians(angleInDegrees) {\r\n  return (angleInDegrees * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Returns the modulo of a / b, depending on the sign of b.\r\n *\r\n * @param {number} a Dividend.\r\n * @param {number} b Divisor.\r\n * @return {number} Modulo.\r\n */\r\nexport function modulo(a, b) {\r\n  const r = a % b;\r\n  return r * b < 0 ? r + b : r;\r\n}\r\n\r\n/**\r\n * Calculates the linearly interpolated value of x between a and b.\r\n *\r\n * @param {number} a Number\r\n * @param {number} b Number\r\n * @param {number} x Value to be interpolated.\r\n * @return {number} Interpolated value.\r\n */\r\nexport function lerp(a, b, x) {\r\n  return a + x * (b - a);\r\n}\r\n\r\n/**\r\n * Returns a number with a limited number of decimal digits.\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The input number with a limited number of decimal digits.\r\n */\r\nexport function toFixed(n, decimals) {\r\n  const factor = Math.pow(10, decimals);\r\n  return Math.round(n * factor) / factor;\r\n}\r\n\r\n/**\r\n * Rounds a number to the nearest integer value considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The nearest integer.\r\n */\r\nexport function round(n, decimals) {\r\n  return Math.round(toFixed(n, decimals));\r\n}\r\n\r\n/**\r\n * Rounds a number to the next smaller integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next smaller integer.\r\n */\r\nexport function floor(n, decimals) {\r\n  return Math.floor(toFixed(n, decimals));\r\n}\r\n\r\n/**\r\n * Rounds a number to the next bigger integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next bigger integer.\r\n */\r\nexport function ceil(n, decimals) {\r\n  return Math.ceil(toFixed(n, decimals));\r\n}\r\n", "/**\r\n * @module ol/string\r\n */\r\n\r\n/**\r\n * @param {number} number Number to be formatted\r\n * @param {number} width The desired width\r\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\r\n * @return {string} Formatted string\r\n */\r\nexport function padNumber(number, width, precision) {\r\n  const numberString =\r\n    precision !== undefined ? number.toFixed(precision) : '' + number;\r\n  let decimal = numberString.indexOf('.');\r\n  decimal = decimal === -1 ? numberString.length : decimal;\r\n  return decimal > width\r\n    ? numberString\r\n    : new Array(1 + width - decimal).join('0') + numberString;\r\n}\r\n\r\n/**\r\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\r\n * @param {string|number} v1 First version\r\n * @param {string|number} v2 Second version\r\n * @return {number} Value\r\n */\r\nexport function compareVersions(v1, v2) {\r\n  const s1 = ('' + v1).split('.');\r\n  const s2 = ('' + v2).split('.');\r\n\r\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\r\n    const n1 = parseInt(s1[i] || '0', 10);\r\n    const n2 = parseInt(s2[i] || '0', 10);\r\n\r\n    if (n1 > n2) {\r\n      return 1;\r\n    }\r\n    if (n2 > n1) {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n", "/**\r\n * @module ol/coordinate\r\n */\r\nimport {getWidth} from './extent.js';\r\nimport {modulo, toFixed} from './math.js';\r\nimport {padNumber} from './string.js';\r\n\r\n/**\r\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\r\n * Example: `[16, 48]`.\r\n * @typedef {Array<number>} Coordinate\r\n * @api\r\n */\r\n\r\n/**\r\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\r\n * transforms it into a `{string}`.\r\n *\r\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\r\n * @api\r\n */\r\n\r\n/**\r\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\r\n * by the function.\r\n *\r\n * Example:\r\n *\r\n *     import {add} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     add(coord, [-2, 4]);\r\n *     // coord is now [5.85, 51.983333]\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {Coordinate} delta Delta.\r\n * @return {Coordinate} The input coordinate adjusted by\r\n * the given delta.\r\n * @api\r\n */\r\nexport function add(coordinate, delta) {\r\n  coordinate[0] += +delta[0];\r\n  coordinate[1] += +delta[1];\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * Calculates the point closest to the passed coordinate on the passed circle.\r\n *\r\n * @param {Coordinate} coordinate The coordinate.\r\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\r\n * @return {Coordinate} Closest point on the circumference.\r\n */\r\nexport function closestOnCircle(coordinate, circle) {\r\n  const r = circle.getRadius();\r\n  const center = circle.getCenter();\r\n  const x0 = center[0];\r\n  const y0 = center[1];\r\n  const x1 = coordinate[0];\r\n  const y1 = coordinate[1];\r\n\r\n  let dx = x1 - x0;\r\n  const dy = y1 - y0;\r\n  if (dx === 0 && dy === 0) {\r\n    dx = 1;\r\n  }\r\n  const d = Math.sqrt(dx * dx + dy * dy);\r\n\r\n  const x = x0 + (r * dx) / d;\r\n  const y = y0 + (r * dy) / d;\r\n\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * Calculates the point closest to the passed coordinate on the passed segment.\r\n * This is the foot of the perpendicular of the coordinate to the segment when\r\n * the foot is on the segment, or the closest segment coordinate when the foot\r\n * is outside the segment.\r\n *\r\n * @param {Coordinate} coordinate The coordinate.\r\n * @param {Array<Coordinate>} segment The two coordinates\r\n * of the segment.\r\n * @return {Coordinate} The foot of the perpendicular of\r\n * the coordinate to the segment.\r\n */\r\nexport function closestOnSegment(coordinate, segment) {\r\n  const x0 = coordinate[0];\r\n  const y0 = coordinate[1];\r\n  const start = segment[0];\r\n  const end = segment[1];\r\n  const x1 = start[0];\r\n  const y1 = start[1];\r\n  const x2 = end[0];\r\n  const y2 = end[1];\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  const along =\r\n    dx === 0 && dy === 0\r\n      ? 0\r\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\r\n  let x, y;\r\n  if (along <= 0) {\r\n    x = x1;\r\n    y = y1;\r\n  } else if (along >= 1) {\r\n    x = x2;\r\n    y = y2;\r\n  } else {\r\n    x = x1 + along * dx;\r\n    y = y1 + along * dy;\r\n  }\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\r\n * used to format\r\n * a {Coordinate} to a string.\r\n *\r\n * Example without specifying the fractional digits:\r\n *\r\n *     import {createStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const stringifyFunc = createStringXY();\r\n *     const out = stringifyFunc(coord);\r\n *     // out is now '8, 48'\r\n *\r\n * Example with explicitly specifying 2 fractional digits:\r\n *\r\n *     import {createStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const stringifyFunc = createStringXY(2);\r\n *     const out = stringifyFunc(coord);\r\n *     // out is now '7.85, 47.98'\r\n *\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {CoordinateFormat} Coordinate format.\r\n * @api\r\n */\r\nexport function createStringXY(fractionDigits) {\r\n  return (\r\n    /**\r\n     * @param {Coordinate} coordinate Coordinate.\r\n     * @return {string} String XY.\r\n     */\r\n    function (coordinate) {\r\n      return toStringXY(coordinate, fractionDigits);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {string} hemispheres Hemispheres.\r\n * @param {number} degrees Degrees.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} String.\r\n */\r\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\r\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\r\n  const x = Math.abs(3600 * normalizedDegrees);\r\n  const decimals = fractionDigits || 0;\r\n\r\n  let deg = Math.floor(x / 3600);\r\n  let min = Math.floor((x - deg * 3600) / 60);\r\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\r\n\r\n  if (sec >= 60) {\r\n    sec = 0;\r\n    min += 1;\r\n  }\r\n\r\n  if (min >= 60) {\r\n    min = 0;\r\n    deg += 1;\r\n  }\r\n\r\n  let hdms = deg + '\\u00b0';\r\n  if (min !== 0 || sec !== 0) {\r\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\r\n  }\r\n  if (sec !== 0) {\r\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\r\n  }\r\n  if (normalizedDegrees !== 0) {\r\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\r\n  }\r\n\r\n  return hdms;\r\n}\r\n\r\n/**\r\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\r\n * using the given string template. The strings `{x}` and `{y}` in the template\r\n * will be replaced with the first and second coordinate values respectively.\r\n *\r\n * Example without specifying the fractional digits:\r\n *\r\n *     import {format} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const template = 'Coordinate is ({x}|{y}).';\r\n *     const out = format(coord, template);\r\n *     // out is now 'Coordinate is (8|48).'\r\n *\r\n * Example explicitly specifying the fractional digits:\r\n *\r\n *     import {format} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const template = 'Coordinate is ({x}|{y}).';\r\n *     const out = format(coord, template, 2);\r\n *     // out is now 'Coordinate is (7.85|47.98).'\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {string} template A template string with `{x}` and `{y}` placeholders\r\n *     that will be replaced by first and second coordinate values.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} Formatted coordinate.\r\n * @api\r\n */\r\nexport function format(coordinate, template, fractionDigits) {\r\n  if (coordinate) {\r\n    return template\r\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\r\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {Coordinate} coordinate1 First coordinate.\r\n * @param {Coordinate} coordinate2 Second coordinate.\r\n * @return {boolean} The two coordinates are equal.\r\n */\r\nexport function equals(coordinate1, coordinate2) {\r\n  let equals = true;\r\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\r\n    if (coordinate1[i] != coordinate2[i]) {\r\n      equals = false;\r\n      break;\r\n    }\r\n  }\r\n  return equals;\r\n}\r\n\r\n/**\r\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\r\n * returned by the function.\r\n *\r\n * Example:\r\n *\r\n *     import {rotate} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const rotateRadians = Math.PI / 2; // 90 degrees\r\n *     rotate(coord, rotateRadians);\r\n *     // coord is now [-47.983333, 7.85]\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} angle Angle in radian.\r\n * @return {Coordinate} Coordinate.\r\n * @api\r\n */\r\nexport function rotate(coordinate, angle) {\r\n  const cosAngle = Math.cos(angle);\r\n  const sinAngle = Math.sin(angle);\r\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\r\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\r\n  coordinate[0] = x;\r\n  coordinate[1] = y;\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\r\n * by the function.\r\n *\r\n * Example:\r\n *\r\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const scale = 1.2;\r\n *     scaleCoordinate(coord, scale);\r\n *     // coord is now [9.42, 57.5799996]\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} scale Scale factor.\r\n * @return {Coordinate} Coordinate.\r\n */\r\nexport function scale(coordinate, scale) {\r\n  coordinate[0] *= scale;\r\n  coordinate[1] *= scale;\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * @param {Coordinate} coord1 First coordinate.\r\n * @param {Coordinate} coord2 Second coordinate.\r\n * @return {number} Squared distance between coord1 and coord2.\r\n */\r\nexport function squaredDistance(coord1, coord2) {\r\n  const dx = coord1[0] - coord2[0];\r\n  const dy = coord1[1] - coord2[1];\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * @param {Coordinate} coord1 First coordinate.\r\n * @param {Coordinate} coord2 Second coordinate.\r\n * @return {number} Distance between coord1 and coord2.\r\n */\r\nexport function distance(coord1, coord2) {\r\n  return Math.sqrt(squaredDistance(coord1, coord2));\r\n}\r\n\r\n/**\r\n * Calculate the squared distance from a coordinate to a line segment.\r\n *\r\n * @param {Coordinate} coordinate Coordinate of the point.\r\n * @param {Array<Coordinate>} segment Line segment (2\r\n * coordinates).\r\n * @return {number} Squared distance from the point to the line segment.\r\n */\r\nexport function squaredDistanceToSegment(coordinate, segment) {\r\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\r\n}\r\n\r\n/**\r\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\r\n * seconds.\r\n *\r\n * Example without specifying fractional digits:\r\n *\r\n *     import {toStringHDMS} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringHDMS(coord);\r\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\r\n *\r\n * Example explicitly specifying 1 fractional digit:\r\n *\r\n *     import {toStringHDMS} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringHDMS(coord, 1);\r\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} Hemisphere, degrees, minutes and seconds.\r\n * @api\r\n */\r\nexport function toStringHDMS(coordinate, fractionDigits) {\r\n  if (coordinate) {\r\n    return (\r\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\r\n      ' ' +\r\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\r\n    );\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * Format a coordinate as a comma delimited string.\r\n *\r\n * Example without specifying fractional digits:\r\n *\r\n *     import {toStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringXY(coord);\r\n *     // out is now '8, 48'\r\n *\r\n * Example explicitly specifying 1 fractional digit:\r\n *\r\n *     import {toStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringXY(coord, 1);\r\n *     // out is now '7.8, 48.0'\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} XY.\r\n * @api\r\n */\r\nexport function toStringXY(coordinate, fractionDigits) {\r\n  return format(coordinate, '{x}, {y}', fractionDigits);\r\n}\r\n\r\n/**\r\n * Modifies the provided coordinate in-place to be within the real world\r\n * extent. The lower projection extent boundary is inclusive, the upper one\r\n * exclusive.\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {Coordinate} The coordinate within the real world extent.\r\n */\r\nexport function wrapX(coordinate, projection) {\r\n  if (projection.canWrapX()) {\r\n    const worldWidth = getWidth(projection.getExtent());\r\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\r\n    if (worldsAway) {\r\n      coordinate[0] -= worldsAway * worldWidth;\r\n    }\r\n  }\r\n  return coordinate;\r\n}\r\n/**\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {number} [sourceExtentWidth] Width of the source extent.\r\n * @return {number} Offset in world widths.\r\n */\r\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\r\n  const projectionExtent = projection.getExtent();\r\n  let worldsAway = 0;\r\n  if (\r\n    projection.canWrapX() &&\r\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\r\n  ) {\r\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\r\n    worldsAway = Math.floor(\r\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth\r\n    );\r\n  }\r\n  return worldsAway;\r\n}\r\n", "/**\r\n * @module ol/sphere\r\n */\r\nimport {toDegrees, toRadians} from './math.js';\r\n\r\n/**\r\n * Object literal with options for the {@link getLength} or {@link getArea}\r\n * functions.\r\n * @typedef {Object} SphereMetricOptions\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\r\n * Projection of the  geometry.  By default, the geometry is assumed to be in\r\n * Web Mercator.\r\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\r\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\r\n * for the WGS84 ellipsoid is used.\r\n */\r\n\r\n/**\r\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\r\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\r\n * @type {number}\r\n */\r\nexport const DEFAULT_RADIUS = 6371008.8;\r\n\r\n/**\r\n * Get the great circle distance (in meters) between two geographic coordinates.\r\n * @param {Array} c1 Starting coordinate.\r\n * @param {Array} c2 Ending coordinate.\r\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\r\n *     mean radius using the WGS84 ellipsoid.\r\n * @return {number} The great circle distance between the points (in meters).\r\n * @api\r\n */\r\nexport function getDistance(c1, c2, radius) {\r\n  radius = radius || DEFAULT_RADIUS;\r\n  const lat1 = toRadians(c1[1]);\r\n  const lat2 = toRadians(c2[1]);\r\n  const deltaLatBy2 = (lat2 - lat1) / 2;\r\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\r\n  const a =\r\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\r\n    Math.sin(deltaLonBy2) *\r\n      Math.sin(deltaLonBy2) *\r\n      Math.cos(lat1) *\r\n      Math.cos(lat2);\r\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n}\r\n\r\n/**\r\n * Get the cumulative great circle length of linestring coordinates (geographic).\r\n * @param {Array} coordinates Linestring coordinates.\r\n * @param {number} radius The sphere radius to use.\r\n * @return {number} The length (in meters).\r\n */\r\nfunction getLengthInternal(coordinates, radius) {\r\n  let length = 0;\r\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\r\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\r\n  }\r\n  return length;\r\n}\r\n\r\n/**\r\n * Get the spherical length of a geometry.  This length is the sum of the\r\n * great circle distances between coordinates.  For polygons, the length is\r\n * the sum of all rings.  For points, the length is zero.  For multi-part\r\n * geometries, the length is the sum of the length of each part.\r\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\r\n * @param {SphereMetricOptions} [options] Options for the\r\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\r\n * You can change this by providing a `projection` option.\r\n * @return {number} The spherical length (in meters).\r\n * @api\r\n */\r\nexport function getLength(geometry, options) {\r\n  options = options || {};\r\n  const radius = options.radius || DEFAULT_RADIUS;\r\n  const projection = options.projection || 'EPSG:3857';\r\n  const type = geometry.getType();\r\n  if (type !== 'GeometryCollection') {\r\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\r\n  }\r\n  let length = 0;\r\n  let coordinates, coords, i, ii, j, jj;\r\n  switch (type) {\r\n    case 'Point':\r\n    case 'MultiPoint': {\r\n      break;\r\n    }\r\n    case 'LineString':\r\n    case 'LinearRing': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      length = getLengthInternal(coordinates, radius);\r\n      break;\r\n    }\r\n    case 'MultiLineString':\r\n    case 'Polygon': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        length += getLengthInternal(coordinates[i], radius);\r\n      }\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coords = coordinates[i];\r\n        for (j = 0, jj = coords.length; j < jj; ++j) {\r\n          length += getLengthInternal(coords[j], radius);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      const geometries =\r\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ).getGeometries();\r\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n        length += getLength(geometries[i], options);\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return length;\r\n}\r\n\r\n/**\r\n * Returns the spherical area for a list of coordinates.\r\n *\r\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\r\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\r\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\r\n * Laboratory, Pasadena, CA, June 2007\r\n *\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\r\n * ring. If the ring is oriented clockwise, the area will be positive,\r\n * otherwise it will be negative.\r\n * @param {number} radius The sphere radius.\r\n * @return {number} Area (in square meters).\r\n */\r\nfunction getAreaInternal(coordinates, radius) {\r\n  let area = 0;\r\n  const len = coordinates.length;\r\n  let x1 = coordinates[len - 1][0];\r\n  let y1 = coordinates[len - 1][1];\r\n  for (let i = 0; i < len; i++) {\r\n    const x2 = coordinates[i][0];\r\n    const y2 = coordinates[i][1];\r\n    area +=\r\n      toRadians(x2 - x1) *\r\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return (area * radius * radius) / 2.0;\r\n}\r\n\r\n/**\r\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\r\n * that polygon edges are segments of great circles on a sphere.\r\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\r\n * @param {SphereMetricOptions} [options] Options for the area\r\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\r\n *     You can change this by providing a `projection` option.\r\n * @return {number} The spherical area (in square meters).\r\n * @api\r\n */\r\nexport function getArea(geometry, options) {\r\n  options = options || {};\r\n  const radius = options.radius || DEFAULT_RADIUS;\r\n  const projection = options.projection || 'EPSG:3857';\r\n  const type = geometry.getType();\r\n  if (type !== 'GeometryCollection') {\r\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\r\n  }\r\n  let area = 0;\r\n  let coordinates, coords, i, ii, j, jj;\r\n  switch (type) {\r\n    case 'Point':\r\n    case 'MultiPoint':\r\n    case 'LineString':\r\n    case 'MultiLineString':\r\n    case 'LinearRing': {\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\r\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\r\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\r\n      }\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coords = coordinates[i];\r\n        area += Math.abs(getAreaInternal(coords[0], radius));\r\n        for (j = 1, jj = coords.length; j < jj; ++j) {\r\n          area -= Math.abs(getAreaInternal(coords[j], radius));\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      const geometries =\r\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ).getGeometries();\r\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n        area += getArea(geometries[i], options);\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * Returns the coordinate at the given distance and bearing from `c1`.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\r\n * @param {number} distance The great-circle distance between the origin\r\n *     point and the target point.\r\n * @param {number} bearing The bearing (in radians).\r\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\r\n *     mean radius using the WGS84 ellipsoid.\r\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\r\n */\r\nexport function offset(c1, distance, bearing, radius) {\r\n  radius = radius || DEFAULT_RADIUS;\r\n  const lat1 = toRadians(c1[1]);\r\n  const lon1 = toRadians(c1[0]);\r\n  const dByR = distance / radius;\r\n  const lat = Math.asin(\r\n    Math.sin(lat1) * Math.cos(dByR) +\r\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)\r\n  );\r\n  const lon =\r\n    lon1 +\r\n    Math.atan2(\r\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\r\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat)\r\n    );\r\n  return [toDegrees(lon), toDegrees(lat)];\r\n}\r\n", "/**\r\n * @module ol/console\r\n */\r\n\r\n/**\r\n * @typedef {'info'|'warn'|'error'|'none'} Level\r\n */\r\n\r\n/**\r\n * @type {Object<Level, number>}\r\n */\r\nconst levels = {\r\n  info: 1,\r\n  warn: 2,\r\n  error: 3,\r\n  none: 4,\r\n};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet level = levels.info;\r\n\r\n/**\r\n * Set the logging level.  By default, the level is set to 'info' and all\r\n * messages will be logged.  Set to 'warn' to only display warnings and errors.\r\n * Set to 'error' to only display errors.  Set to 'none' to silence all messages.\r\n *\r\n * @param {Level} l The new level.\r\n */\r\nexport function setLevel(l) {\r\n  level = levels[l];\r\n}\r\n\r\n/**\r\n * @param  {...any} args Arguments to log\r\n */\r\nexport function log(...args) {\r\n  if (level > levels.info) {\r\n    return;\r\n  }\r\n  console.log(...args); // eslint-disable-line no-console\r\n}\r\n\r\n/**\r\n * @param  {...any} args Arguments to log\r\n */\r\nexport function warn(...args) {\r\n  if (level > levels.warn) {\r\n    return;\r\n  }\r\n  console.warn(...args); // eslint-disable-line no-console\r\n}\r\n\r\n/**\r\n * @param  {...any} args Arguments to log\r\n */\r\nexport function error(...args) {\r\n  if (level > levels.error) {\r\n    return;\r\n  }\r\n  console.error(...args); // eslint-disable-line no-console\r\n}\r\n", "/**\r\n * @module ol/proj\r\n */\r\n\r\n/**\r\n * The ol/proj module stores:\r\n * * a list of {@link module:ol/proj/Projection~Projection}\r\n * objects, one for each projection supported by the application\r\n * * a list of transform functions needed to convert coordinates in one projection\r\n * into another.\r\n *\r\n * The static functions are the methods used to maintain these.\r\n * Each transform function can handle not only simple coordinate pairs, but also\r\n * large arrays of coordinates such as vector geometries.\r\n *\r\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\r\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\r\n * for example by Bing Maps or OpenStreetMap), together with the relevant\r\n * transform functions.\r\n *\r\n * Additional transforms may be added by using the http://proj4js.org/\r\n * library (version 2.2 or later). You can use the full build supplied by\r\n * Proj4js, or create a custom build to support those projections you need; see\r\n * the Proj4js website for how to do this. You also need the Proj4js definitions\r\n * for the required projections. These definitions can be obtained from\r\n * https://epsg.io/, and are a JS function, so can be loaded in a script\r\n * tag (as in the examples) or pasted into your application.\r\n *\r\n * After all required projection definitions are added to proj4's registry (by\r\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\r\n * package. Existing transforms are not changed by this function. See\r\n * examples/wms-image-custom-proj for an example of this.\r\n *\r\n * Additional projection definitions can be registered with `proj4.defs()` any\r\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\r\n * know in advance what projections are needed, you can initially load minimal\r\n * support and then load whichever are requested.\r\n *\r\n * Note that Proj4js does not support projection extents. If you want to add\r\n * one for creating default tile grids, you can add it after the Projection\r\n * object has been created with `setExtent`, for example,\r\n * `get('EPSG:1234').setExtent(extent)`.\r\n *\r\n * In addition to Proj4js support, any transform functions can be added with\r\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\r\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\r\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\r\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\r\n * examples/wms-custom-proj for an example of this.\r\n *\r\n * Note that if no transforms are needed and you only need to define the\r\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\r\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\r\n * this.\r\n */\r\nimport Projection from './proj/Projection.js';\r\nimport {\r\n  PROJECTIONS as EPSG3857_PROJECTIONS,\r\n  fromEPSG4326,\r\n  toEPSG4326,\r\n} from './proj/epsg3857.js';\r\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\r\nimport {METERS_PER_UNIT} from './proj/Units.js';\r\nimport {\r\n  add as addProj,\r\n  clear as clearProj,\r\n  get as getProj,\r\n} from './proj/projections.js';\r\nimport {\r\n  add as addTransformFunc,\r\n  clear as clearTransformFuncs,\r\n  get as getTransformFunc,\r\n} from './proj/transforms.js';\r\nimport {applyTransform, getWidth} from './extent.js';\r\nimport {clamp, modulo} from './math.js';\r\nimport {equals, getWorldsAway} from './coordinate.js';\r\nimport {getDistance} from './sphere.js';\r\nimport {warn} from './console.js';\r\n\r\n/**\r\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\r\n * string or undefined.\r\n * @typedef {Projection|string|undefined} ProjectionLike\r\n * @api\r\n */\r\n\r\n/**\r\n * A transform function accepts an array of input coordinate values, an optional\r\n * output array, and an optional dimension (default should be 2).  The function\r\n * transforms the input coordinate values, populates the output array, and\r\n * returns the output array.\r\n *\r\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\r\n * @api\r\n */\r\n\r\nexport {METERS_PER_UNIT};\r\n\r\nexport {Projection};\r\n\r\nlet showCoordinateWarning = true;\r\n\r\n/**\r\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\r\n */\r\nexport function disableCoordinateWarning(disable) {\r\n  const hide = disable === undefined ? true : disable;\r\n  showCoordinateWarning = !hide;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Output coordinate array (new array, same coordinate\r\n *     values).\r\n */\r\nexport function cloneTransform(input, output) {\r\n  if (output !== undefined) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      output[i] = input[i];\r\n    }\r\n    output = output;\r\n  } else {\r\n    output = input.slice();\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Input coordinate array (same array as input).\r\n */\r\nexport function identityTransform(input, output) {\r\n  if (output !== undefined && input !== output) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      output[i] = input[i];\r\n    }\r\n    input = output;\r\n  }\r\n  return input;\r\n}\r\n\r\n/**\r\n * Add a Projection object to the list of supported projections that can be\r\n * looked up by their code.\r\n *\r\n * @param {Projection} projection Projection instance.\r\n * @api\r\n */\r\nexport function addProjection(projection) {\r\n  addProj(projection.getCode(), projection);\r\n  addTransformFunc(projection, projection, cloneTransform);\r\n}\r\n\r\n/**\r\n * @param {Array<Projection>} projections Projections.\r\n */\r\nexport function addProjections(projections) {\r\n  projections.forEach(addProjection);\r\n}\r\n\r\n/**\r\n * Fetches a Projection object for the code specified.\r\n *\r\n * @param {ProjectionLike} projectionLike Either a code string which is\r\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\r\n *     existing projection object, or undefined.\r\n * @return {Projection|null} Projection object, or null if not in list.\r\n * @api\r\n */\r\nexport function get(projectionLike) {\r\n  return typeof projectionLike === 'string'\r\n    ? getProj(/** @type {string} */ (projectionLike))\r\n    : /** @type {Projection} */ (projectionLike) || null;\r\n}\r\n\r\n/**\r\n * Get the resolution of the point in degrees or distance units.\r\n * For projections with degrees as the unit this will simply return the\r\n * provided resolution. For other projections the point resolution is\r\n * by default estimated by transforming the `point` pixel to EPSG:4326,\r\n * measuring its width and height on the normal sphere,\r\n * and taking the average of the width and height.\r\n * A custom function can be provided for a specific projection, either\r\n * by setting the `getPointResolution` option in the\r\n * {@link module:ol/proj/Projection~Projection} constructor or by using\r\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\r\n * projection object.\r\n * @param {ProjectionLike} projection The projection.\r\n * @param {number} resolution Nominal resolution in projection units.\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\r\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\r\n * Default is the projection's units.\r\n * @return {number} Point resolution.\r\n * @api\r\n */\r\nexport function getPointResolution(projection, resolution, point, units) {\r\n  projection = get(projection);\r\n  let pointResolution;\r\n  const getter = projection.getPointResolutionFunc();\r\n  if (getter) {\r\n    pointResolution = getter(resolution, point);\r\n    if (units && units !== projection.getUnits()) {\r\n      const metersPerUnit = projection.getMetersPerUnit();\r\n      if (metersPerUnit) {\r\n        pointResolution =\r\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\r\n      }\r\n    }\r\n  } else {\r\n    const projUnits = projection.getUnits();\r\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\r\n      pointResolution = resolution;\r\n    } else {\r\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\r\n      // measuring its width and height on the normal sphere, and taking the\r\n      // average of the width and height.\r\n      const toEPSG4326 = getTransformFromProjections(\r\n        projection,\r\n        get('EPSG:4326')\r\n      );\r\n      if (toEPSG4326 === identityTransform && projUnits !== 'degrees') {\r\n        // no transform is available\r\n        pointResolution = resolution * projection.getMetersPerUnit();\r\n      } else {\r\n        let vertices = [\r\n          point[0] - resolution / 2,\r\n          point[1],\r\n          point[0] + resolution / 2,\r\n          point[1],\r\n          point[0],\r\n          point[1] - resolution / 2,\r\n          point[0],\r\n          point[1] + resolution / 2,\r\n        ];\r\n        vertices = toEPSG4326(vertices, vertices, 2);\r\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\r\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\r\n        pointResolution = (width + height) / 2;\r\n      }\r\n      const metersPerUnit = units\r\n        ? METERS_PER_UNIT[units]\r\n        : projection.getMetersPerUnit();\r\n      if (metersPerUnit !== undefined) {\r\n        pointResolution /= metersPerUnit;\r\n      }\r\n    }\r\n  }\r\n  return pointResolution;\r\n}\r\n\r\n/**\r\n * Registers transformation functions that don't alter coordinates. Those allow\r\n * to transform between projections with equal meaning.\r\n *\r\n * @param {Array<Projection>} projections Projections.\r\n * @api\r\n */\r\nexport function addEquivalentProjections(projections) {\r\n  addProjections(projections);\r\n  projections.forEach(function (source) {\r\n    projections.forEach(function (destination) {\r\n      if (source !== destination) {\r\n        addTransformFunc(source, destination, cloneTransform);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Registers transformation functions to convert coordinates in any projection\r\n * in projection1 to any projection in projection2.\r\n *\r\n * @param {Array<Projection>} projections1 Projections with equal\r\n *     meaning.\r\n * @param {Array<Projection>} projections2 Projections with equal\r\n *     meaning.\r\n * @param {TransformFunction} forwardTransform Transformation from any\r\n *   projection in projection1 to any projection in projection2.\r\n * @param {TransformFunction} inverseTransform Transform from any projection\r\n *   in projection2 to any projection in projection1..\r\n */\r\nexport function addEquivalentTransforms(\r\n  projections1,\r\n  projections2,\r\n  forwardTransform,\r\n  inverseTransform\r\n) {\r\n  projections1.forEach(function (projection1) {\r\n    projections2.forEach(function (projection2) {\r\n      addTransformFunc(projection1, projection2, forwardTransform);\r\n      addTransformFunc(projection2, projection1, inverseTransform);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Clear all cached projections and transforms.\r\n */\r\nexport function clearAllProjections() {\r\n  clearProj();\r\n  clearTransformFuncs();\r\n}\r\n\r\n/**\r\n * @param {Projection|string|undefined} projection Projection.\r\n * @param {string} defaultCode Default code.\r\n * @return {Projection} Projection.\r\n */\r\nexport function createProjection(projection, defaultCode) {\r\n  if (!projection) {\r\n    return get(defaultCode);\r\n  }\r\n  if (typeof projection === 'string') {\r\n    return get(projection);\r\n  }\r\n  return /** @type {Projection} */ (projection);\r\n}\r\n\r\n/**\r\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\r\n * function.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\r\n *     transform.\r\n * @return {TransformFunction} Transform function.\r\n */\r\nexport function createTransformFromCoordinateTransform(coordTransform) {\r\n  return (\r\n    /**\r\n     * @param {Array<number>} input Input.\r\n     * @param {Array<number>} [output] Output.\r\n     * @param {number} [dimension] Dimension.\r\n     * @return {Array<number>} Output.\r\n     */\r\n    function (input, output, dimension) {\r\n      const length = input.length;\r\n      dimension = dimension !== undefined ? dimension : 2;\r\n      output = output !== undefined ? output : new Array(length);\r\n      for (let i = 0; i < length; i += dimension) {\r\n        const point = coordTransform(input.slice(i, i + dimension));\r\n        const pointLength = point.length;\r\n        for (let j = 0, jj = dimension; j < jj; ++j) {\r\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\r\n        }\r\n      }\r\n      return output;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Registers coordinate transform functions to convert coordinates between the\r\n * source projection and the destination projection.\r\n * The forward and inverse functions convert coordinate pairs; this function\r\n * converts these into the functions used internally which also handle\r\n * extents and coordinate arrays.\r\n *\r\n * @param {ProjectionLike} source Source projection.\r\n * @param {ProjectionLike} destination Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\r\n *     function (that is, from the source projection to the destination\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\r\n *     function (that is, from the destination projection to the source\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\r\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\r\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\r\n *     source.\r\n * @api\r\n */\r\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\r\n  const sourceProj = get(source);\r\n  const destProj = get(destination);\r\n  addTransformFunc(\r\n    sourceProj,\r\n    destProj,\r\n    createTransformFromCoordinateTransform(forward)\r\n  );\r\n  addTransformFunc(\r\n    destProj,\r\n    sourceProj,\r\n    createTransformFromCoordinateTransform(inverse)\r\n  );\r\n}\r\n\r\n/**\r\n * Transforms a coordinate from longitude/latitude to a different projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\r\n *     an array with longitude as 1st and latitude as 2nd element.\r\n * @param {ProjectionLike} [projection] Target projection. The\r\n *     default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\r\n * @api\r\n */\r\nexport function fromLonLat(coordinate, projection) {\r\n  disableCoordinateWarning();\r\n  return transform(\r\n    coordinate,\r\n    'EPSG:4326',\r\n    projection !== undefined ? projection : 'EPSG:3857'\r\n  );\r\n}\r\n\r\n/**\r\n * Transforms a coordinate to longitude/latitude.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\r\n * @param {ProjectionLike} [projection] Projection of the coordinate.\r\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\r\n *     with longitude as 1st and latitude as 2nd element.\r\n * @api\r\n */\r\nexport function toLonLat(coordinate, projection) {\r\n  const lonLat = transform(\r\n    coordinate,\r\n    projection !== undefined ? projection : 'EPSG:3857',\r\n    'EPSG:4326'\r\n  );\r\n  const lon = lonLat[0];\r\n  if (lon < -180 || lon > 180) {\r\n    lonLat[0] = modulo(lon + 180, 360) - 180;\r\n  }\r\n  return lonLat;\r\n}\r\n\r\n/**\r\n * Checks if two projections are the same, that is every coordinate in one\r\n * projection does represent the same geographic point as the same coordinate in\r\n * the other projection.\r\n *\r\n * @param {Projection} projection1 Projection 1.\r\n * @param {Projection} projection2 Projection 2.\r\n * @return {boolean} Equivalent.\r\n * @api\r\n */\r\nexport function equivalent(projection1, projection2) {\r\n  if (projection1 === projection2) {\r\n    return true;\r\n  }\r\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\r\n  if (projection1.getCode() === projection2.getCode()) {\r\n    return equalUnits;\r\n  }\r\n  const transformFunc = getTransformFromProjections(projection1, projection2);\r\n  return transformFunc === cloneTransform && equalUnits;\r\n}\r\n\r\n/**\r\n * Searches in the list of transform functions for the function for converting\r\n * coordinates from the source projection to the destination projection.\r\n *\r\n * @param {Projection} sourceProjection Source Projection object.\r\n * @param {Projection} destinationProjection Destination Projection\r\n *     object.\r\n * @return {TransformFunction} Transform function.\r\n */\r\nexport function getTransformFromProjections(\r\n  sourceProjection,\r\n  destinationProjection\r\n) {\r\n  const sourceCode = sourceProjection.getCode();\r\n  const destinationCode = destinationProjection.getCode();\r\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\r\n  if (!transformFunc) {\r\n    transformFunc = identityTransform;\r\n  }\r\n  return transformFunc;\r\n}\r\n\r\n/**\r\n * Given the projection-like objects, searches for a transformation\r\n * function to convert a coordinates array from the source projection to the\r\n * destination projection.\r\n *\r\n * @param {ProjectionLike} source Source.\r\n * @param {ProjectionLike} destination Destination.\r\n * @return {TransformFunction} Transform function.\r\n * @api\r\n */\r\nexport function getTransform(source, destination) {\r\n  const sourceProjection = get(source);\r\n  const destinationProjection = get(destination);\r\n  return getTransformFromProjections(sourceProjection, destinationProjection);\r\n}\r\n\r\n/**\r\n * Transforms a coordinate from source projection to destination projection.\r\n * This returns a new coordinate (and does not modify the original).\r\n *\r\n * See {@link module:ol/proj.transformExtent} for extent transformation.\r\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\r\n * subclasses for geometry transforms.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n * @api\r\n */\r\nexport function transform(coordinate, source, destination) {\r\n  const transformFunc = getTransform(source, destination);\r\n  return transformFunc(coordinate, undefined, coordinate.length);\r\n}\r\n\r\n/**\r\n * Transforms an extent from source projection to destination projection.  This\r\n * returns a new extent (and does not modify the original).\r\n *\r\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @param {number} [stops] Number of stops per side used for the transform.\r\n * By default only the corners are used.\r\n * @return {import(\"./extent.js\").Extent} The transformed extent.\r\n * @api\r\n */\r\nexport function transformExtent(extent, source, destination, stops) {\r\n  const transformFunc = getTransform(source, destination);\r\n  return applyTransform(extent, transformFunc, undefined, stops);\r\n}\r\n\r\n/**\r\n * Transforms the given point to the destination projection.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\r\n * @param {Projection} sourceProjection Source projection.\r\n * @param {Projection} destinationProjection Destination projection.\r\n * @return {import(\"./coordinate.js\").Coordinate} Point.\r\n */\r\nexport function transformWithProjections(\r\n  point,\r\n  sourceProjection,\r\n  destinationProjection\r\n) {\r\n  const transformFunc = getTransformFromProjections(\r\n    sourceProjection,\r\n    destinationProjection\r\n  );\r\n  return transformFunc(point);\r\n}\r\n\r\n/**\r\n * @type {Projection|null}\r\n */\r\nlet userProjection = null;\r\n\r\n/**\r\n * Set the projection for coordinates supplied from and returned by API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @param {ProjectionLike} projection The user projection.\r\n * @api\r\n */\r\nexport function setUserProjection(projection) {\r\n  userProjection = get(projection);\r\n}\r\n\r\n/**\r\n * Clear the user projection if set.\r\n * @api\r\n */\r\nexport function clearUserProjection() {\r\n  userProjection = null;\r\n}\r\n\r\n/**\r\n * Get the projection for coordinates supplied from and returned by API methods.\r\n * @return {Projection|null} The user projection (or null if not set).\r\n * @api\r\n */\r\nexport function getUserProjection() {\r\n  return userProjection;\r\n}\r\n\r\n/**\r\n * Use geographic coordinates (WGS-84 datum) in API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @api\r\n */\r\nexport function useGeographic() {\r\n  setUserProjection('EPSG:4326');\r\n}\r\n\r\n/**\r\n * Return a coordinate transformed into the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\r\n * @return {Array<number>} The input coordinate in the user projection.\r\n */\r\nexport function toUserCoordinate(coordinate, sourceProjection) {\r\n  if (!userProjection) {\r\n    return coordinate;\r\n  }\r\n  return transform(coordinate, sourceProjection, userProjection);\r\n}\r\n\r\n/**\r\n * Return a coordinate transformed from the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {Array<number>} The input coordinate transformed.\r\n */\r\nexport function fromUserCoordinate(coordinate, destProjection) {\r\n  if (!userProjection) {\r\n    if (\r\n      showCoordinateWarning &&\r\n      !equals(coordinate, [0, 0]) &&\r\n      coordinate[0] >= -180 &&\r\n      coordinate[0] <= 180 &&\r\n      coordinate[1] >= -90 &&\r\n      coordinate[1] <= 90\r\n    ) {\r\n      showCoordinateWarning = false;\r\n      warn(\r\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.'\r\n      );\r\n    }\r\n    return coordinate;\r\n  }\r\n  return transform(coordinate, userProjection, destProjection);\r\n}\r\n\r\n/**\r\n * Return an extent transformed into the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} sourceProjection The input extent projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\r\n */\r\nexport function toUserExtent(extent, sourceProjection) {\r\n  if (!userProjection) {\r\n    return extent;\r\n  }\r\n  return transformExtent(extent, sourceProjection, userProjection);\r\n}\r\n\r\n/**\r\n * Return an extent transformed from the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\r\n */\r\nexport function fromUserExtent(extent, destProjection) {\r\n  if (!userProjection) {\r\n    return extent;\r\n  }\r\n  return transformExtent(extent, userProjection, destProjection);\r\n}\r\n\r\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in input projection units per pixel.\r\n * @param {ProjectionLike} sourceProjection The input projection.\r\n * @return {number} Resolution in user projection units per pixel.\r\n */\r\nexport function toUserResolution(resolution, sourceProjection) {\r\n  if (!userProjection) {\r\n    return resolution;\r\n  }\r\n  const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\r\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\r\n  return sourceMetersPerUnit && userMetersPerUnit\r\n    ? (resolution * sourceMetersPerUnit) / userMetersPerUnit\r\n    : resolution;\r\n}\r\n\r\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in user projection units per pixel.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {number} Resolution in destination projection units per pixel.\r\n */\r\nexport function fromUserResolution(resolution, destProjection) {\r\n  if (!userProjection) {\r\n    return resolution;\r\n  }\r\n  const destMetersPerUnit = get(destProjection).getMetersPerUnit();\r\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\r\n  return destMetersPerUnit && userMetersPerUnit\r\n    ? (resolution * userMetersPerUnit) / destMetersPerUnit\r\n    : resolution;\r\n}\r\n\r\n/**\r\n * Creates a safe coordinate transform function from a coordinate transform function.\r\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\r\n * and that coordinates exceeding the source projection validity extent's range will be\r\n * clamped to the validity range.\r\n * @param {Projection} sourceProj Source projection.\r\n * @param {Projection} destProj Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\r\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\r\n */\r\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\r\n  return function (coord) {\r\n    let transformed, worldsAway;\r\n    if (sourceProj.canWrapX()) {\r\n      const sourceExtent = sourceProj.getExtent();\r\n      const sourceExtentWidth = getWidth(sourceExtent);\r\n      coord = coord.slice(0);\r\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\r\n      if (worldsAway) {\r\n        // Move x to the real world\r\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\r\n      }\r\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\r\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\r\n      transformed = transform(coord);\r\n    } else {\r\n      transformed = transform(coord);\r\n    }\r\n    if (worldsAway && destProj.canWrapX()) {\r\n      // Move transformed coordinate back to the offset world\r\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\r\n    }\r\n    return transformed;\r\n  };\r\n}\r\n\r\n/**\r\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\r\n * by when this module is executed and should only need to be called again after\r\n * `clearAllProjections()` is called (e.g. in tests).\r\n */\r\nexport function addCommon() {\r\n  // Add transformations that don't alter coordinates to convert within set of\r\n  // projections with equal meaning.\r\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\r\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\r\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\r\n  // coordinates and back.\r\n  addEquivalentTransforms(\r\n    EPSG4326_PROJECTIONS,\r\n    EPSG3857_PROJECTIONS,\r\n    fromEPSG4326,\r\n    toEPSG4326\r\n  );\r\n}\r\n\r\naddCommon();\r\n", "/**\r\n * @module ol/geom/flat/transform\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function transform2D(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  transform,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const x = flatCoordinates[j];\r\n    const y = flatCoordinates[j + 1];\r\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\r\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} angle Angle.\r\n * @param {Array<number>} anchor Rotation anchor point.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function rotate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  angle,\r\n  anchor,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\r\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Scale the coordinates.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} sx Scale factor in the x-direction.\r\n * @param {number} sy Scale factor in the y-direction.\r\n * @param {Array<number>} anchor Scale anchor point.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function scale(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  sx,\r\n  sy,\r\n  anchor,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + sx * deltaX;\r\n    dest[i++] = anchorY + sy * deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} deltaX Delta X.\r\n * @param {number} deltaY Delta Y.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function translate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  deltaX,\r\n  deltaY,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    dest[i++] = flatCoordinates[j] + deltaX;\r\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n", "/**\r\n * @module ol/geom/Geometry\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {abstract} from '../util.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {\r\n  createEmpty,\r\n  createOrUpdateEmpty,\r\n  getHeight,\r\n  returnOrUpdate,\r\n} from '../extent.js';\r\nimport {get as getProjection, getTransform} from '../proj.js';\r\nimport {memoizeOne} from '../functions.js';\r\nimport {transform2D} from './flat/transform.js';\r\n\r\n/**\r\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\r\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\r\n * or measure ('M') coordinate is available.\r\n */\r\n\r\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\r\n * `'GeometryCollection'`, or `'Circle'`.\r\n */\r\n\r\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\r\nconst tmpTransform = createTransform();\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for vector geometries.\r\n *\r\n * To get notified of changes to the geometry, register a listener for the\r\n * generic `change` event on your geometry instance.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass Geometry extends BaseObject {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.extentRevision_ = -1;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryRevision = 0;\r\n\r\n    /**\r\n     * Get a transformed and simplified version of the geometry.\r\n     * @abstract\r\n     * @param {number} revision The geometry revision.\r\n     * @param {number} squaredTolerance Squared tolerance.\r\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n     * @return {Geometry} Simplified geometry.\r\n     */\r\n    this.simplifyTransformedInternal = memoizeOne(\r\n      (revision, squaredTolerance, transform) => {\r\n        if (!transform) {\r\n          return this.getSimplifiedGeometry(squaredTolerance);\r\n        }\r\n        const clone = this.clone();\r\n        clone.applyTransform(transform);\r\n        return clone.getSimplifiedGeometry(squaredTolerance);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  simplifyTransformed(squaredTolerance, transform) {\r\n    return this.simplifyTransformedInternal(\r\n      this.getRevision(),\r\n      squaredTolerance,\r\n      transform\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @abstract\r\n   * @return {!Geometry} Clone.\r\n   */\r\n  clone() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    const coord = this.getClosestPoint([x, y]);\r\n    return coord[0] === x && coord[1] === y;\r\n  }\r\n\r\n  /**\r\n   * Return the closest point of the geometry to the passed point as\r\n   * {@link module:ol/coordinate~Coordinate coordinate}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\r\n   * @api\r\n   */\r\n  getClosestPoint(point, closestPoint) {\r\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\r\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\r\n    return closestPoint;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this geometry includes the specified coordinate. If the\r\n   * coordinate is on the boundary of the geometry, returns false.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {boolean} Contains coordinate.\r\n   * @api\r\n   */\r\n  intersectsCoordinate(coordinate) {\r\n    return this.containsXY(coordinate[0], coordinate[1]);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the geometry.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  getExtent(extent) {\r\n    if (this.extentRevision_ != this.getRevision()) {\r\n      const extent = this.computeExtent(this.extent_);\r\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\r\n        createOrUpdateEmpty(extent);\r\n      }\r\n      this.extentRevision_ = this.getRevision();\r\n    }\r\n    return returnOrUpdate(this.extent_, extent);\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry.  For linestrings, this uses\r\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\r\n   * algorithm.  For polygons, a quantization-based\r\n   * simplification is used to preserve topology.\r\n   * @param {number} tolerance The tolerance distance for simplification.\r\n   * @return {Geometry} A new, simplified version of the original geometry.\r\n   * @api\r\n   */\r\n  simplify(tolerance) {\r\n    return this.getSimplifiedGeometry(tolerance * tolerance);\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker\r\n   * algorithm.\r\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @abstract\r\n   * @return {Type} Geometry type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @abstract\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   */\r\n  applyTransform(transformFn) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   */\r\n  intersectsExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @abstract\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Transform each coordinate of the geometry from one coordinate reference\r\n   * system to another. The geometry is modified in place.\r\n   * For example, a line will be transformed to a line and a circle to a circle.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @return {Geometry} This geometry.  Note that original geometry is\r\n   *     modified in place.\r\n   * @api\r\n   */\r\n  transform(source, destination) {\r\n    /** @type {import(\"../proj/Projection.js\").default} */\r\n    const sourceProj = getProjection(source);\r\n    const transformFn =\r\n      sourceProj.getUnits() == 'tile-pixels'\r\n        ? function (inCoordinates, outCoordinates, stride) {\r\n            const pixelExtent = sourceProj.getExtent();\r\n            const projectedExtent = sourceProj.getWorldExtent();\r\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\r\n            composeTransform(\r\n              tmpTransform,\r\n              projectedExtent[0],\r\n              projectedExtent[3],\r\n              scale,\r\n              -scale,\r\n              0,\r\n              0,\r\n              0\r\n            );\r\n            transform2D(\r\n              inCoordinates,\r\n              0,\r\n              inCoordinates.length,\r\n              stride,\r\n              tmpTransform,\r\n              outCoordinates\r\n            );\r\n            return getTransform(sourceProj, destination)(\r\n              inCoordinates,\r\n              outCoordinates,\r\n              stride\r\n            );\r\n          }\r\n        : getTransform(sourceProj, destination);\r\n    this.applyTransform(transformFn);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Geometry;\r\n", "/**\r\n * @module ol/geom/SimpleGeometry\r\n */\r\nimport Geometry from './Geometry.js';\r\nimport {abstract} from '../util.js';\r\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\r\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; only used for creating subclasses; do not instantiate\r\n * in apps, as cannot be rendered.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass SimpleGeometry extends Geometry {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./Geometry.js\").GeometryLayout}\r\n     */\r\n    this.layout = 'XY';\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.stride = 2;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromFlatCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Array<*> | null} Coordinates.\r\n   */\r\n  getCoordinates() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the first coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\r\n   * @api\r\n   */\r\n  getFirstCoordinate() {\r\n    return this.flatCoordinates.slice(0, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getFlatCoordinates() {\r\n    return this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * Return the last coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\r\n   * @api\r\n   */\r\n  getLastCoordinate() {\r\n    return this.flatCoordinates.slice(\r\n      this.flatCoordinates.length - this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\r\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\r\n   * @api\r\n   */\r\n  getLayout() {\r\n    return this.layout;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    // If squaredTolerance is negative or if we know that simplification will not\r\n    // have any effect then just return this.\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometry =\r\n      this.getSimplifiedGeometryInternal(squaredTolerance);\r\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\r\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\r\n      return simplifiedGeometry;\r\n    }\r\n    // Simplification did not actually remove any coordinates.  We now know\r\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\r\n    // than or equal to the current squaredTolerance will also not have any\r\n    // effect.  This allows us to short circuit simplification (saving CPU\r\n    // cycles) and prevents the cache of simplified geometries from filling\r\n    // up with useless identical copies of this geometry (saving memory).\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   */\r\n  setFlatCoordinates(layout, flatCoordinates) {\r\n    this.stride = getStrideForLayout(layout);\r\n    this.layout = layout;\r\n    this.flatCoordinates = flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\r\n   * @param {Array<*>} coordinates Coordinates.\r\n   * @param {number} nesting Nesting.\r\n   * @protected\r\n   */\r\n  setLayout(layout, coordinates, nesting) {\r\n    let stride;\r\n    if (layout) {\r\n      stride = getStrideForLayout(layout);\r\n    } else {\r\n      for (let i = 0; i < nesting; ++i) {\r\n        if (coordinates.length === 0) {\r\n          this.layout = 'XY';\r\n          this.stride = 2;\r\n          return;\r\n        }\r\n        coordinates = /** @type {Array<unknown>} */ (coordinates[0]);\r\n      }\r\n      stride = coordinates.length;\r\n      layout = getLayoutForStride(stride);\r\n    }\r\n    this.layout = layout;\r\n    this.stride = stride;\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   */\r\n  applyTransform(transformFn) {\r\n    if (this.flatCoordinates) {\r\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      rotate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        angle,\r\n        anchor,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    if (sy === undefined) {\r\n      sy = sx;\r\n    }\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      scale(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        sx,\r\n        sy,\r\n        anchor,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      translate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        deltaX,\r\n        deltaY,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} stride Stride.\r\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n */\r\nexport function getLayoutForStride(stride) {\r\n  let layout;\r\n  if (stride == 2) {\r\n    layout = 'XY';\r\n  } else if (stride == 3) {\r\n    layout = 'XYZ';\r\n  } else if (stride == 4) {\r\n    layout = 'XYZM';\r\n  }\r\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\r\n}\r\n\r\n/**\r\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n * @return {number} Stride.\r\n */\r\nexport function getStrideForLayout(layout) {\r\n  let stride;\r\n  if (layout == 'XY') {\r\n    stride = 2;\r\n  } else if (layout == 'XYZ' || layout == 'XYM') {\r\n    stride = 3;\r\n  } else if (layout == 'XYZM') {\r\n    stride = 4;\r\n  }\r\n  return /** @type {number} */ (stride);\r\n}\r\n\r\n/**\r\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\r\n * @param {import(\"../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed flat coordinates.\r\n */\r\nexport function transformGeom2D(simpleGeometry, transform, dest) {\r\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\r\n  if (!flatCoordinates) {\r\n    return null;\r\n  }\r\n  const stride = simpleGeometry.getStride();\r\n  return transform2D(\r\n    flatCoordinates,\r\n    0,\r\n    flatCoordinates.length,\r\n    stride,\r\n    transform,\r\n    dest\r\n  );\r\n}\r\n\r\nexport default SimpleGeometry;\r\n", "/**\r\n * @module ol/geom/flat/deflate\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\r\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\r\n    flatCoordinates[offset++] = coordinate[i];\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinates,\r\n  stride\r\n) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    const coordinate = coordinates[i];\r\n    for (let j = 0; j < stride; ++j) {\r\n      flatCoordinates[offset++] = coordinate[j];\r\n    }\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [ends] Ends.\r\n * @return {Array<number>} Ends.\r\n */\r\nexport function deflateCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatess,\r\n  stride,\r\n  ends\r\n) {\r\n  ends = ends ? ends : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\r\n    const end = deflateCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatess[j],\r\n      stride\r\n    );\r\n    ends[i++] = end;\r\n    offset = end;\r\n  }\r\n  ends.length = i;\r\n  return ends;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<number>>} [endss] Endss.\r\n * @return {Array<Array<number>>} Endss.\r\n */\r\nexport function deflateMultiCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatesss,\r\n  stride,\r\n  endss\r\n) {\r\n  endss = endss ? endss : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\r\n    const ends = deflateCoordinatesArray(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatesss[j],\r\n      stride,\r\n      endss[i]\r\n    );\r\n    if (ends.length === 0) {\r\n      ends[0] = offset;\r\n    }\r\n    endss[i++] = ends;\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  endss.length = i;\r\n  return endss;\r\n}\r\n", "/**\r\n * @module ol/geom/Circle\r\n */\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\r\nimport {deflateCoordinate} from './flat/deflate.js';\r\nimport {rotate} from './flat/transform.js';\r\n\r\n/**\r\n * @classdesc\r\n * Circle geometry.\r\n *\r\n * @api\r\n */\r\nclass Circle extends SimpleGeometry {\r\n  /**\r\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\r\n   *     For internal use, flat coordinates in combination with `layout` and no\r\n   *     `radius` are also accepted.\r\n   * @param {number} [radius] Radius in units of the projection.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(center, radius, layout) {\r\n    super();\r\n    if (layout !== undefined && radius === undefined) {\r\n      this.setFlatCoordinates(layout, center);\r\n    } else {\r\n      radius = radius ? radius : 0;\r\n      this.setCenterAndRadius(center, radius, layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Circle} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const circle = new Circle(\r\n      this.flatCoordinates.slice(),\r\n      undefined,\r\n      this.layout\r\n    );\r\n    circle.applyProperties(this);\r\n    return circle;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const dx = x - flatCoordinates[0];\r\n    const dy = y - flatCoordinates[1];\r\n    const squaredDistance = dx * dx + dy * dy;\r\n    if (squaredDistance < minSquaredDistance) {\r\n      if (squaredDistance === 0) {\r\n        for (let i = 0; i < this.stride; ++i) {\r\n          closestPoint[i] = flatCoordinates[i];\r\n        }\r\n      } else {\r\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\r\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\r\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\r\n        for (let i = 2; i < this.stride; ++i) {\r\n          closestPoint[i] = flatCoordinates[i];\r\n        }\r\n      }\r\n      closestPoint.length = this.stride;\r\n      return squaredDistance;\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const dx = x - flatCoordinates[0];\r\n    const dy = y - flatCoordinates[1];\r\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\r\n  }\r\n\r\n  /**\r\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\r\n   * @api\r\n   */\r\n  getCenter() {\r\n    return this.flatCoordinates.slice(0, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\r\n    return createOrUpdate(\r\n      flatCoordinates[0] - radius,\r\n      flatCoordinates[1] - radius,\r\n      flatCoordinates[0] + radius,\r\n      flatCoordinates[1] + radius,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the radius of the circle.\r\n   * @return {number} Radius.\r\n   * @api\r\n   */\r\n  getRadius() {\r\n    return Math.sqrt(this.getRadiusSquared_());\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {number} Radius squared.\r\n   */\r\n  getRadiusSquared_() {\r\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\r\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\r\n    return dx * dx + dy * dy;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'Circle';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    const circleExtent = this.getExtent();\r\n    if (intersects(extent, circleExtent)) {\r\n      const center = this.getCenter();\r\n\r\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\r\n        return true;\r\n      }\r\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\r\n        return true;\r\n      }\r\n\r\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\r\n   * @api\r\n   */\r\n  setCenter(center) {\r\n    const stride = this.stride;\r\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\r\n    const flatCoordinates = center.slice();\r\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\r\n    for (let i = 1; i < stride; ++i) {\r\n      flatCoordinates[stride + i] = center[i];\r\n    }\r\n    this.setFlatCoordinates(this.layout, flatCoordinates);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\r\n   * number) of the circle.\r\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\r\n   * @param {number} radius Radius.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCenterAndRadius(center, radius, layout) {\r\n    this.setLayout(layout, center, 0);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = this.flatCoordinates;\r\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\r\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\r\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\r\n      flatCoordinates[offset++] = flatCoordinates[i];\r\n    }\r\n    flatCoordinates.length = offset;\r\n    this.changed();\r\n  }\r\n\r\n  getCoordinates() {\r\n    return null;\r\n  }\r\n\r\n  setCoordinates(coordinates, layout) {}\r\n\r\n  /**\r\n   * Set the radius of the circle. The radius is in the units of the projection.\r\n   * @param {number} radius Radius.\r\n   * @api\r\n   */\r\n  setRadius(radius) {\r\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    const center = this.getCenter();\r\n    const stride = this.getStride();\r\n    this.setCenter(\r\n      rotate(center, 0, center.length, stride, angle, anchor, center)\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Transform each coordinate of the circle from one coordinate reference system\r\n * to another. The geometry is modified in place.\r\n * If you do not want the geometry modified in place, first clone() it and\r\n * then use this function on the clone.\r\n *\r\n * Internally a circle is currently represented by two points: the center of\r\n * the circle `[cx, cy]`, and the point to the right of the circle\r\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\r\n * So the resulting geometry is also a circle, and that circle does not\r\n * correspond to the shape that would be obtained by transforming every point\r\n * of the original circle.\r\n *\r\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\r\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\r\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n * @return {Circle} This geometry.  Note that original geometry is\r\n *     modified in place.\r\n * @function\r\n * @api\r\n */\r\nCircle.prototype.transform;\r\nexport default Circle;\r\n", "/**\r\n * @module ol/geom/GeometryCollection\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport Geometry from './Geometry.js';\r\nimport {\r\n  closestSquaredDistanceXY,\r\n  createOrUpdateEmpty,\r\n  extend,\r\n  getCenter,\r\n} from '../extent.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\n\r\n/**\r\n * @classdesc\r\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\r\n *\r\n * @api\r\n */\r\nclass GeometryCollection extends Geometry {\r\n  /**\r\n   * @param {Array<Geometry>} [geometries] Geometries.\r\n   */\r\n  constructor(geometries) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Geometry>}\r\n     */\r\n    this.geometries_ = geometries ? geometries : null;\r\n\r\n    /**\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.changeEventsKeys_ = [];\r\n\r\n    this.listenGeometriesChange_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenGeometriesChange_() {\r\n    this.changeEventsKeys_.forEach(unlistenByKey);\r\n    this.changeEventsKeys_.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  listenGeometriesChange_() {\r\n    if (!this.geometries_) {\r\n      return;\r\n    }\r\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\r\n      this.changeEventsKeys_.push(\r\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!GeometryCollection} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const geometryCollection = new GeometryCollection(null);\r\n    geometryCollection.setGeometries(this.geometries_);\r\n    geometryCollection.applyProperties(this);\r\n    return geometryCollection;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      minSquaredDistance = geometries[i].closestPointXY(\r\n        x,\r\n        y,\r\n        closestPoint,\r\n        minSquaredDistance\r\n      );\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].containsXY(x, y)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    createOrUpdateEmpty(extent);\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      extend(extent, geometries[i].getExtent());\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Return the geometries that make up this geometry collection.\r\n   * @return {Array<Geometry>} Geometries.\r\n   * @api\r\n   */\r\n  getGeometries() {\r\n    return cloneGeometries(this.geometries_);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */\r\n  getGeometriesArray() {\r\n    return this.geometries_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */\r\n  getGeometriesArrayRecursive() {\r\n    /** @type {Array<Geometry>} */\r\n    let geometriesArray = [];\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].getType() === this.getType()) {\r\n        geometriesArray = geometriesArray.concat(\r\n          /** @type {GeometryCollection} */ (\r\n            geometries[i]\r\n          ).getGeometriesArrayRecursive()\r\n        );\r\n      } else {\r\n        geometriesArray.push(geometries[i]);\r\n      }\r\n    }\r\n    return geometriesArray;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {GeometryCollection} Simplified GeometryCollection.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometries = [];\r\n    const geometries = this.geometries_;\r\n    let simplified = false;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      const geometry = geometries[i];\r\n      const simplifiedGeometry =\r\n        geometry.getSimplifiedGeometry(squaredTolerance);\r\n      simplifiedGeometries.push(simplifiedGeometry);\r\n      if (simplifiedGeometry !== geometry) {\r\n        simplified = true;\r\n      }\r\n    }\r\n    if (simplified) {\r\n      const simplifiedGeometryCollection = new GeometryCollection(null);\r\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\r\n      return simplifiedGeometryCollection;\r\n    }\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'GeometryCollection';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].intersectsExtent(extent)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return this.geometries_.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].rotate(angle, anchor);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].scale(sx, sy, anchor);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the geometries that make up this geometry collection.\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   * @api\r\n   */\r\n  setGeometries(geometries) {\r\n    this.setGeometriesArray(cloneGeometries(geometries));\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   */\r\n  setGeometriesArray(geometries) {\r\n    this.unlistenGeometriesChange_();\r\n    this.geometries_ = geometries;\r\n    this.listenGeometriesChange_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   */\r\n  applyTransform(transformFn) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].applyTransform(transformFn);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].translate(deltaX, deltaY);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.unlistenGeometriesChange_();\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<Geometry>} geometries Geometries.\r\n * @return {Array<Geometry>} Cloned geometries.\r\n */\r\nfunction cloneGeometries(geometries) {\r\n  const clonedGeometries = [];\r\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n    clonedGeometries.push(geometries[i].clone());\r\n  }\r\n  return clonedGeometries;\r\n}\r\n\r\nexport default GeometryCollection;\r\n", "/**\r\n * @module ol/geom/flat/closest\r\n */\r\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\r\n\r\n/**\r\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\r\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\r\n * dimensions are linearly interpolated.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset1 Offset 1.\r\n * @param {number} offset2 Offset 2.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n */\r\nfunction assignClosest(\r\n  flatCoordinates,\r\n  offset1,\r\n  offset2,\r\n  stride,\r\n  x,\r\n  y,\r\n  closestPoint\r\n) {\r\n  const x1 = flatCoordinates[offset1];\r\n  const y1 = flatCoordinates[offset1 + 1];\r\n  const dx = flatCoordinates[offset2] - x1;\r\n  const dy = flatCoordinates[offset2 + 1] - y1;\r\n  let offset;\r\n  if (dx === 0 && dy === 0) {\r\n    offset = offset1;\r\n  } else {\r\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\r\n    if (t > 1) {\r\n      offset = offset2;\r\n    } else if (t > 0) {\r\n      for (let i = 0; i < stride; ++i) {\r\n        closestPoint[i] = lerp(\r\n          flatCoordinates[offset1 + i],\r\n          flatCoordinates[offset2 + i],\r\n          t\r\n        );\r\n      }\r\n      closestPoint.length = stride;\r\n      return;\r\n    } else {\r\n      offset = offset1;\r\n    }\r\n  }\r\n  for (let i = 0; i < stride; ++i) {\r\n    closestPoint[i] = flatCoordinates[offset + i];\r\n  }\r\n  closestPoint.length = stride;\r\n}\r\n\r\n/**\r\n * Return the squared of the largest distance between any pair of consecutive\r\n * coordinates.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  for (offset += stride; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\r\n    if (squaredDelta > max) {\r\n      max = squaredDelta;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function arrayMaxSquaredDelta(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  max\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\r\n    offset = end;\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function multiArrayMaxSquaredDelta(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  max\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  tmpPoint\r\n) {\r\n  if (offset == end) {\r\n    return minSquaredDistance;\r\n  }\r\n  let i, squaredDistance;\r\n  if (maxDelta === 0) {\r\n    // All points are identical, so just test the first point.\r\n    squaredDistance = squaredDx(\r\n      x,\r\n      y,\r\n      flatCoordinates[offset],\r\n      flatCoordinates[offset + 1]\r\n    );\r\n    if (squaredDistance < minSquaredDistance) {\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = flatCoordinates[offset + i];\r\n      }\r\n      closestPoint.length = stride;\r\n      return squaredDistance;\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\r\n  let index = offset + stride;\r\n  while (index < end) {\r\n    assignClosest(\r\n      flatCoordinates,\r\n      index - stride,\r\n      index,\r\n      stride,\r\n      x,\r\n      y,\r\n      tmpPoint\r\n    );\r\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\r\n    if (squaredDistance < minSquaredDistance) {\r\n      minSquaredDistance = squaredDistance;\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = tmpPoint[i];\r\n      }\r\n      closestPoint.length = stride;\r\n      index += stride;\r\n    } else {\r\n      // Skip ahead multiple points, because we know that all the skipped\r\n      // points cannot be any closer than the closest point we have found so\r\n      // far.  We know this because we know how close the current point is, how\r\n      // close the closest point we have found so far is, and the maximum\r\n      // distance between consecutive points.  For example, if we're currently\r\n      // at distance 10, the best we've found so far is 3, and that the maximum\r\n      // distance between consecutive points is 2, then we'll need to skip at\r\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\r\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\r\n      // always advance at least one point, to avoid an infinite loop.\r\n      index +=\r\n        stride *\r\n        Math.max(\r\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\r\n            maxDelta) |\r\n            0,\r\n          1\r\n        );\r\n    }\r\n  }\r\n  if (isRing) {\r\n    // Check the closing segment.\r\n    assignClosest(\r\n      flatCoordinates,\r\n      end - stride,\r\n      offset,\r\n      stride,\r\n      x,\r\n      y,\r\n      tmpPoint\r\n    );\r\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\r\n    if (squaredDistance < minSquaredDistance) {\r\n      minSquaredDistance = squaredDistance;\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = tmpPoint[i];\r\n      }\r\n      closestPoint.length = stride;\r\n    }\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestArrayPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  tmpPoint\r\n) {\r\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    minSquaredDistance = assignClosestPoint(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      maxDelta,\r\n      isRing,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n      tmpPoint\r\n    );\r\n    offset = end;\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestMultiArrayPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  tmpPoint\r\n) {\r\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    minSquaredDistance = assignClosestArrayPoint(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      maxDelta,\r\n      isRing,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n      tmpPoint\r\n    );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/simplify\r\n */\r\n// Based on simplify-js https://github.com/mourner/simplify-js\r\n// Copyright (c) 2012, Vladimir Agafonkin\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//    1. Redistributions of source code must retain the above copyright notice,\r\n//       this list of conditions and the following disclaimer.\r\n//\r\n//    2. Redistributions in binary form must reproduce the above copyright\r\n//       notice, this list of conditions and the following disclaimer in the\r\n//       documentation and/or other materials provided with the distribution.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n\r\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {boolean} highQuality Highest quality.\r\n * @param {Array<number>} [simplifiedFlatCoordinates] Simplified flat\r\n *     coordinates.\r\n * @return {Array<number>} Simplified line string.\r\n */\r\nexport function simplifyLineString(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  squaredTolerance,\r\n  highQuality,\r\n  simplifiedFlatCoordinates\r\n) {\r\n  simplifiedFlatCoordinates =\r\n    simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\r\n  if (!highQuality) {\r\n    end = radialDistance(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0\r\n    );\r\n    flatCoordinates = simplifiedFlatCoordinates;\r\n    offset = 0;\r\n    stride = 2;\r\n  }\r\n  simplifiedFlatCoordinates.length = douglasPeucker(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    squaredTolerance,\r\n    simplifiedFlatCoordinates,\r\n    0\r\n  );\r\n  return simplifiedFlatCoordinates;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function douglasPeucker(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset\r\n) {\r\n  const n = (end - offset) / stride;\r\n  if (n < 3) {\r\n    for (; offset < end; offset += stride) {\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + 1];\r\n    }\r\n    return simplifiedOffset;\r\n  }\r\n  /** @type {Array<number>} */\r\n  const markers = new Array(n);\r\n  markers[0] = 1;\r\n  markers[n - 1] = 1;\r\n  /** @type {Array<number>} */\r\n  const stack = [offset, end - stride];\r\n  let index = 0;\r\n  while (stack.length > 0) {\r\n    const last = stack.pop();\r\n    const first = stack.pop();\r\n    let maxSquaredDistance = 0;\r\n    const x1 = flatCoordinates[first];\r\n    const y1 = flatCoordinates[first + 1];\r\n    const x2 = flatCoordinates[last];\r\n    const y2 = flatCoordinates[last + 1];\r\n    for (let i = first + stride; i < last; i += stride) {\r\n      const x = flatCoordinates[i];\r\n      const y = flatCoordinates[i + 1];\r\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\r\n      if (squaredDistance > maxSquaredDistance) {\r\n        index = i;\r\n        maxSquaredDistance = squaredDistance;\r\n      }\r\n    }\r\n    if (maxSquaredDistance > squaredTolerance) {\r\n      markers[(index - offset) / stride] = 1;\r\n      if (first + stride < index) {\r\n        stack.push(first, index);\r\n      }\r\n      if (index + stride < last) {\r\n        stack.push(index, last);\r\n      }\r\n    }\r\n  }\r\n  for (let i = 0; i < n; ++i) {\r\n    if (markers[i]) {\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + i * stride];\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + i * stride + 1];\r\n    }\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<number>} simplifiedEnds Simplified ends.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function douglasPeuckerArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEnds\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    simplifiedOffset = douglasPeucker(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset\r\n    );\r\n    simplifiedEnds.push(simplifiedOffset);\r\n    offset = end;\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function douglasPeuckerMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEndss\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedOffset = douglasPeuckerArray(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset,\r\n      simplifiedEnds\r\n    );\r\n    simplifiedEndss.push(simplifiedEnds);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function radialDistance(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset\r\n) {\r\n  if (end <= offset + stride) {\r\n    // zero or one point, no simplification possible, so copy and return\r\n    for (; offset < end; offset += stride) {\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + 1];\r\n    }\r\n    return simplifiedOffset;\r\n  }\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  // copy first point\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\r\n  let x2 = x1;\r\n  let y2 = y1;\r\n  for (offset += stride; offset < end; offset += stride) {\r\n    x2 = flatCoordinates[offset];\r\n    y2 = flatCoordinates[offset + 1];\r\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\r\n      // copy point at offset\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n      x1 = x2;\r\n      y1 = y2;\r\n    }\r\n  }\r\n  if (x2 != x1 || y2 != y1) {\r\n    // copy last point\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {number} value Value.\r\n * @param {number} tolerance Tolerance.\r\n * @return {number} Rounded value.\r\n */\r\nexport function snap(value, tolerance) {\r\n  return tolerance * Math.round(value / tolerance);\r\n}\r\n\r\n/**\r\n * Simplifies a line string using an algorithm designed by Tim Schaub.\r\n * Coordinates are snapped to the nearest value in a virtual grid and\r\n * consecutive duplicate coordinates are discarded.  This effectively preserves\r\n * topology as the simplification of any subsection of a line string is\r\n * independent of the rest of the line string.  This means that, for examples,\r\n * the common edge between two polygons will be simplified to the same line\r\n * string independently in both polygons.  This implementation uses a single\r\n * pass over the coordinates and eliminates intermediate collinear points.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} tolerance Tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function quantize(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  tolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset\r\n) {\r\n  // do nothing if the line is empty\r\n  if (offset == end) {\r\n    return simplifiedOffset;\r\n  }\r\n  // snap the first coordinate (P1)\r\n  let x1 = snap(flatCoordinates[offset], tolerance);\r\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\r\n  offset += stride;\r\n  // add the first coordinate to the output\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\r\n  // find the next coordinate that does not snap to the same value as the first\r\n  // coordinate (P2)\r\n  let x2, y2;\r\n  do {\r\n    x2 = snap(flatCoordinates[offset], tolerance);\r\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\r\n    offset += stride;\r\n    if (offset == end) {\r\n      // all coordinates snap to the same value, the line collapses to a point\r\n      // push the last snapped value anyway to ensure that the output contains\r\n      // at least two points\r\n      // FIXME should we really return at least two points anyway?\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n      return simplifiedOffset;\r\n    }\r\n  } while (x2 == x1 && y2 == y1);\r\n  while (offset < end) {\r\n    // snap the next coordinate (P3)\r\n    const x3 = snap(flatCoordinates[offset], tolerance);\r\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\r\n    offset += stride;\r\n    // skip P3 if it is equal to P2\r\n    if (x3 == x2 && y3 == y2) {\r\n      continue;\r\n    }\r\n    // calculate the delta between P1 and P2\r\n    const dx1 = x2 - x1;\r\n    const dy1 = y2 - y1;\r\n    // calculate the delta between P3 and P1\r\n    const dx2 = x3 - x1;\r\n    const dy2 = y3 - y1;\r\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\r\n    // P1 in the same direction then P2 is on the straight line between P1 and\r\n    // P3\r\n    if (\r\n      dx1 * dy2 == dy1 * dx2 &&\r\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\r\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\r\n    ) {\r\n      // discard P2 and set P2 = P3\r\n      x2 = x3;\r\n      y2 = y3;\r\n      continue;\r\n    }\r\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\r\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\r\n    // and continue with P1 = P2 and P2 = P3\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n    x1 = x2;\r\n    y1 = y2;\r\n    x2 = x3;\r\n    y2 = y3;\r\n  }\r\n  // add the last point (P2)\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} tolerance Tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<number>} simplifiedEnds Simplified ends.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function quantizeArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  tolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEnds\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    simplifiedOffset = quantize(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      tolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset\r\n    );\r\n    simplifiedEnds.push(simplifiedOffset);\r\n    offset = end;\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} tolerance Tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function quantizeMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  tolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEndss\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedOffset = quantizeArray(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      tolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset,\r\n      simplifiedEnds\r\n    );\r\n    simplifiedEndss.push(simplifiedEnds);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/inflate\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\r\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\r\n */\r\nexport function inflateCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  coordinates\r\n) {\r\n  coordinates = coordinates !== undefined ? coordinates : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\r\n  }\r\n  coordinates.length = i;\r\n  return coordinates;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [coordinatess] Coordinatess.\r\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\r\n */\r\nexport function inflateCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  coordinatess\r\n) {\r\n  coordinatess = coordinatess !== undefined ? coordinatess : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\r\n    const end = ends[j];\r\n    coordinatess[i++] = inflateCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      coordinatess[i]\r\n    );\r\n    offset = end;\r\n  }\r\n  coordinatess.length = i;\r\n  return coordinatess;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [coordinatesss]\r\n *     Coordinatesss.\r\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\r\n */\r\nexport function inflateMultiCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  coordinatesss\r\n) {\r\n  coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\r\n    const ends = endss[j];\r\n    coordinatesss[i++] =\r\n      ends.length === 1 && ends[0] === offset\r\n        ? []\r\n        : inflateCoordinatesArray(\r\n            flatCoordinates,\r\n            offset,\r\n            ends,\r\n            stride,\r\n            coordinatesss[i]\r\n          );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  coordinatesss.length = i;\r\n  return coordinatesss;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/area\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRing(flatCoordinates, offset, end, stride) {\r\n  let twiceArea = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    twiceArea += y1 * x2 - x1 * y2;\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return twiceArea / 2;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRings(flatCoordinates, offset, ends, stride) {\r\n  let area = 0;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    area += linearRing(flatCoordinates, offset, end, stride);\r\n    offset = end;\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\r\n  let area = 0;\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    area += linearRings(flatCoordinates, offset, ends, stride);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return area;\r\n}\r\n", "/**\r\n * @module ol/geom/LinearRing\r\n */\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {douglasPeucker} from './flat/simplify.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\nimport {linearRing as linearRingArea} from './flat/area.js';\r\n\r\n/**\r\n * @classdesc\r\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\r\n * on its own.\r\n *\r\n * @api\r\n */\r\nclass LinearRing extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        layout\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LinearRing} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        maxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.flatCoordinates.length,\r\n          this.stride,\r\n          0\r\n        )\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the linear ring on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingArea(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the linear ring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LinearRing} Simplified LinearRing.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    simplifiedFlatCoordinates.length = douglasPeucker(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0\r\n    );\r\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'LinearRing';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the linear ring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default LinearRing;\r\n", "/**\r\n * @module ol/geom/flat/segments\r\n */\r\n\r\n/**\r\n * This function calls `callback` for each segment of the flat coordinates\r\n * array. If the callback returns a truthy value the function returns that\r\n * value immediately. Otherwise the function returns `false`.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\r\n *     called for each segment.\r\n * @return {T|boolean} Value.\r\n * @template T\r\n */\r\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\r\n  let ret;\r\n  offset += stride;\r\n  for (; offset < end; offset += stride) {\r\n    ret = callback(\r\n      flatCoordinates.slice(offset - stride, offset),\r\n      flatCoordinates.slice(offset, offset + stride)\r\n    );\r\n    if (ret) {\r\n      return ret;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/interpolate\r\n */\r\nimport {binarySearch} from '../../array.js';\r\nimport {lerp} from '../../math.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} fraction Fraction.\r\n * @param {Array<number>} [dest] Destination.\r\n * @param {number} [dimension] Destination dimension (default is `2`)\r\n * @return {Array<number>} Destination.\r\n */\r\nexport function interpolatePoint(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  fraction,\r\n  dest,\r\n  dimension\r\n) {\r\n  let o, t;\r\n  const n = (end - offset) / stride;\r\n  if (n === 1) {\r\n    o = offset;\r\n  } else if (n === 2) {\r\n    o = offset;\r\n    t = fraction;\r\n  } else if (n !== 0) {\r\n    let x1 = flatCoordinates[offset];\r\n    let y1 = flatCoordinates[offset + 1];\r\n    let length = 0;\r\n    const cumulativeLengths = [0];\r\n    for (let i = offset + stride; i < end; i += stride) {\r\n      const x2 = flatCoordinates[i];\r\n      const y2 = flatCoordinates[i + 1];\r\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n      cumulativeLengths.push(length);\r\n      x1 = x2;\r\n      y1 = y2;\r\n    }\r\n    const target = fraction * length;\r\n    const index = binarySearch(cumulativeLengths, target);\r\n    if (index < 0) {\r\n      t =\r\n        (target - cumulativeLengths[-index - 2]) /\r\n        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\r\n      o = offset + (-index - 2) * stride;\r\n    } else {\r\n      o = offset + index * stride;\r\n    }\r\n  }\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  dest = dest ? dest : new Array(dimension);\r\n  for (let i = 0; i < dimension; ++i) {\r\n    dest[i] =\r\n      o === undefined\r\n        ? NaN\r\n        : t === undefined\r\n        ? flatCoordinates[o + i]\r\n        : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} m M.\r\n * @param {boolean} extrapolate Extrapolate.\r\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\r\n */\r\nexport function lineStringCoordinateAtM(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  m,\r\n  extrapolate\r\n) {\r\n  if (end == offset) {\r\n    return null;\r\n  }\r\n  let coordinate;\r\n  if (m < flatCoordinates[offset + stride - 1]) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(offset, offset + stride);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  if (flatCoordinates[end - 1] < m) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(end - stride, end);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  // FIXME use O(1) search\r\n  if (m == flatCoordinates[offset + stride - 1]) {\r\n    return flatCoordinates.slice(offset, offset + stride);\r\n  }\r\n  let lo = offset / stride;\r\n  let hi = end / stride;\r\n  while (lo < hi) {\r\n    const mid = (lo + hi) >> 1;\r\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 1;\r\n    }\r\n  }\r\n  const m0 = flatCoordinates[lo * stride - 1];\r\n  if (m == m0) {\r\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\r\n  }\r\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\r\n  const t = (m - m0) / (m1 - m0);\r\n  coordinate = [];\r\n  for (let i = 0; i < stride - 1; ++i) {\r\n    coordinate.push(\r\n      lerp(\r\n        flatCoordinates[(lo - 1) * stride + i],\r\n        flatCoordinates[lo * stride + i],\r\n        t\r\n      )\r\n    );\r\n  }\r\n  coordinate.push(m);\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} m M.\r\n * @param {boolean} extrapolate Extrapolate.\r\n * @param {boolean} interpolate Interpolate.\r\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\r\n */\r\nexport function lineStringsCoordinateAtM(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  m,\r\n  extrapolate,\r\n  interpolate\r\n) {\r\n  if (interpolate) {\r\n    return lineStringCoordinateAtM(\r\n      flatCoordinates,\r\n      offset,\r\n      ends[ends.length - 1],\r\n      stride,\r\n      m,\r\n      extrapolate\r\n    );\r\n  }\r\n  let coordinate;\r\n  if (m < flatCoordinates[stride - 1]) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(0, stride);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    if (offset == end) {\r\n      continue;\r\n    }\r\n    if (m < flatCoordinates[offset + stride - 1]) {\r\n      return null;\r\n    }\r\n    if (m <= flatCoordinates[end - 1]) {\r\n      return lineStringCoordinateAtM(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        m,\r\n        false\r\n      );\r\n    }\r\n    offset = end;\r\n  }\r\n  return null;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/contains\r\n */\r\nimport {forEachCorner} from '../../extent.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} Contains extent.\r\n */\r\nexport function linearRingContainsExtent(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent\r\n) {\r\n  const outside = forEachCorner(\r\n    extent,\r\n    /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n     * @return {boolean} Contains (x, y).\r\n     */\r\n    function (coordinate) {\r\n      return !linearRingContainsXY(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        coordinate[0],\r\n        coordinate[1]\r\n      );\r\n    }\r\n  );\r\n  return !outside;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  x,\r\n  y\r\n) {\r\n  // https://geomalgorithms.com/a03-_inclusion.html\r\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\r\n  // This code may be freely used and modified for any purpose\r\n  // providing that this copyright notice is included with it.\r\n  // SoftSurfer makes no warranty for this code, and cannot be held\r\n  // liable for any real or imagined damage resulting from its use.\r\n  // Users of this code must verify correctness for their application.\r\n  let wn = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    if (y1 <= y) {\r\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\r\n        wn++;\r\n      }\r\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\r\n      wn--;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return wn !== 0;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingsContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  x,\r\n  y\r\n) {\r\n  if (ends.length === 0) {\r\n    return false;\r\n  }\r\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\r\n    return false;\r\n  }\r\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingssContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  x,\r\n  y\r\n) {\r\n  if (endss.length === 0) {\r\n    return false;\r\n  }\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\r\n      return true;\r\n    }\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return false;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/intersectsextent\r\n */\r\nimport {\r\n  containsExtent,\r\n  createEmpty,\r\n  extendFlatCoordinates,\r\n  intersects,\r\n  intersectsSegment,\r\n} from '../../extent.js';\r\nimport {forEach as forEachSegment} from './segments.js';\r\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLineString(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent\r\n) {\r\n  const coordinatesExtent = extendFlatCoordinates(\r\n    createEmpty(),\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride\r\n  );\r\n  if (!intersects(extent, coordinatesExtent)) {\r\n    return false;\r\n  }\r\n  if (containsExtent(extent, coordinatesExtent)) {\r\n    return true;\r\n  }\r\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\r\n    return true;\r\n  }\r\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\r\n    return true;\r\n  }\r\n  return forEachSegment(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\r\n     * @return {boolean} `true` if the segment and the extent intersect,\r\n     *     `false` otherwise.\r\n     */\r\n    function (point1, point2) {\r\n      return intersectsSegment(extent, point1, point2);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLineStringArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  extent\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\r\n    ) {\r\n      return true;\r\n    }\r\n    offset = ends[i];\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRing(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent\r\n) {\r\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[0],\r\n      extent[1]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[0],\r\n      extent[3]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[2],\r\n      extent[1]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[2],\r\n      extent[3]\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRingArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  extent\r\n) {\r\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\r\n    return false;\r\n  }\r\n  if (ends.length === 1) {\r\n    return true;\r\n  }\r\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      linearRingContainsExtent(\r\n        flatCoordinates,\r\n        ends[i - 1],\r\n        ends[i],\r\n        stride,\r\n        extent\r\n      )\r\n    ) {\r\n      if (\r\n        !intersectsLineString(\r\n          flatCoordinates,\r\n          ends[i - 1],\r\n          ends[i],\r\n          stride,\r\n          extent\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRingMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  extent\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (\r\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\r\n    ) {\r\n      return true;\r\n    }\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return false;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/length\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Length.\r\n */\r\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  let length = 0;\r\n  for (let i = offset + stride; i < end; i += stride) {\r\n    const x2 = flatCoordinates[i];\r\n    const y2 = flatCoordinates[i + 1];\r\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return length;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Perimeter.\r\n */\r\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\r\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\r\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\r\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\r\n  perimeter += Math.sqrt(dx * dx + dy * dy);\r\n  return perimeter;\r\n}\r\n", "/**\r\n * @module ol/geom/LineString\r\n */\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {douglasPeucker} from './flat/simplify.js';\r\nimport {extend} from '../array.js';\r\nimport {forEach as forEachSegment} from './flat/segments.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\r\nimport {intersectsLineString} from './flat/intersectsextent.js';\r\nimport {lineStringLength} from './flat/length.js';\r\n\r\n/**\r\n * @classdesc\r\n * Linestring geometry.\r\n *\r\n * @api\r\n */\r\nclass LineString extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\r\n    this.flatMidpoint_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatMidpointRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        layout\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed coordinate to the coordinates of the linestring.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @api\r\n   */\r\n  appendCoordinate(coordinate) {\r\n    extend(this.flatCoordinates, coordinate);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LineString} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const lineString = new LineString(\r\n      this.flatCoordinates.slice(),\r\n      this.layout\r\n    );\r\n    lineString.applyProperties(this);\r\n    return lineString;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        maxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.flatCoordinates.length,\r\n          this.stride,\r\n          0\r\n        )\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      false,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Iterate over each segment, calling the provided callback.\r\n   * If the callback returns a truthy value the function returns that\r\n   * value immediately. Otherwise the function returns `false`.\r\n   *\r\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\r\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\r\n   * @return {T|boolean} Value.\r\n   * @template T,S\r\n   * @api\r\n   */\r\n  forEachSegment(callback) {\r\n    return forEachSegment(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\r\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\r\n   * @api\r\n   */\r\n  getCoordinateAtM(m, extrapolate) {\r\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\r\n      return null;\r\n    }\r\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\r\n    return lineStringCoordinateAtM(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      m,\r\n      extrapolate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the linestring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate at the provided fraction along the linestring.\r\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\r\n   * linestring and 1 is the end.\r\n   * @param {number} fraction Fraction.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\r\n   *     be modified. If not provided, a new coordinate will be returned.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\r\n   * @api\r\n   */\r\n  getCoordinateAt(fraction, dest) {\r\n    return interpolatePoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      fraction,\r\n      dest,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the length of the linestring on projected plane.\r\n   * @return {number} Length (on projected plane).\r\n   * @api\r\n   */\r\n  getLength() {\r\n    return lineStringLength(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */\r\n  getFlatMidpoint() {\r\n    if (this.flatMidpointRevision_ != this.getRevision()) {\r\n      this.flatMidpoint_ = this.getCoordinateAt(\r\n        0.5,\r\n        this.flatMidpoint_ ?? undefined\r\n      );\r\n      this.flatMidpointRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.flatMidpoint_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LineString} Simplified LineString.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    simplifiedFlatCoordinates.length = douglasPeucker(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0\r\n    );\r\n    return new LineString(simplifiedFlatCoordinates, 'XY');\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'LineString';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLineString(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the linestring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default LineString;\r\n", "/**\r\n * @module ol/geom/MultiLineString\r\n */\r\nimport LineString from './LineString.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport {deflateCoordinatesArray} from './flat/deflate.js';\r\nimport {douglasPeuckerArray} from './flat/simplify.js';\r\nimport {extend} from '../array.js';\r\nimport {inflateCoordinatesArray} from './flat/inflate.js';\r\nimport {\r\n  interpolatePoint,\r\n  lineStringsCoordinateAtM,\r\n} from './flat/interpolate.js';\r\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\r\n\r\n/**\r\n * @classdesc\r\n * Multi-linestring geometry.\r\n *\r\n * @api\r\n */\r\nclass MultiLineString extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\r\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\r\n   *     combination with `layout` and `ends` are also accepted.)\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\r\n   */\r\n  constructor(coordinates, layout, ends) {\r\n    super();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.ends_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (Array.isArray(coordinates[0])) {\r\n      this.setCoordinates(\r\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\r\n          coordinates\r\n        ),\r\n        layout\r\n      );\r\n    } else if (layout !== undefined && ends) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n      this.ends_ = ends;\r\n    } else {\r\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\r\n      /** @type {Array<number>} */\r\n      const flatCoordinates = [];\r\n      const ends = [];\r\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\r\n        const lineString = lineStrings[i];\r\n        extend(flatCoordinates, lineString.getFlatCoordinates());\r\n        ends.push(flatCoordinates.length);\r\n      }\r\n      const layout =\r\n        lineStrings.length === 0\r\n          ? this.getLayout()\r\n          : lineStrings[0].getLayout();\r\n      this.setFlatCoordinates(layout, flatCoordinates);\r\n      this.ends_ = ends;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed linestring to the multilinestring.\r\n   * @param {LineString} lineString LineString.\r\n   * @api\r\n   */\r\n  appendLineString(lineString) {\r\n    extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\r\n    this.ends_.push(this.flatCoordinates.length);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiLineString} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const multiLineString = new MultiLineString(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n      this.ends_.slice()\r\n    );\r\n    multiLineString.applyProperties(this);\r\n    return multiLineString;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        arrayMaxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.ends_,\r\n          this.stride,\r\n          0\r\n        )\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestArrayPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      false,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * `interpolate` controls interpolation between consecutive LineStrings\r\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\r\n   * will be linearly interpolated between the last coordinate of one LineString\r\n   * and the first coordinate of the next LineString.  If `interpolate` is\r\n   * `false` then the function will return `null` for Ms falling between\r\n   * LineStrings.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\r\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\r\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\r\n   * @api\r\n   */\r\n  getCoordinateAtM(m, extrapolate, interpolate) {\r\n    if (\r\n      (this.layout != 'XYM' && this.layout != 'XYZM') ||\r\n      this.flatCoordinates.length === 0\r\n    ) {\r\n      return null;\r\n    }\r\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\r\n    interpolate = interpolate !== undefined ? interpolate : false;\r\n    return lineStringsCoordinateAtM(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      m,\r\n      extrapolate,\r\n      interpolate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the multilinestring.\r\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * Return the linestring at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {LineString} LineString.\r\n   * @api\r\n   */\r\n  getLineString(index) {\r\n    if (index < 0 || this.ends_.length <= index) {\r\n      return null;\r\n    }\r\n    return new LineString(\r\n      this.flatCoordinates.slice(\r\n        index === 0 ? 0 : this.ends_[index - 1],\r\n        this.ends_[index]\r\n      ),\r\n      this.layout\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the linestrings of this multilinestring.\r\n   * @return {Array<LineString>} LineStrings.\r\n   * @api\r\n   */\r\n  getLineStrings() {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const ends = this.ends_;\r\n    const layout = this.layout;\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const lineString = new LineString(\r\n        flatCoordinates.slice(offset, end),\r\n        layout\r\n      );\r\n      lineStrings.push(lineString);\r\n      offset = end;\r\n    }\r\n    return lineStrings;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */\r\n  getFlatMidpoints() {\r\n    /** @type {Array<number>} */\r\n    const midpoints = [];\r\n    const flatCoordinates = this.flatCoordinates;\r\n    let offset = 0;\r\n    const ends = this.ends_;\r\n    const stride = this.stride;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const midpoint = interpolatePoint(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        0.5\r\n      );\r\n      extend(midpoints, midpoint);\r\n      offset = end;\r\n    }\r\n    return midpoints;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {MultiLineString} Simplified MultiLineString.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n      simplifiedEnds\r\n    );\r\n    return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'MultiLineString';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLineStringArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the multilinestring.\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 2);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const ends = deflateCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n      this.ends_\r\n    );\r\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default MultiLineString;\r\n", "/**\r\n * @module ol/geom/Point\r\n */\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\r\nimport {deflateCoordinate} from './flat/deflate.js';\r\nimport {squaredDistance as squaredDx} from '../math.js';\r\n\r\n/**\r\n * @classdesc\r\n * Point geometry.\r\n *\r\n * @api\r\n */\r\nclass Point extends SimpleGeometry {\r\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n    this.setCoordinates(coordinates, layout);\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Point} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\r\n    point.applyProperties(this);\r\n    return point;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const squaredDistance = squaredDx(\r\n      x,\r\n      y,\r\n      flatCoordinates[0],\r\n      flatCoordinates[1]\r\n    );\r\n    if (squaredDistance < minSquaredDistance) {\r\n      const stride = this.stride;\r\n      for (let i = 0; i < stride; ++i) {\r\n        closestPoint[i] = flatCoordinates[i];\r\n      }\r\n      closestPoint.length = stride;\r\n      return squaredDistance;\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate of the point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return this.flatCoordinates.slice();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'Point';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\r\n  }\r\n\r\n  /**\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 0);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinate(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default Point;\r\n", "/**\r\n * @module ol/geom/MultiPoint\r\n */\r\nimport Point from './Point.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {extend} from '../array.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\nimport {squaredDistance as squaredDx} from '../math.js';\r\n\r\n/**\r\n * @classdesc\r\n * Multi-point geometry.\r\n *\r\n * @api\r\n */\r\nclass MultiPoint extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n    if (layout && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        layout\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed point to this multipoint.\r\n   * @param {Point} point Point.\r\n   * @api\r\n   */\r\n  appendPoint(point) {\r\n    extend(this.flatCoordinates, point.getFlatCoordinates());\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiPoint} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const multiPoint = new MultiPoint(\r\n      this.flatCoordinates.slice(),\r\n      this.layout\r\n    );\r\n    multiPoint.applyProperties(this);\r\n    return multiPoint;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const stride = this.stride;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      const squaredDistance = squaredDx(\r\n        x,\r\n        y,\r\n        flatCoordinates[i],\r\n        flatCoordinates[i + 1]\r\n      );\r\n      if (squaredDistance < minSquaredDistance) {\r\n        minSquaredDistance = squaredDistance;\r\n        for (let j = 0; j < stride; ++j) {\r\n          closestPoint[j] = flatCoordinates[i + j];\r\n        }\r\n        closestPoint.length = stride;\r\n      }\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the multipoint.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the point at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {Point} Point.\r\n   * @api\r\n   */\r\n  getPoint(index) {\r\n    const n = this.flatCoordinates.length / this.stride;\r\n    if (index < 0 || n <= index) {\r\n      return null;\r\n    }\r\n    return new Point(\r\n      this.flatCoordinates.slice(\r\n        index * this.stride,\r\n        (index + 1) * this.stride\r\n      ),\r\n      this.layout\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the points of this multipoint.\r\n   * @return {Array<Point>} Points.\r\n   * @api\r\n   */\r\n  getPoints() {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const layout = this.layout;\r\n    const stride = this.stride;\r\n    /** @type {Array<Point>} */\r\n    const points = [];\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\r\n      points.push(point);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'MultiPoint';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const stride = this.stride;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      const x = flatCoordinates[i];\r\n      const y = flatCoordinates[i + 1];\r\n      if (containsXY(extent, x, y)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the multipoint.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default MultiPoint;\r\n", "/**\r\n * @module ol/geom/flat/interiorpoint\r\n */\r\nimport {ascending} from '../../array.js';\r\nimport {linearRingsContainsXY} from './contains.js';\r\n\r\n/**\r\n * Calculates a point that is likely to lie in the interior of the linear rings.\r\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} flatCenters Flat centers.\r\n * @param {number} flatCentersOffset Flat center offset.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\r\n * length of the horizontal intersection that the point belongs to.\r\n */\r\nexport function getInteriorPointOfArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  flatCenters,\r\n  flatCentersOffset,\r\n  dest\r\n) {\r\n  let i, ii, x, x1, x2, y1, y2;\r\n  const y = flatCenters[flatCentersOffset + 1];\r\n  /** @type {Array<number>} */\r\n  const intersections = [];\r\n  // Calculate intersections with the horizontal line\r\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\r\n    const end = ends[r];\r\n    x1 = flatCoordinates[end - stride];\r\n    y1 = flatCoordinates[end - stride + 1];\r\n    for (i = offset; i < end; i += stride) {\r\n      x2 = flatCoordinates[i];\r\n      y2 = flatCoordinates[i + 1];\r\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\r\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\r\n        intersections.push(x);\r\n      }\r\n      x1 = x2;\r\n      y1 = y2;\r\n    }\r\n  }\r\n  // Find the longest segment of the horizontal line that has its center point\r\n  // inside the linear ring.\r\n  let pointX = NaN;\r\n  let maxSegmentLength = -Infinity;\r\n  intersections.sort(ascending);\r\n  x1 = intersections[0];\r\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\r\n    x2 = intersections[i];\r\n    const segmentLength = Math.abs(x2 - x1);\r\n    if (segmentLength > maxSegmentLength) {\r\n      x = (x1 + x2) / 2;\r\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\r\n        pointX = x;\r\n        maxSegmentLength = segmentLength;\r\n      }\r\n    }\r\n    x1 = x2;\r\n  }\r\n  if (isNaN(pointX)) {\r\n    // There is no horizontal line that has its center point inside the linear\r\n    // ring.  Use the center of the the linear ring's extent.\r\n    pointX = flatCenters[flatCentersOffset];\r\n  }\r\n  if (dest) {\r\n    dest.push(pointX, y, maxSegmentLength);\r\n    return dest;\r\n  }\r\n  return [pointX, y, maxSegmentLength];\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} flatCenters Flat centers.\r\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\r\n * length of the horizontal intersection that the point belongs to.\r\n */\r\nexport function getInteriorPointsOfMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  flatCenters\r\n) {\r\n  /** @type {Array<number>} */\r\n  let interiorPoints = [];\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    interiorPoints = getInteriorPointOfArray(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      flatCenters,\r\n      2 * i,\r\n      interiorPoints\r\n    );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return interiorPoints;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/reverse\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n */\r\nexport function coordinates(flatCoordinates, offset, end, stride) {\r\n  while (offset < end - stride) {\r\n    for (let i = 0; i < stride; ++i) {\r\n      const tmp = flatCoordinates[offset + i];\r\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\r\n      flatCoordinates[end - stride + i] = tmp;\r\n    }\r\n    offset += stride;\r\n    end -= stride;\r\n  }\r\n}\r\n", "/**\r\n * @module ol/geom/flat/orient\r\n */\r\nimport {coordinates as reverseCoordinates} from './reverse.js';\r\n\r\n/**\r\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\r\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\r\n * the ring's orientation is clockwise when this function returns false.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {boolean|undefined} Is clockwise.\r\n */\r\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\r\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\r\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\r\n  let edge = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    edge += (x2 - x1) * (y2 + y1);\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return edge === 0 ? undefined : edge > 0;\r\n}\r\n\r\n/**\r\n * Determines if linear rings are oriented.  By default, left-hand orientation\r\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\r\n * To test for right-hand orientation, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Test for right-hand orientation\r\n *     (counter-clockwise exterior ring and clockwise interior rings).\r\n * @return {boolean} Rings are correctly oriented.\r\n */\r\nexport function linearRingsAreOriented(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  right\r\n) {\r\n  right = right !== undefined ? right : false;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    const isClockwise = linearRingIsClockwise(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride\r\n    );\r\n    if (i === 0) {\r\n      if ((right && isClockwise) || (!right && !isClockwise)) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if ((right && !isClockwise) || (!right && isClockwise)) {\r\n        return false;\r\n      }\r\n    }\r\n    offset = end;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Determines if linear rings are oriented.  By default, left-hand orientation\r\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\r\n * To test for right-hand orientation, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Array of array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Test for right-hand orientation\r\n *     (counter-clockwise exterior ring and clockwise interior rings).\r\n * @return {boolean} Rings are correctly oriented.\r\n */\r\nexport function linearRingssAreOriented(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  right\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\r\n      return false;\r\n    }\r\n    if (ends.length) {\r\n      offset = ends[ends.length - 1];\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Orient coordinates in a flat array of linear rings.  By default, rings\r\n * are oriented following the left-hand rule (clockwise for exterior and\r\n * counter-clockwise for interior rings).  To orient according to the\r\n * right-hand rule, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Follow the right-hand rule for orientation.\r\n * @return {number} End.\r\n */\r\nexport function orientLinearRings(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  right\r\n) {\r\n  right = right !== undefined ? right : false;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    const isClockwise = linearRingIsClockwise(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride\r\n    );\r\n    const reverse =\r\n      i === 0\r\n        ? (right && isClockwise) || (!right && !isClockwise)\r\n        : (right && !isClockwise) || (!right && isClockwise);\r\n    if (reverse) {\r\n      reverseCoordinates(flatCoordinates, offset, end, stride);\r\n    }\r\n    offset = end;\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * Orient coordinates in a flat array of linear rings.  By default, rings\r\n * are oriented following the left-hand rule (clockwise for exterior and\r\n * counter-clockwise for interior rings).  To orient according to the\r\n * right-hand rule, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Array of array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Follow the right-hand rule for orientation.\r\n * @return {number} End.\r\n */\r\nexport function orientLinearRingsArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  right\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    offset = orientLinearRings(\r\n      flatCoordinates,\r\n      offset,\r\n      endss[i],\r\n      stride,\r\n      right\r\n    );\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * Return a two-dimensional endss\r\n * @param {Array<number>} flatCoordinates Flat coordinates\r\n * @param {Array<number>} ends Linear ring end indexes\r\n * @return {Array<Array<number>>} Two dimensional endss array that can\r\n * be used to construct a MultiPolygon\r\n */\r\nexport function inflateEnds(flatCoordinates, ends) {\r\n  const endss = [];\r\n  let offset = 0;\r\n  let prevEndIndex = 0;\r\n  let startOrientation;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    // classifies an array of rings into polygons with outer rings and holes\r\n    const orientation = linearRingIsClockwise(flatCoordinates, offset, end, 2);\r\n    if (startOrientation === undefined) {\r\n      startOrientation = orientation;\r\n    }\r\n    if (orientation === startOrientation) {\r\n      endss.push(ends.slice(prevEndIndex, i + 1));\r\n    } else {\r\n      if (endss.length === 0) {\r\n        continue;\r\n      }\r\n      endss[endss.length - 1].push(ends[prevEndIndex]);\r\n    }\r\n    prevEndIndex = i + 1;\r\n    offset = end;\r\n  }\r\n  return endss;\r\n}\r\n", "/**\r\n * @module ol/geom/Polygon\r\n */\r\nimport LinearRing from './LinearRing.js';\r\nimport Point from './Point.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\r\nimport {deflateCoordinatesArray} from './flat/deflate.js';\r\nimport {extend} from '../array.js';\r\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\r\nimport {inflateCoordinatesArray} from './flat/inflate.js';\r\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\r\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\r\nimport {linearRings as linearRingsArea} from './flat/area.js';\r\nimport {linearRingsContainsXY} from './flat/contains.js';\r\nimport {modulo} from '../math.js';\r\nimport {quantizeArray} from './flat/simplify.js';\r\nimport {offset as sphereOffset} from '../sphere.js';\r\n\r\n/**\r\n * @classdesc\r\n * Polygon geometry.\r\n *\r\n * @api\r\n */\r\nclass Polygon extends SimpleGeometry {\r\n  /**\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\r\n   *     Array of linear rings that define the polygon. The first linear ring of the\r\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\r\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\r\n   *     an array of vertices' coordinates where the first coordinate and the last are\r\n   *     equivalent. (For internal use, flat coordinates in combination with\r\n   *     `layout` and `ends` are also accepted.)\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\r\n   */\r\n  constructor(coordinates, layout, ends) {\r\n    super();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.ends_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatInteriorPointRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\r\n    this.flatInteriorPoint_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.orientedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.orientedFlatCoordinates_ = null;\r\n\r\n    if (layout !== undefined && ends) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n      this.ends_ = ends;\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\r\n          coordinates\r\n        ),\r\n        layout\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed linear ring to this polygon.\r\n   * @param {LinearRing} linearRing Linear ring.\r\n   * @api\r\n   */\r\n  appendLinearRing(linearRing) {\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\r\n    } else {\r\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\r\n    }\r\n    this.ends_.push(this.flatCoordinates.length);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Polygon} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const polygon = new Polygon(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n      this.ends_.slice()\r\n    );\r\n    polygon.applyProperties(this);\r\n    return polygon;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        arrayMaxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.ends_,\r\n          this.stride,\r\n          0\r\n        )\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestArrayPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    return linearRingsContainsXY(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      x,\r\n      y\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the polygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingsArea(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for polygons.\r\n   *\r\n   * @param {boolean} [right] Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates(right) {\r\n    let flatCoordinates;\r\n    if (right !== undefined) {\r\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\r\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\r\n    } else {\r\n      flatCoordinates = this.flatCoordinates;\r\n    }\r\n\r\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Interior point.\r\n   */\r\n  getFlatInteriorPoint() {\r\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\r\n      const flatCenter = getCenter(this.getExtent());\r\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\r\n        this.getOrientedFlatCoordinates(),\r\n        0,\r\n        this.ends_,\r\n        this.stride,\r\n        flatCenter,\r\n        0\r\n      );\r\n      this.flatInteriorPointRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {import(\"../coordinate.js\").Coordinate} */ (\r\n      this.flatInteriorPoint_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return an interior point of the polygon.\r\n   * @return {Point} Interior point as XYM coordinate, where M is the\r\n   * length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */\r\n  getInteriorPoint() {\r\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\r\n  }\r\n\r\n  /**\r\n   * Return the number of rings of the polygon,  this includes the exterior\r\n   * ring and any interior rings.\r\n   *\r\n   * @return {number} Number of rings.\r\n   * @api\r\n   */\r\n  getLinearRingCount() {\r\n    return this.ends_.length;\r\n  }\r\n\r\n  /**\r\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\r\n   * given index is out of range.\r\n   * The exterior linear ring is available at index `0` and the interior rings\r\n   * at index `1` and beyond.\r\n   *\r\n   * @param {number} index Index.\r\n   * @return {LinearRing|null} Linear ring.\r\n   * @api\r\n   */\r\n  getLinearRing(index) {\r\n    if (index < 0 || this.ends_.length <= index) {\r\n      return null;\r\n    }\r\n    return new LinearRing(\r\n      this.flatCoordinates.slice(\r\n        index === 0 ? 0 : this.ends_[index - 1],\r\n        this.ends_[index]\r\n      ),\r\n      this.layout\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the linear rings of the polygon.\r\n   * @return {Array<LinearRing>} Linear rings.\r\n   * @api\r\n   */\r\n  getLinearRings() {\r\n    const layout = this.layout;\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const ends = this.ends_;\r\n    const linearRings = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const linearRing = new LinearRing(\r\n        flatCoordinates.slice(offset, end),\r\n        layout\r\n      );\r\n      linearRings.push(linearRing);\r\n      offset = end;\r\n    }\r\n    return linearRings;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Oriented flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    if (this.orientedRevision_ != this.getRevision()) {\r\n      const flatCoordinates = this.flatCoordinates;\r\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\r\n        this.orientedFlatCoordinates_ = flatCoordinates;\r\n      } else {\r\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\r\n        this.orientedFlatCoordinates_.length = orientLinearRings(\r\n          this.orientedFlatCoordinates_,\r\n          0,\r\n          this.ends_,\r\n          this.stride\r\n        );\r\n      }\r\n      this.orientedRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Polygon} Simplified Polygon.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedFlatCoordinates.length = quantizeArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      Math.sqrt(squaredTolerance),\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n      simplifiedEnds\r\n    );\r\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'Polygon';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLinearRingArray(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the polygon.\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 2);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const ends = deflateCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n      this.ends_\r\n    );\r\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default Polygon;\r\n\r\n/**\r\n * Create an approximation of a circle on the surface of a sphere.\r\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\r\n * @param {number} radius The great-circle distance from the center to\r\n *     the polygon vertices in meters.\r\n * @param {number} [n] Optional number of vertices for the resulting\r\n *     polygon. Default is `32`.\r\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\r\n *     the Earth's mean radius using the WGS84 ellipsoid).\r\n * @return {Polygon} The \"circular\" polygon.\r\n * @api\r\n */\r\nexport function circular(center, radius, n, sphereRadius) {\r\n  n = n ? n : 32;\r\n  /** @type {Array<number>} */\r\n  const flatCoordinates = [];\r\n  for (let i = 0; i < n; ++i) {\r\n    extend(\r\n      flatCoordinates,\r\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius)\r\n    );\r\n  }\r\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\r\n}\r\n\r\n/**\r\n * Create a polygon from an extent. The layout used is `XY`.\r\n * @param {import(\"../extent.js\").Extent} extent The extent.\r\n * @return {Polygon} The polygon.\r\n * @api\r\n */\r\nexport function fromExtent(extent) {\r\n  if (isEmpty(extent)) {\r\n    throw new Error('Cannot create polygon from empty extent');\r\n  }\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const flatCoordinates = [\r\n    minX,\r\n    minY,\r\n    minX,\r\n    maxY,\r\n    maxX,\r\n    maxY,\r\n    maxX,\r\n    minY,\r\n    minX,\r\n    minY,\r\n  ];\r\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\r\n}\r\n\r\n/**\r\n * Create a regular polygon from a circle.\r\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\r\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\r\n * @param {number} [angle] Start angle for the first vertex of the polygon in\r\n *     counter-clockwise radians. 0 means East. Default is 0.\r\n * @return {Polygon} Polygon geometry.\r\n * @api\r\n */\r\nexport function fromCircle(circle, sides, angle) {\r\n  sides = sides ? sides : 32;\r\n  const stride = circle.getStride();\r\n  const layout = circle.getLayout();\r\n  const center = circle.getCenter();\r\n  const arrayLength = stride * (sides + 1);\r\n  const flatCoordinates = new Array(arrayLength);\r\n  for (let i = 0; i < arrayLength; i += stride) {\r\n    flatCoordinates[i] = 0;\r\n    flatCoordinates[i + 1] = 0;\r\n    for (let j = 2; j < stride; j++) {\r\n      flatCoordinates[i + j] = center[j];\r\n    }\r\n  }\r\n  const ends = [flatCoordinates.length];\r\n  const polygon = new Polygon(flatCoordinates, layout, ends);\r\n  makeRegular(polygon, center, circle.getRadius(), angle);\r\n  return polygon;\r\n}\r\n\r\n/**\r\n * Modify the coordinates of a polygon to make it a regular polygon.\r\n * @param {Polygon} polygon Polygon geometry.\r\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\r\n * @param {number} radius Radius of the regular polygon.\r\n * @param {number} [angle] Start angle for the first vertex of the polygon in\r\n *     counter-clockwise radians. 0 means East. Default is 0.\r\n */\r\nexport function makeRegular(polygon, center, radius, angle) {\r\n  const flatCoordinates = polygon.getFlatCoordinates();\r\n  const stride = polygon.getStride();\r\n  const sides = flatCoordinates.length / stride - 1;\r\n  const startAngle = angle ? angle : 0;\r\n  for (let i = 0; i <= sides; ++i) {\r\n    const offset = i * stride;\r\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\r\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\r\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\r\n  }\r\n  polygon.changed();\r\n}\r\n", "/**\r\n * @module ol/geom/flat/center\r\n */\r\nimport {createEmpty, createOrUpdateFromFlatCoordinates} from '../../extent.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @return {Array<number>} Flat centers.\r\n */\r\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\r\n  const flatCenters = [];\r\n  let extent = createEmpty();\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    extent = createOrUpdateFromFlatCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      ends[0],\r\n      stride\r\n    );\r\n    flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return flatCenters;\r\n}\r\n", "/**\r\n * @module ol/geom/MultiPolygon\r\n */\r\nimport MultiPoint from './MultiPoint.js';\r\nimport Polygon from './Polygon.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {\r\n  assignClosestMultiArrayPoint,\r\n  multiArrayMaxSquaredDelta,\r\n} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport {deflateMultiCoordinatesArray} from './flat/deflate.js';\r\nimport {extend} from '../array.js';\r\nimport {getInteriorPointsOfMultiArray} from './flat/interiorpoint.js';\r\nimport {inflateMultiCoordinatesArray} from './flat/inflate.js';\r\nimport {intersectsLinearRingMultiArray} from './flat/intersectsextent.js';\r\nimport {\r\n  linearRingssAreOriented,\r\n  orientLinearRingsArray,\r\n} from './flat/orient.js';\r\nimport {linearRingss as linearRingssArea} from './flat/area.js';\r\nimport {linearRingss as linearRingssCenter} from './flat/center.js';\r\nimport {linearRingssContainsXY} from './flat/contains.js';\r\nimport {quantizeMultiArray} from './flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Multi-polygon geometry.\r\n *\r\n * @api\r\n */\r\nclass MultiPolygon extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.\r\n   */\r\n  constructor(coordinates, layout, endss) {\r\n    super();\r\n\r\n    /**\r\n     * @type {Array<Array<number>>}\r\n     * @private\r\n     */\r\n    this.endss_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatInteriorPointsRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.flatInteriorPoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.orientedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.orientedFlatCoordinates_ = null;\r\n\r\n    if (!endss && !Array.isArray(coordinates[0])) {\r\n      const polygons = /** @type {Array<Polygon>} */ (coordinates);\r\n      /** @type {Array<number>} */\r\n      const flatCoordinates = [];\r\n      const thisEndss = [];\r\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\r\n        const polygon = polygons[i];\r\n        const offset = flatCoordinates.length;\r\n        const ends = polygon.getEnds();\r\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\r\n          ends[j] += offset;\r\n        }\r\n        extend(flatCoordinates, polygon.getFlatCoordinates());\r\n        thisEndss.push(ends);\r\n      }\r\n      layout =\r\n        polygons.length === 0 ? this.getLayout() : polygons[0].getLayout();\r\n      coordinates = flatCoordinates;\r\n      endss = thisEndss;\r\n    }\r\n    if (layout !== undefined && endss) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates)\r\n      );\r\n      this.endss_ = endss;\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (\r\n          coordinates\r\n        ),\r\n        layout\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed polygon to this multipolygon.\r\n   * @param {Polygon} polygon Polygon.\r\n   * @api\r\n   */\r\n  appendPolygon(polygon) {\r\n    /** @type {Array<number>} */\r\n    let ends;\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\r\n      ends = polygon.getEnds().slice();\r\n      this.endss_.push();\r\n    } else {\r\n      const offset = this.flatCoordinates.length;\r\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\r\n      ends = polygon.getEnds().slice();\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        ends[i] += offset;\r\n      }\r\n    }\r\n    this.endss_.push(ends);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiPolygon} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const len = this.endss_.length;\r\n    const newEndss = new Array(len);\r\n    for (let i = 0; i < len; ++i) {\r\n      newEndss[i] = this.endss_[i].slice();\r\n    }\r\n\r\n    const multiPolygon = new MultiPolygon(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n      newEndss\r\n    );\r\n    multiPolygon.applyProperties(this);\r\n\r\n    return multiPolygon;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        multiArrayMaxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.endss_,\r\n          this.stride,\r\n          0\r\n        )\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestMultiArrayPoint(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    return linearRingssContainsXY(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      x,\r\n      y\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the multipolygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingssArea(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for multi-polygons.\r\n   *\r\n   * @param {boolean} [right] Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates(right) {\r\n    let flatCoordinates;\r\n    if (right !== undefined) {\r\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\r\n      orientLinearRingsArray(\r\n        flatCoordinates,\r\n        0,\r\n        this.endss_,\r\n        this.stride,\r\n        right\r\n      );\r\n    } else {\r\n      flatCoordinates = this.flatCoordinates;\r\n    }\r\n\r\n    return inflateMultiCoordinatesArray(\r\n      flatCoordinates,\r\n      0,\r\n      this.endss_,\r\n      this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} Endss.\r\n   */\r\n  getEndss() {\r\n    return this.endss_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoints() {\r\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\r\n      const flatCenters = linearRingssCenter(\r\n        this.flatCoordinates,\r\n        0,\r\n        this.endss_,\r\n        this.stride\r\n      );\r\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\r\n        this.getOrientedFlatCoordinates(),\r\n        0,\r\n        this.endss_,\r\n        this.stride,\r\n        flatCenters\r\n      );\r\n      this.flatInteriorPointsRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.flatInteriorPoints_);\r\n  }\r\n\r\n  /**\r\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\r\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\r\n   * the length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */\r\n  getInteriorPoints() {\r\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), 'XYM');\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Oriented flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    if (this.orientedRevision_ != this.getRevision()) {\r\n      const flatCoordinates = this.flatCoordinates;\r\n      if (\r\n        linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)\r\n      ) {\r\n        this.orientedFlatCoordinates_ = flatCoordinates;\r\n      } else {\r\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\r\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(\r\n          this.orientedFlatCoordinates_,\r\n          0,\r\n          this.endss_,\r\n          this.stride\r\n        );\r\n      }\r\n      this.orientedRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {MultiPolygon} Simplified MultiPolygon.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    /** @type {Array<Array<number>>} */\r\n    const simplifiedEndss = [];\r\n    simplifiedFlatCoordinates.length = quantizeMultiArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      Math.sqrt(squaredTolerance),\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n      simplifiedEndss\r\n    );\r\n    return new MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);\r\n  }\r\n\r\n  /**\r\n   * Return the polygon at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {Polygon} Polygon.\r\n   * @api\r\n   */\r\n  getPolygon(index) {\r\n    if (index < 0 || this.endss_.length <= index) {\r\n      return null;\r\n    }\r\n    let offset;\r\n    if (index === 0) {\r\n      offset = 0;\r\n    } else {\r\n      const prevEnds = this.endss_[index - 1];\r\n      offset = prevEnds[prevEnds.length - 1];\r\n    }\r\n    const ends = this.endss_[index].slice();\r\n    const end = ends[ends.length - 1];\r\n    if (offset !== 0) {\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        ends[i] -= offset;\r\n      }\r\n    }\r\n    return new Polygon(\r\n      this.flatCoordinates.slice(offset, end),\r\n      this.layout,\r\n      ends\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the polygons of this multipolygon.\r\n   * @return {Array<Polygon>} Polygons.\r\n   * @api\r\n   */\r\n  getPolygons() {\r\n    const layout = this.layout;\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const endss = this.endss_;\r\n    const polygons = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n      const ends = endss[i].slice();\r\n      const end = ends[ends.length - 1];\r\n      if (offset !== 0) {\r\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\r\n          ends[j] -= offset;\r\n        }\r\n      }\r\n      const polygon = new Polygon(\r\n        flatCoordinates.slice(offset, end),\r\n        layout,\r\n        ends\r\n      );\r\n      polygons.push(polygon);\r\n      offset = end;\r\n    }\r\n    return polygons;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'MultiPolygon';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLinearRingMultiArray(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the multipolygon.\r\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 3);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const endss = deflateMultiCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n      this.endss_\r\n    );\r\n    if (endss.length === 0) {\r\n      this.flatCoordinates.length = 0;\r\n    } else {\r\n      const lastEnds = endss[endss.length - 1];\r\n      this.flatCoordinates.length =\r\n        lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\r\n    }\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default MultiPolygon;\r\n", "/**\r\n * @module ol/render/Feature\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {\r\n  LineString,\r\n  MultiLineString,\r\n  MultiPoint,\r\n  MultiPolygon,\r\n  Point,\r\n  Polygon,\r\n} from '../geom.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {\r\n  createOrUpdateFromCoordinate,\r\n  createOrUpdateFromFlatCoordinates,\r\n  getCenter,\r\n  getHeight,\r\n} from '../extent.js';\r\nimport {\r\n  douglasPeucker,\r\n  douglasPeuckerArray,\r\n  quantizeArray,\r\n} from '../geom/flat/simplify.js';\r\nimport {extend} from '../array.js';\r\nimport {\r\n  getInteriorPointOfArray,\r\n  getInteriorPointsOfMultiArray,\r\n} from '../geom/flat/interiorpoint.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {inflateEnds} from '../geom/flat/orient.js';\r\nimport {interpolatePoint} from '../geom/flat/interpolate.js';\r\nimport {linearRingss as linearRingssCenter} from '../geom/flat/center.js';\r\nimport {memoizeOne} from '../functions.js';\r\nimport {transform2D} from '../geom/flat/transform.js';\r\n\r\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.\r\n */\r\n\r\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\r\nconst tmpTransform = createTransform();\r\n\r\n/**\r\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\r\n * structure, optimized for vector tile rendering and styling. Geometry access\r\n * through the API is limited to getting the type and extent of the geometry.\r\n */\r\nclass RenderFeature {\r\n  /**\r\n   * @param {Type} type Geometry type.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\r\n   *     to be right-handed for polygons.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Object<string, *>} properties Properties.\r\n   * @param {number|string|undefined} id Feature id.\r\n   */\r\n  constructor(type, flatCoordinates, ends, stride, properties, id) {\r\n    /**\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     */\r\n    this.styleFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent|undefined}\r\n     */\r\n    this.extent_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id_ = id;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Type}\r\n     */\r\n    this.type_ = type;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates_ = flatCoordinates;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatInteriorPoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatMidpoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.ends_ = ends;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, *>}\r\n     */\r\n    this.properties_ = properties;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.squaredTolerance_;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.stride_ = stride;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFeature}\r\n     */\r\n    this.simplifiedGeometry_;\r\n  }\r\n\r\n  /**\r\n   * Get a feature property by its key.\r\n   * @param {string} key Key\r\n   * @return {*} Value for the requested key.\r\n   * @api\r\n   */\r\n  get(key) {\r\n    return this.properties_[key];\r\n  }\r\n\r\n  /**\r\n   * Get the extent of this feature's geometry.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    if (!this.extent_) {\r\n      this.extent_ =\r\n        this.type_ === 'Point'\r\n          ? createOrUpdateFromCoordinate(this.flatCoordinates_)\r\n          : createOrUpdateFromFlatCoordinates(\r\n              this.flatCoordinates_,\r\n              0,\r\n              this.flatCoordinates_.length,\r\n              2\r\n            );\r\n    }\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoint() {\r\n    if (!this.flatInteriorPoints_) {\r\n      const flatCenter = getCenter(this.getExtent());\r\n      this.flatInteriorPoints_ = getInteriorPointOfArray(\r\n        this.flatCoordinates_,\r\n        0,\r\n        /** @type {Array<number>} */ (this.ends_),\r\n        2,\r\n        flatCenter,\r\n        0\r\n      );\r\n    }\r\n    return this.flatInteriorPoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoints() {\r\n    if (!this.flatInteriorPoints_) {\r\n      const ends = inflateEnds(this.flatCoordinates_, this.ends_);\r\n      const flatCenters = linearRingssCenter(this.flatCoordinates_, 0, ends, 2);\r\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\r\n        this.flatCoordinates_,\r\n        0,\r\n        ends,\r\n        2,\r\n        flatCenters\r\n      );\r\n    }\r\n    return this.flatInteriorPoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */\r\n  getFlatMidpoint() {\r\n    if (!this.flatMidpoints_) {\r\n      this.flatMidpoints_ = interpolatePoint(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.flatCoordinates_.length,\r\n        2,\r\n        0.5\r\n      );\r\n    }\r\n    return this.flatMidpoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */\r\n  getFlatMidpoints() {\r\n    if (!this.flatMidpoints_) {\r\n      this.flatMidpoints_ = [];\r\n      const flatCoordinates = this.flatCoordinates_;\r\n      let offset = 0;\r\n      const ends = /** @type {Array<number>} */ (this.ends_);\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        const end = ends[i];\r\n        const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\r\n        extend(this.flatMidpoints_, midpoint);\r\n        offset = end;\r\n      }\r\n    }\r\n    return this.flatMidpoints_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is set when reading data from a remote source.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    return this.flatCoordinates_;\r\n  }\r\n\r\n  /**\r\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\r\n   * determining the geometry type in style function (see {@link #getType}).\r\n   * @return {RenderFeature} Feature.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\r\n  simplifyTransformed(squaredTolerance, transform) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the feature properties.\r\n   * @return {Object<string, *>} Feature properties.\r\n   * @api\r\n   */\r\n  getProperties() {\r\n    return this.properties_;\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.  This has the same behavior as getProperties,\r\n   * but is here to conform with the {@link module:ol/Feature~Feature} interface.\r\n   * @return {Object<string, *>?} Object.\r\n   */\r\n  getPropertiesInternal() {\r\n    return this.properties_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride_;\r\n  }\r\n\r\n  /**\r\n   * @return {import('../style/Style.js').StyleFunction|undefined} Style\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this feature's geometry.\r\n   * @return {Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return this.type_;\r\n  }\r\n\r\n  /**\r\n   * Transform geometry coordinates from tile pixel space to projected.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\r\n   */\r\n  transform(projection) {\r\n    projection = getProjection(projection);\r\n    const pixelExtent = projection.getExtent();\r\n    const projectedExtent = projection.getWorldExtent();\r\n    if (pixelExtent && projectedExtent) {\r\n      const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\r\n      composeTransform(\r\n        tmpTransform,\r\n        projectedExtent[0],\r\n        projectedExtent[3],\r\n        scale,\r\n        -scale,\r\n        0,\r\n        0,\r\n        0\r\n      );\r\n      transform2D(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.flatCoordinates_.length,\r\n        2,\r\n        tmpTransform,\r\n        this.flatCoordinates_\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   */\r\n  applyTransform(transformFn) {\r\n    transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);\r\n  }\r\n\r\n  /**\r\n   * @return {RenderFeature} A cloned render feature.\r\n   */\r\n  clone() {\r\n    return new RenderFeature(\r\n      this.type_,\r\n      this.flatCoordinates_.slice(),\r\n      this.ends_.slice(),\r\n      this.stride_,\r\n      Object.assign({}, this.properties_),\r\n      this.id_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * Add transform and resolution based geometry simplification to this instance.\r\n   * @return {RenderFeature} This render feature.\r\n   */\r\n  enableSimplifyTransformed() {\r\n    this.simplifyTransformed = memoizeOne((squaredTolerance, transform) => {\r\n      if (squaredTolerance === this.squaredTolerance_) {\r\n        return this.simplifiedGeometry_;\r\n      }\r\n      this.simplifiedGeometry_ = this.clone();\r\n      if (transform) {\r\n        this.simplifiedGeometry_.applyTransform(transform);\r\n      }\r\n      const simplifiedFlatCoordinates =\r\n        this.simplifiedGeometry_.getFlatCoordinates();\r\n      let simplifiedEnds;\r\n      switch (this.type_) {\r\n        case 'LineString':\r\n          simplifiedFlatCoordinates.length = douglasPeucker(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.flatCoordinates_.length,\r\n            this.simplifiedGeometry_.stride_,\r\n            squaredTolerance,\r\n            simplifiedFlatCoordinates,\r\n            0\r\n          );\r\n          simplifiedEnds = [simplifiedFlatCoordinates.length];\r\n          break;\r\n        case 'MultiLineString':\r\n          simplifiedEnds = [];\r\n          simplifiedFlatCoordinates.length = douglasPeuckerArray(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.ends_,\r\n            this.simplifiedGeometry_.stride_,\r\n            squaredTolerance,\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            simplifiedEnds\r\n          );\r\n          break;\r\n        case 'Polygon':\r\n          simplifiedEnds = [];\r\n          simplifiedFlatCoordinates.length = quantizeArray(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.ends_,\r\n            this.simplifiedGeometry_.stride_,\r\n            Math.sqrt(squaredTolerance),\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            simplifiedEnds\r\n          );\r\n          break;\r\n        default:\r\n      }\r\n      if (simplifiedEnds) {\r\n        this.simplifiedGeometry_ = new RenderFeature(\r\n          this.type_,\r\n          simplifiedFlatCoordinates,\r\n          simplifiedEnds,\r\n          2,\r\n          this.properties_,\r\n          this.id_\r\n        );\r\n      }\r\n      this.squaredTolerance_ = squaredTolerance;\r\n      return this.simplifiedGeometry_;\r\n    });\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nRenderFeature.prototype.getFlatCoordinates =\r\n  RenderFeature.prototype.getOrientedFlatCoordinates;\r\n\r\n/**\r\n * Create a geometry from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature\r\n * Render Feature\r\n * @return {Point|MultiPoint|LineString|MultiLineString|Polygon|MultiPolygon}\r\n * New geometry instance.\r\n * @api\r\n */\r\nexport function toGeometry(renderFeature) {\r\n  const geometryType = renderFeature.getType();\r\n  switch (geometryType) {\r\n    case 'Point':\r\n      return new Point(renderFeature.getFlatCoordinates());\r\n    case 'MultiPoint':\r\n      return new MultiPoint(renderFeature.getFlatCoordinates(), 'XY');\r\n    case 'LineString':\r\n      return new LineString(renderFeature.getFlatCoordinates(), 'XY');\r\n    case 'MultiLineString':\r\n      return new MultiLineString(\r\n        renderFeature.getFlatCoordinates(),\r\n        'XY',\r\n        /** @type {Array<number>} */ (renderFeature.getEnds())\r\n      );\r\n    case 'Polygon':\r\n      const flatCoordinates = renderFeature.getFlatCoordinates();\r\n      const ends = /** @type {Array<number>} */ (renderFeature.getEnds());\r\n      const endss = inflateEnds(flatCoordinates, ends);\r\n      return endss.length > 1\r\n        ? new MultiPolygon(flatCoordinates, 'XY', endss)\r\n        : new Polygon(flatCoordinates, 'XY', ends);\r\n    default:\r\n      throw new Error('Invalid geometry type:' + geometryType);\r\n  }\r\n}\r\n\r\n/**\r\n * Create an `ol/Feature` from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature RenderFeature\r\n * @param {string} [geometryName='geometry'] Geometry name to use\r\n * when creating the Feature.\r\n * @return {Feature} Newly constructed `ol/Feature` with properties,\r\n * geometry, and id copied over.\r\n * @api\r\n */\r\nexport function toFeature(renderFeature, geometryName) {\r\n  const id = renderFeature.getId();\r\n  const geometry = toGeometry(renderFeature);\r\n  const properties = renderFeature.getProperties();\r\n  const feature = new Feature();\r\n  if (geometryName !== undefined) {\r\n    feature.setGeometryName(geometryName);\r\n  }\r\n  feature.setGeometry(geometry);\r\n  if (id !== undefined) {\r\n    feature.setId(id);\r\n  }\r\n  feature.setProperties(properties, true);\r\n  return feature;\r\n}\r\n\r\nexport default RenderFeature;\r\n", "/**\r\n * @module ol/format/Feature\r\n */\r\nimport Feature from '../Feature.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport {\r\n  GeometryCollection,\r\n  LineString,\r\n  MultiLineString,\r\n  MultiPoint,\r\n  MultiPolygon,\r\n  Point,\r\n  Polygon,\r\n} from '../geom.js';\r\nimport {abstract} from '../util.js';\r\nimport {\r\n  equivalent as equivalentProjection,\r\n  get as getProjection,\r\n  getTransform,\r\n  transformExtent,\r\n} from '../proj.js';\r\nimport {\r\n  linearRingsAreOriented,\r\n  linearRingssAreOriented,\r\n  orientLinearRings,\r\n  orientLinearRingsArray,\r\n} from '../geom/flat/orient.js';\r\n\r\n/**\r\n * @typedef {Object} ReadOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\r\n * If not provided, the projection will be derived from the data (where possible) or\r\n * the `dataProjection` of the format is assigned (where set). If the projection\r\n * can not be derived from the data and if no `dataProjection` is set for a format,\r\n * the features will not be reprojected.\r\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\r\n * This is only required when reading data with tile pixels as geometry units. When configured,\r\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\r\n * provided.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * created by the format reader. If not provided, features will be returned in the\r\n * `dataProjection`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\r\n * If not provided, the `dataProjection` of the format is assigned (where set).\r\n * If no `dataProjection` is set for a format, the features will be returned\r\n * in the `featureProjection`.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * that will be serialized by the format writer. If not provided, geometries are assumed\r\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\r\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\r\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\r\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\r\n * as they are provided at construction.  If `true`, the right-hand rule will\r\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\r\n * exterior and counter-clockwise for interior rings).  Note that not all\r\n * formats support this.  The GeoJSON format does use this property when writing\r\n * geometries.\r\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\r\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\r\n * coordinates with a large number of decimal places, not generally wanted on output.\r\n * Set a number here to round coordinates. Can also be used to ensure that\r\n * coordinates read in can be written back out with the same number of decimals.\r\n * Default is no rounding.\r\n */\r\n\r\n/**\r\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\r\n */\r\n\r\n/**\r\n * @typedef {Object} SimpleGeometryObject\r\n * @property {import('../geom/Geometry.js').Type} type Type.\r\n * @property {Array<number>} flatCoordinates Flat coordinates.\r\n * @property {Array<number>|Array<Array<number>>} [ends] Ends or endss.\r\n * @property {import('../geom/Geometry.js').GeometryLayout} [layout] Layout.\r\n */\r\n\r\n/**\r\n * @typedef {Array<GeometryObject>} GeometryCollectionObject\r\n */\r\n\r\n/**\r\n * @typedef {SimpleGeometryObject|GeometryCollectionObject} GeometryObject\r\n */\r\n\r\n/**\r\n * @typedef {Object} FeatureObject\r\n * @property {string|number} [id] Id.\r\n * @property {GeometryObject} [geometry] Geometry.\r\n * @property {Object<string, *>} [properties] Properties.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for feature formats.\r\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\r\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\r\n * file formats.  See the documentation for each format for more details.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass FeatureFormat {\r\n  constructor() {\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.dataProjection = undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.defaultFeatureProjection = undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../Feature.js\").FeatureClass}\r\n     */\r\n    this.featureClass = Feature;\r\n\r\n    /**\r\n     * A list media types supported by the format in descending order of preference.\r\n     * @type {Array<string>}\r\n     */\r\n    this.supportedMediaTypes = null;\r\n  }\r\n\r\n  /**\r\n   * Adds the data projection to the read options.\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Options.\r\n   * @return {ReadOptions|undefined} Options.\r\n   * @protected\r\n   */\r\n  getReadOptions(source, options) {\r\n    if (options) {\r\n      let dataProjection = options.dataProjection\r\n        ? getProjection(options.dataProjection)\r\n        : this.readProjection(source);\r\n      if (\r\n        options.extent &&\r\n        dataProjection &&\r\n        dataProjection.getUnits() === 'tile-pixels'\r\n      ) {\r\n        dataProjection = getProjection(dataProjection);\r\n        dataProjection.setWorldExtent(options.extent);\r\n      }\r\n      options = {\r\n        dataProjection: dataProjection,\r\n        featureProjection: options.featureProjection,\r\n      };\r\n    }\r\n    return this.adaptOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Sets the `dataProjection` on the options, if no `dataProjection`\r\n   * is set.\r\n   * @param {WriteOptions|ReadOptions|undefined} options\r\n   *     Options.\r\n   * @protected\r\n   * @return {WriteOptions|ReadOptions|undefined}\r\n   *     Updated options.\r\n   */\r\n  adaptOptions(options) {\r\n    return Object.assign(\r\n      {\r\n        dataProjection: this.dataProjection,\r\n        featureProjection: this.defaultFeatureProjection,\r\n        featureClass: this.featureClass,\r\n      },\r\n      options\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Type} The format type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").FeatureLike|Array<import(\"../render/Feature.js\").default>} Feature.\r\n   */\r\n  readFeature(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read all features from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\r\n   */\r\n  readFeatures(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometry(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */\r\n  readProjection(source) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeature(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeatures(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default FeatureFormat;\r\n\r\n/**\r\n * @template {import(\"../geom/Geometry.js\").default|RenderFeature} T\r\n * @param {T} geometry Geometry.\r\n * @param {boolean} write Set to true for writing, false for reading.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {T} Transformed geometry.\r\n */\r\nexport function transformGeometryWithOptions(geometry, write, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  let transformed = geometry;\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    if (write) {\r\n      transformed = /** @type {T} */ (geometry.clone());\r\n    }\r\n    const fromProjection = write ? featureProjection : dataProjection;\r\n    const toProjection = write ? dataProjection : featureProjection;\r\n    if (fromProjection.getUnits() === 'tile-pixels') {\r\n      transformed.transform(fromProjection, toProjection);\r\n    } else {\r\n      transformed.applyTransform(getTransform(fromProjection, toProjection));\r\n    }\r\n  }\r\n  if (\r\n    write &&\r\n    options &&\r\n    /** @type {WriteOptions} */ (options).decimals !== undefined\r\n  ) {\r\n    const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);\r\n    // if decimals option on write, round each coordinate appropriately\r\n    /**\r\n     * @param {Array<number>} coordinates Coordinates.\r\n     * @return {Array<number>} Transformed coordinates.\r\n     */\r\n    const transform = function (coordinates) {\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\r\n      }\r\n      return coordinates;\r\n    };\r\n    if (transformed === geometry) {\r\n      transformed = /** @type {T} */ (geometry.clone());\r\n    }\r\n    transformed.applyTransform(transform);\r\n  }\r\n  return transformed;\r\n}\r\n\r\n/**\r\n * @param {import(\"../extent.js\").Extent} extent Extent.\r\n * @param {ReadOptions} [options] Read options.\r\n * @return {import(\"../extent.js\").Extent} Transformed extent.\r\n */\r\nexport function transformExtentWithOptions(extent, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    return transformExtent(extent, dataProjection, featureProjection);\r\n  }\r\n  return extent;\r\n}\r\n\r\nconst GeometryConstructor = {\r\n  Point: Point,\r\n  LineString: LineString,\r\n  Polygon: Polygon,\r\n  MultiPoint: MultiPoint,\r\n  MultiLineString: MultiLineString,\r\n  MultiPolygon: MultiPolygon,\r\n};\r\n\r\nfunction orientFlatCoordinates(flatCoordinates, ends, stride) {\r\n  if (Array.isArray(ends[0])) {\r\n    // MultiPolagon\r\n    if (!linearRingssAreOriented(flatCoordinates, 0, ends, stride)) {\r\n      flatCoordinates = flatCoordinates.slice();\r\n      orientLinearRingsArray(flatCoordinates, 0, ends, stride);\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n  if (!linearRingsAreOriented(flatCoordinates, 0, ends, stride)) {\r\n    flatCoordinates = flatCoordinates.slice();\r\n    orientLinearRings(flatCoordinates, 0, ends, stride);\r\n  }\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * @param {FeatureObject} object Feature object.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {RenderFeature|Array<RenderFeature>} Render feature.\r\n */\r\nexport function createRenderFeature(object, options) {\r\n  const geometry = object.geometry;\r\n  if (!geometry) {\r\n    return [];\r\n  }\r\n  if (Array.isArray(geometry)) {\r\n    return geometry\r\n      .map((geometry) => createRenderFeature({...object, geometry}))\r\n      .flat();\r\n  }\r\n\r\n  const geometryType =\r\n    geometry.type === 'MultiPolygon' ? 'Polygon' : geometry.type;\r\n  if (geometryType === 'GeometryCollection' || geometryType === 'Circle') {\r\n    throw new Error('Unsupported geometry type: ' + geometryType);\r\n  }\r\n\r\n  const stride = geometry.layout.length;\r\n  return transformGeometryWithOptions(\r\n    new RenderFeature(\r\n      geometryType,\r\n      geometryType === 'Polygon'\r\n        ? orientFlatCoordinates(geometry.flatCoordinates, geometry.ends, stride)\r\n        : geometry.flatCoordinates,\r\n      geometry.ends?.flat(),\r\n      stride,\r\n      object.properties || {},\r\n      object.id\r\n    ).enableSimplifyTransformed(),\r\n    false,\r\n    options\r\n  );\r\n}\r\n\r\n/**\r\n * @param {GeometryObject|null} object Geometry object.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nexport function createGeometry(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n  if (Array.isArray(object)) {\r\n    const geometries = object.map((geometry) =>\r\n      createGeometry(geometry, options)\r\n    );\r\n    return new GeometryCollection(geometries);\r\n  }\r\n  const Geometry = GeometryConstructor[object.type];\r\n  return transformGeometryWithOptions(\r\n    new Geometry(object.flatCoordinates, object.layout, object.ends),\r\n    false,\r\n    options\r\n  );\r\n}\r\n", "/**\r\n * @module ol/format/JSONFeature\r\n */\r\nimport FeatureFormat from './Feature.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for JSON feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass JSONFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return 'json';\r\n  }\r\n\r\n  /**\r\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\r\n   * read a feature collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").FeatureLike|Array<import(\"../render/Feature.js\").default>} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, options) {\r\n    return this.readFeatureFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Read all features.  Works with both a single feature and a feature\r\n   * collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    return this.readFeaturesFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../Feature.js\").default|import(\"../render/Feature.js\").default|Array<import(\"../render/Feature.js\").default>} Feature.\r\n   */\r\n  readFeatureFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default|import(\"../render/Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a geometry.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   */\r\n  readGeometry(source, options) {\r\n    return this.readGeometryFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    return this.readProjectionFromObject(getObject(source));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   */\r\n  writeFeature(feature, options) {\r\n    return JSON.stringify(this.writeFeatureObject(feature, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   */\r\n  writeFeatures(features, options) {\r\n    return JSON.stringify(this.writeFeaturesObject(features, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as string.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded geometry.\r\n   * @api\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Document|Element|Object|string} source Source.\r\n * @return {Object} Object.\r\n */\r\nfunction getObject(source) {\r\n  if (typeof source === 'string') {\r\n    const object = JSON.parse(source);\r\n    return object ? /** @type {Object} */ (object) : null;\r\n  }\r\n  if (source !== null) {\r\n    return source;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default JSONFeature;\r\n", "/**\r\n * @module ol/format/EsriJSON\r\n */\r\nimport Feature from '../Feature.js';\r\nimport JSONFeature from './JSONFeature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport LinearRing from '../geom/LinearRing.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {containsExtent} from '../extent.js';\r\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {linearRingIsClockwise} from '../geom/flat/orient.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\r\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\r\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\r\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\r\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\r\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\r\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\r\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\r\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\r\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\r\n */\r\n\r\n/**\r\n * @typedef {Object} EsriJSONMultiPolygon\r\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\r\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\r\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\r\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\r\n */\r\nconst GEOMETRY_READERS = {\r\n  Point: readPointGeometry,\r\n  LineString: readLineStringGeometry,\r\n  Polygon: readPolygonGeometry,\r\n  MultiPoint: readMultiPointGeometry,\r\n  MultiLineString: readMultiLineStringGeometry,\r\n  MultiPolygon: readMultiPolygonGeometry,\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\r\n */\r\nconst GEOMETRY_WRITERS = {\r\n  Point: writePointGeometry,\r\n  LineString: writeLineStringGeometry,\r\n  Polygon: writePolygonGeometry,\r\n  MultiPoint: writeMultiPointGeometry,\r\n  MultiLineString: writeMultiLineStringGeometry,\r\n  MultiPolygon: writeMultiPolygonGeometry,\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the EsriJSON format.\r\n *\r\n * @api\r\n */\r\nclass EsriJSON extends JSONFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super();\r\n\r\n    /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @param {string} [idField] Name of the field where to get the id from.\r\n   * @protected\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromObject(object, options, idField) {\r\n    const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\r\n    const geometry = readGeometry(esriJSONFeature.geometry, options);\r\n    const feature = new Feature();\r\n    if (this.geometryName_) {\r\n      feature.setGeometryName(this.geometryName_);\r\n    }\r\n    feature.setGeometry(geometry);\r\n    if (esriJSONFeature.attributes) {\r\n      feature.setProperties(esriJSONFeature.attributes, true);\r\n      const id = esriJSONFeature.attributes[idField];\r\n      if (id !== undefined) {\r\n        feature.setId(/** @type {number} */ (id));\r\n      }\r\n    }\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    options = options ? options : {};\r\n    if (object['features']) {\r\n      const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);\r\n      /** @type {Array<import(\"../Feature.js\").default>} */\r\n      const features = [];\r\n      const esriJSONFeatures = esriJSONFeatureSet.features;\r\n      for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\r\n        features.push(\r\n          this.readFeatureFromObject(\r\n            esriJSONFeatures[i],\r\n            options,\r\n            object.objectIdFieldName\r\n          )\r\n        );\r\n      }\r\n      return features;\r\n    }\r\n    return [this.readFeatureFromObject(object, options)];\r\n  }\r\n\r\n  /**\r\n   * @param {EsriJSONGeometry} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return readGeometry(object, options);\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    if (\r\n      object['spatialReference'] &&\r\n      object['spatialReference']['wkid'] !== undefined\r\n    ) {\r\n      const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (\r\n        object['spatialReference']\r\n      );\r\n      const crs = spatialReference.wkid;\r\n      return getProjection('EPSG:' + crs);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as a EsriJSON object.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {EsriJSONGeometry} Object.\r\n   * @api\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return writeGeometry(geometry, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a esriJSON Feature object.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   * @api\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    options = this.adaptOptions(options);\r\n    const object = {};\r\n    if (!feature.hasProperties()) {\r\n      object['attributes'] = {};\r\n      return object;\r\n    }\r\n    const properties = feature.getProperties();\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      object['geometry'] = writeGeometry(geometry, options);\r\n      const projection =\r\n        options && (options.dataProjection || options.featureProjection);\r\n      if (projection) {\r\n        object['geometry']['spatialReference'] =\r\n          /** @type {EsriJSONSpatialReferenceWkid} */ ({\r\n            wkid: Number(getProjection(projection).getCode().split(':').pop()),\r\n          });\r\n      }\r\n      delete properties[feature.getGeometryName()];\r\n    }\r\n    if (!isEmpty(properties)) {\r\n      object['attributes'] = properties;\r\n    } else {\r\n      object['attributes'] = {};\r\n    }\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as a EsriJSON object.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\r\n   * @api\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const objects = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      objects.push(this.writeFeatureObject(features[i], options));\r\n    }\r\n    return {\r\n      'features': objects,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nfunction readGeometry(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n  /** @type {import(\"../geom/Geometry.js\").Type} */\r\n  let type;\r\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\r\n    type = 'Point';\r\n  } else if (object['points']) {\r\n    type = 'MultiPoint';\r\n  } else if (object['paths']) {\r\n    const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);\r\n    if (esriJSONPolyline.paths.length === 1) {\r\n      type = 'LineString';\r\n    } else {\r\n      type = 'MultiLineString';\r\n    }\r\n  } else if (object['rings']) {\r\n    const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);\r\n    const layout = getGeometryLayout(esriJSONPolygon);\r\n    const rings = convertRings(esriJSONPolygon.rings, layout);\r\n    if (rings.length === 1) {\r\n      type = 'Polygon';\r\n      object = Object.assign({}, object, {['rings']: rings[0]});\r\n    } else {\r\n      type = 'MultiPolygon';\r\n      object = Object.assign({}, object, {['rings']: rings});\r\n    }\r\n  }\r\n  const geometryReader = GEOMETRY_READERS[type];\r\n  return transformGeometryWithOptions(geometryReader(object), false, options);\r\n}\r\n\r\n/**\r\n * Determines inner and outer rings.\r\n * Checks if any polygons in this array contain any other polygons in this\r\n * array. It is used for checking for holes.\r\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\r\n * @param {Array<!Array<!Array<number>>>} rings Rings.\r\n * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout Geometry layout.\r\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\r\n */\r\nfunction convertRings(rings, layout) {\r\n  const flatRing = [];\r\n  const outerRings = [];\r\n  const holes = [];\r\n  let i, ii;\r\n  for (i = 0, ii = rings.length; i < ii; ++i) {\r\n    flatRing.length = 0;\r\n    deflateCoordinates(flatRing, 0, rings[i], layout.length);\r\n    // is this ring an outer ring? is it clockwise?\r\n    const clockwise = linearRingIsClockwise(\r\n      flatRing,\r\n      0,\r\n      flatRing.length,\r\n      layout.length\r\n    );\r\n    if (clockwise) {\r\n      outerRings.push([rings[i]]);\r\n    } else {\r\n      holes.push(rings[i]);\r\n    }\r\n  }\r\n  while (holes.length) {\r\n    const hole = holes.shift();\r\n    let matched = false;\r\n    // loop over all outer rings and see if they contain our hole.\r\n    for (i = outerRings.length - 1; i >= 0; i--) {\r\n      const outerRing = outerRings[i][0];\r\n      const containsHole = containsExtent(\r\n        new LinearRing(outerRing).getExtent(),\r\n        new LinearRing(hole).getExtent()\r\n      );\r\n      if (containsHole) {\r\n        // the hole is contained push it into our polygon\r\n        outerRings[i].push(hole);\r\n        matched = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!matched) {\r\n      // no outer rings contain this hole turn it into and outer\r\n      // ring (reverse it)\r\n      outerRings.push([hole.reverse()]);\r\n    }\r\n  }\r\n  return outerRings;\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPoint} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} Point.\r\n */\r\nfunction readPointGeometry(object) {\r\n  let point;\r\n  if (object.m !== undefined && object.z !== undefined) {\r\n    point = new Point([object.x, object.y, object.z, object.m], 'XYZM');\r\n  } else if (object.z !== undefined) {\r\n    point = new Point([object.x, object.y, object.z], 'XYZ');\r\n  } else if (object.m !== undefined) {\r\n    point = new Point([object.x, object.y, object.m], 'XYM');\r\n  } else {\r\n    point = new Point([object.x, object.y]);\r\n  }\r\n  return point;\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPolyline} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} LineString.\r\n */\r\nfunction readLineStringGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new LineString(object.paths[0], layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPolyline} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\r\n */\r\nfunction readMultiLineStringGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiLineString(object.paths, layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONHasZM} object Object.\r\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} The geometry layout to use.\r\n */\r\nfunction getGeometryLayout(object) {\r\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\r\n  let layout = 'XY';\r\n  if (object.hasZ === true && object.hasM === true) {\r\n    layout = 'XYZM';\r\n  } else if (object.hasZ === true) {\r\n    layout = 'XYZ';\r\n  } else if (object.hasM === true) {\r\n    layout = 'XYM';\r\n  }\r\n  return layout;\r\n}\r\n\r\n/**\r\n * @param {EsriJSONMultipoint} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\r\n */\r\nfunction readMultiPointGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiPoint(object.points, layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONMultiPolygon} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\r\n */\r\nfunction readMultiPolygonGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiPolygon(object.rings, layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPolygon} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\r\n */\r\nfunction readPolygonGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new Polygon(object.rings, layout);\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPoint} EsriJSON geometry.\r\n */\r\nfunction writePointGeometry(geometry, options) {\r\n  const coordinates = geometry.getCoordinates();\r\n  /** @type {EsriJSONPoint} */\r\n  let esriJSON;\r\n  const layout = geometry.getLayout();\r\n  if (layout === 'XYZ') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      z: coordinates[2],\r\n    };\r\n  } else if (layout === 'XYM') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      m: coordinates[2],\r\n    };\r\n  } else if (layout === 'XYZM') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      z: coordinates[2],\r\n      m: coordinates[3],\r\n    };\r\n  } else if (layout === 'XY') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n    };\r\n  } else {\r\n    throw new Error('Invalid geometry layout');\r\n  }\r\n  return esriJSON;\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @return {Object} Object with boolean hasZ and hasM keys.\r\n */\r\nfunction getHasZM(geometry) {\r\n  const layout = geometry.getLayout();\r\n  return {\r\n    hasZ: layout === 'XYZ' || layout === 'XYZM',\r\n    hasM: layout === 'XYM' || layout === 'XYZM',\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolyline} EsriJSON geometry.\r\n */\r\nfunction writeLineStringGeometry(lineString, options) {\r\n  const hasZM = getHasZM(lineString);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    paths: [\r\n      /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),\r\n    ],\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolygon} EsriJSON geometry.\r\n */\r\nfunction writePolygonGeometry(polygon, options) {\r\n  // Esri geometries use the left-hand rule\r\n  const hasZM = getHasZM(polygon);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (\r\n      polygon.getCoordinates(false)\r\n    ),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolyline} EsriJSON geometry.\r\n */\r\nfunction writeMultiLineStringGeometry(multiLineString, options) {\r\n  const hasZM = getHasZM(multiLineString);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    paths: /** @type {Array<Array<EsriJSONPosition>>} */ (\r\n      multiLineString.getCoordinates()\r\n    ),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONMultipoint} EsriJSON geometry.\r\n */\r\nfunction writeMultiPointGeometry(multiPoint, options) {\r\n  const hasZM = getHasZM(multiPoint);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    points: /** @type {Array<EsriJSONPosition>} */ (\r\n      multiPoint.getCoordinates()\r\n    ),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolygon} EsriJSON geometry.\r\n */\r\nfunction writeMultiPolygonGeometry(geometry, options) {\r\n  const hasZM = getHasZM(geometry);\r\n  const coordinates = geometry.getCoordinates(false);\r\n  const output = [];\r\n  for (let i = 0; i < coordinates.length; i++) {\r\n    for (let x = coordinates[i].length - 1; x >= 0; x--) {\r\n      output.push(coordinates[i][x]);\r\n    }\r\n  }\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONGeometry} EsriJSON geometry.\r\n */\r\nfunction writeGeometry(geometry, options) {\r\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\r\n  return geometryWriter(\r\n    transformGeometryWithOptions(geometry, true, options),\r\n    options\r\n  );\r\n}\r\n\r\nexport default EsriJSON;\r\n", "/**\r\n * @module ol/format/GeoJSON\r\n */\r\n\r\nimport Feature from '../Feature.js';\r\nimport JSONFeature from './JSONFeature.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport {\r\n  createGeometry,\r\n  createRenderFeature,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\nimport {\r\n  deflateCoordinatesArray,\r\n  deflateMultiCoordinatesArray,\r\n} from '../geom/flat/deflate.js';\r\nimport {getLayoutForStride} from '../geom/SimpleGeometry.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {isEmpty} from '../obj.js';\r\n\r\n/**\r\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\r\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\r\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\r\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\r\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\r\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\r\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\r\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\r\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\r\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\r\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\r\n * written by the format.  Options passed to read or write methods will take precedence.\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\r\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\r\n * will look for that field to set the geometry name. If both this field is set to `true`\r\n * and a `geometryName` is provided, the `geometryName` will take precedence.\r\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Feature class\r\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\r\n * the primary concern, and features are not going to be modified or round-tripped through the format,\r\n * consider using {@link module:ol/render/Feature~RenderFeature}\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GeoJSON format.\r\n *\r\n * @api\r\n */\r\nclass GeoJSON extends JSONFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super();\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection(\r\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\r\n    );\r\n\r\n    if (options.featureProjection) {\r\n      /**\r\n       * @type {import(\"../proj/Projection.js\").default}\r\n       */\r\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\r\n    }\r\n\r\n    if (options.featureClass) {\r\n      this.featureClass = options.featureClass;\r\n    }\r\n\r\n    /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n\r\n    /**\r\n     * Look for the geometry name in the feature GeoJSON\r\n     * @type {boolean|undefined}\r\n     * @private\r\n     */\r\n    this.extractGeometryName_ = options.extractGeometryName;\r\n\r\n    this.supportedMediaTypes = [\r\n      'application/geo+json',\r\n      'application/vnd.geo+json',\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Feature|RenderFeature|Array<RenderFeature>}.default} Feature.\r\n   */\r\n  readFeatureFromObject(object, options) {\r\n    /**\r\n     * @type {GeoJSONFeature}\r\n     */\r\n    let geoJSONFeature = null;\r\n    if (object['type'] === 'Feature') {\r\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\r\n    } else {\r\n      geoJSONFeature = {\r\n        'type': 'Feature',\r\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\r\n        'properties': null,\r\n      };\r\n    }\r\n\r\n    const geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\r\n    if (this.featureClass === RenderFeature) {\r\n      return createRenderFeature(\r\n        {\r\n          geometry,\r\n          id: geoJSONFeature['id'],\r\n          properties: geoJSONFeature['properties'],\r\n        },\r\n        options\r\n      );\r\n    }\r\n\r\n    const feature = new Feature();\r\n    if (this.geometryName_) {\r\n      feature.setGeometryName(this.geometryName_);\r\n    } else if (\r\n      this.extractGeometryName_ &&\r\n      'geometry_name' in geoJSONFeature !== undefined\r\n    ) {\r\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\r\n    }\r\n    feature.setGeometry(createGeometry(geometry, options));\r\n\r\n    if ('id' in geoJSONFeature) {\r\n      feature.setId(geoJSONFeature['id']);\r\n    }\r\n\r\n    if (geoJSONFeature['properties']) {\r\n      feature.setProperties(geoJSONFeature['properties'], true);\r\n    }\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature|RenderFeature>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\r\n    /** @type {Array<Feature|RenderFeature|Array<RenderFeature>>} */\r\n    let features = null;\r\n    if (geoJSONObject['type'] === 'FeatureCollection') {\r\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\r\n        object\r\n      );\r\n      features = [];\r\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\r\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\r\n        const featureObject = this.readFeatureFromObject(\r\n          geoJSONFeatures[i],\r\n          options\r\n        );\r\n        if (!featureObject) {\r\n          continue;\r\n        }\r\n        features.push(featureObject);\r\n      }\r\n    } else {\r\n      features = [this.readFeatureFromObject(object, options)];\r\n    }\r\n    return features.flat();\r\n  }\r\n\r\n  /**\r\n   * @param {GeoJSONGeometry} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return readGeometry(object, options);\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    const crs = object['crs'];\r\n    let projection;\r\n    if (crs) {\r\n      if (crs['type'] == 'name') {\r\n        projection = getProjection(crs['properties']['name']);\r\n      } else if (crs['type'] === 'EPSG') {\r\n        projection = getProjection('EPSG:' + crs['properties']['code']);\r\n      } else {\r\n        throw new Error('Unknown SRS type');\r\n      }\r\n    } else {\r\n      projection = this.dataProjection;\r\n    }\r\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a GeoJSON Feature object.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeature} Object.\r\n   * @api\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    options = this.adaptOptions(options);\r\n\r\n    /** @type {GeoJSONFeature} */\r\n    const object = {\r\n      'type': 'Feature',\r\n      geometry: null,\r\n      properties: null,\r\n    };\r\n\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      object.id = id;\r\n    }\r\n\r\n    if (!feature.hasProperties()) {\r\n      return object;\r\n    }\r\n\r\n    const properties = feature.getProperties();\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      object.geometry = writeGeometry(geometry, options);\r\n\r\n      delete properties[feature.getGeometryName()];\r\n    }\r\n\r\n    if (!isEmpty(properties)) {\r\n      object.properties = properties;\r\n    }\r\n\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as a GeoJSON object.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\r\n   * @api\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const objects = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      objects.push(this.writeFeatureObject(features[i], options));\r\n    }\r\n    return {\r\n      type: 'FeatureCollection',\r\n      features: objects,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as a GeoJSON object.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\r\n   * @api\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return writeGeometry(geometry, this.adaptOptions(options));\r\n  }\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\r\n */\r\nfunction readGeometryInternal(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n\r\n  /** @type {import(\"./Feature.js\").GeometryObject} */\r\n  let geometry;\r\n  switch (object['type']) {\r\n    case 'Point': {\r\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\r\n      break;\r\n    }\r\n    case 'LineString': {\r\n      geometry = readLineStringGeometry(\r\n        /** @type {GeoJSONLineString} */ (object)\r\n      );\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\r\n      break;\r\n    }\r\n    case 'MultiPoint': {\r\n      geometry = readMultiPointGeometry(\r\n        /** @type {GeoJSONMultiPoint} */ (object)\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiLineString': {\r\n      geometry = readMultiLineStringGeometry(\r\n        /** @type {GeoJSONMultiLineString} */ (object)\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      geometry = readMultiPolygonGeometry(\r\n        /** @type {GeoJSONMultiPolygon} */ (object)\r\n      );\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      geometry = readGeometryCollectionGeometry(\r\n        /** @type {GeoJSONGeometryCollection} */ (object)\r\n      );\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\r\n    }\r\n  }\r\n  return geometry;\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nfunction readGeometry(object, options) {\r\n  const geometryObject = readGeometryInternal(object, options);\r\n  return createGeometry(geometryObject, options);\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\r\n */\r\nfunction readGeometryCollectionGeometry(object, options) {\r\n  const geometries = object['geometries'].map(\r\n    /**\r\n     * @param {GeoJSONGeometry} geometry Geometry.\r\n     * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\r\n     */\r\n    function (geometry) {\r\n      return readGeometryInternal(geometry, options);\r\n    }\r\n  );\r\n  return geometries;\r\n}\r\n\r\n/**\r\n * @param {GeoJSONPoint} object Input object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\r\n */\r\nfunction readPointGeometry(object) {\r\n  const flatCoordinates = object['coordinates'];\r\n  return {\r\n    type: 'Point',\r\n    flatCoordinates,\r\n    layout: getLayoutForStride(flatCoordinates.length),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\r\n */\r\nfunction readLineStringGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = coordinates.flat();\r\n  return {\r\n    type: 'LineString',\r\n    flatCoordinates,\r\n    ends: [flatCoordinates.length],\r\n    layout: getLayoutForStride(coordinates[0].length),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\r\n */\r\nfunction readMultiLineStringGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const stride = coordinates[0][0].length;\r\n  const flatCoordinates = [];\r\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\r\n  return {\r\n    type: 'MultiLineString',\r\n    flatCoordinates,\r\n    ends,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiPoint} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\r\n */\r\nfunction readMultiPointGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  return {\r\n    type: 'MultiPoint',\r\n    flatCoordinates: coordinates.flat(),\r\n    layout: getLayoutForStride(coordinates[0].length),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\r\n */\r\nfunction readMultiPolygonGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = [];\r\n  const stride = coordinates[0][0][0].length;\r\n  const endss = deflateMultiCoordinatesArray(\r\n    flatCoordinates,\r\n    0,\r\n    coordinates,\r\n    stride\r\n  );\r\n  return {\r\n    type: 'MultiPolygon',\r\n    flatCoordinates,\r\n    ends: endss,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\r\n */\r\nfunction readPolygonGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = [];\r\n  const stride = coordinates[0][0].length;\r\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\r\n  return {\r\n    type: 'Polygon',\r\n    flatCoordinates,\r\n    ends,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeGeometry(geometry, options) {\r\n  geometry = transformGeometryWithOptions(geometry, true, options);\r\n\r\n  const type = geometry.getType();\r\n\r\n  /** @type {GeoJSONGeometry} */\r\n  let geoJSON;\r\n  switch (type) {\r\n    case 'Point': {\r\n      geoJSON = writePointGeometry(\r\n        /** @type {import(\"../geom/Point.js\").default} */ (geometry),\r\n        options\r\n      );\r\n      break;\r\n    }\r\n    case 'LineString': {\r\n      geoJSON = writeLineStringGeometry(\r\n        /** @type {import(\"../geom/LineString.js\").default} */ (geometry),\r\n        options\r\n      );\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      geoJSON = writePolygonGeometry(\r\n        /** @type {import(\"../geom/Polygon.js\").default} */ (geometry),\r\n        options\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPoint': {\r\n      geoJSON = writeMultiPointGeometry(\r\n        /** @type {import(\"../geom/MultiPoint.js\").default} */ (geometry),\r\n        options\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiLineString': {\r\n      geoJSON = writeMultiLineStringGeometry(\r\n        /** @type {import(\"../geom/MultiLineString.js\").default} */ (geometry),\r\n        options\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      geoJSON = writeMultiPolygonGeometry(\r\n        /** @type {import(\"../geom/MultiPolygon.js\").default} */ (geometry),\r\n        options\r\n      );\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      geoJSON = writeGeometryCollectionGeometry(\r\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ),\r\n        options\r\n      );\r\n      break;\r\n    }\r\n    case 'Circle': {\r\n      geoJSON = {\r\n        type: 'GeometryCollection',\r\n        geometries: [],\r\n      };\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return geoJSON;\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\r\n */\r\nfunction writeGeometryCollectionGeometry(geometry, options) {\r\n  options = Object.assign({}, options);\r\n  delete options.featureProjection;\r\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\r\n    return writeGeometry(geometry, options);\r\n  });\r\n  return {\r\n    type: 'GeometryCollection',\r\n    geometries: geometries,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeLineStringGeometry(geometry, options) {\r\n  return {\r\n    type: 'LineString',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiLineStringGeometry(geometry, options) {\r\n  return {\r\n    type: 'MultiLineString',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPointGeometry(geometry, options) {\r\n  return {\r\n    type: 'MultiPoint',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPolygonGeometry(geometry, options) {\r\n  let right;\r\n  if (options) {\r\n    right = options.rightHanded;\r\n  }\r\n  return {\r\n    type: 'MultiPolygon',\r\n    coordinates: geometry.getCoordinates(right),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePointGeometry(geometry, options) {\r\n  return {\r\n    type: 'Point',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePolygonGeometry(geometry, options) {\r\n  let right;\r\n  if (options) {\r\n    right = options.rightHanded;\r\n  }\r\n  return {\r\n    type: 'Polygon',\r\n    coordinates: geometry.getCoordinates(right),\r\n  };\r\n}\r\n\r\nexport default GeoJSON;\r\n", "/**\r\n * @module ol/xml\r\n */\r\nimport {extend} from './array.js';\r\n\r\n/**\r\n * When using {@link module:ol/xml.makeChildAppender} or\r\n * {@link module:ol/xml.makeSimpleNodeFactory}, the top `objectStack` item needs\r\n * to have this structure.\r\n * @typedef {Object} NodeStackItem\r\n * @property {Element} node Node.\r\n */\r\n\r\n/**\r\n * @typedef {function(Element, Array<*>): void} Parser\r\n */\r\n\r\n/**\r\n * @typedef {function(Element, *, Array<*>): void} Serializer\r\n */\r\n\r\n/**\r\n * @type {string}\r\n */\r\nexport const XML_SCHEMA_INSTANCE_URI =\r\n  'http://www.w3.org/2001/XMLSchema-instance';\r\n\r\n/**\r\n * @param {string} namespaceURI Namespace URI.\r\n * @param {string} qualifiedName Qualified name.\r\n * @return {Element} Node.\r\n */\r\nexport function createElementNS(namespaceURI, qualifiedName) {\r\n  return getDocument().createElementNS(namespaceURI, qualifiedName);\r\n}\r\n\r\n/**\r\n * Recursively grab all text content of child nodes into a single string.\r\n * @param {Node} node Node.\r\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\r\n * breaks.\r\n * @return {string} All text content.\r\n * @api\r\n */\r\nexport function getAllTextContent(node, normalizeWhitespace) {\r\n  return getAllTextContent_(node, normalizeWhitespace, []).join('');\r\n}\r\n\r\n/**\r\n * Recursively grab all text content of child nodes into a single string.\r\n * @param {Node} node Node.\r\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\r\n * breaks.\r\n * @param {Array<string>} accumulator Accumulator.\r\n * @private\r\n * @return {Array<string>} Accumulator.\r\n */\r\nexport function getAllTextContent_(node, normalizeWhitespace, accumulator) {\r\n  if (\r\n    node.nodeType == Node.CDATA_SECTION_NODE ||\r\n    node.nodeType == Node.TEXT_NODE\r\n  ) {\r\n    if (normalizeWhitespace) {\r\n      accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\r\n    } else {\r\n      accumulator.push(node.nodeValue);\r\n    }\r\n  } else {\r\n    let n;\r\n    for (n = node.firstChild; n; n = n.nextSibling) {\r\n      getAllTextContent_(n, normalizeWhitespace, accumulator);\r\n    }\r\n  }\r\n  return accumulator;\r\n}\r\n\r\n/**\r\n * @param {Object} object Object.\r\n * @return {boolean} Is a document.\r\n */\r\nexport function isDocument(object) {\r\n  return 'documentElement' in object;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {?string} namespaceURI Namespace URI.\r\n * @param {string} name Attribute name.\r\n * @return {string} Value\r\n */\r\nexport function getAttributeNS(node, namespaceURI, name) {\r\n  return node.getAttributeNS(namespaceURI, name) || '';\r\n}\r\n\r\n/**\r\n * Parse an XML string to an XML Document.\r\n * @param {string} xml XML.\r\n * @return {Document} Document.\r\n * @api\r\n */\r\nexport function parse(xml) {\r\n  return new DOMParser().parseFromString(xml, 'application/xml');\r\n}\r\n\r\n/**\r\n * Make an array extender function for extending the array at the top of the\r\n * object stack.\r\n * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeArrayExtender(valueReader, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const array = /** @type {Array<*>} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        extend(array, value);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an array pusher function for pushing to the array at the top of the\r\n * object stack.\r\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeArrayPusher(valueReader, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const array = /** @type {Array<*>} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        array.push(value);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an object stack replacer function for replacing the object at the\r\n * top of the stack.\r\n * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeReplacer(valueReader, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        objectStack[objectStack.length - 1] = value;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an object property pusher function for adding a property to the\r\n * object at the top of the stack.\r\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\r\n * @param {string} [property] Property.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeObjectPropertyPusher(valueReader, property, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const object = /** @type {!Object} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        const name = property !== undefined ? property : node.localName;\r\n        let array;\r\n        if (name in object) {\r\n          array = object[name];\r\n        } else {\r\n          array = [];\r\n          object[name] = array;\r\n        }\r\n        array.push(value);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an object property setter function.\r\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\r\n * @param {string} [property] Property.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeObjectPropertySetter(valueReader, property, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const object = /** @type {!Object} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        const name = property !== undefined ? property : node.localName;\r\n        object[name] = value;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Create a serializer that appends nodes written by its `nodeWriter` to its\r\n * designated parent. The parent is the `node` of the\r\n * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.\r\n * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.\r\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\r\n * @return {Serializer} Serializer.\r\n * @template T, V\r\n */\r\nexport function makeChildAppender(nodeWriter, thisArg) {\r\n  return function (node, value, objectStack) {\r\n    nodeWriter.call(\r\n      thisArg !== undefined ? thisArg : this,\r\n      node,\r\n      value,\r\n      objectStack\r\n    );\r\n    const parent = /** @type {NodeStackItem} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const parentNode = parent.node;\r\n    parentNode.appendChild(node);\r\n  };\r\n}\r\n\r\n/**\r\n * Create a serializer that calls the provided `nodeWriter` from\r\n * {@link module:ol/xml.serialize}. This can be used by the parent writer to have the\r\n * `nodeWriter` called with an array of values when the `nodeWriter` was\r\n * designed to serialize a single item. An example would be a LineString\r\n * geometry writer, which could be reused for writing MultiLineString\r\n * geometries.\r\n * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.\r\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\r\n * @return {Serializer} Serializer.\r\n * @template T, V\r\n */\r\nexport function makeArraySerializer(nodeWriter, thisArg) {\r\n  let serializersNS, nodeFactory;\r\n  return function (node, value, objectStack) {\r\n    if (serializersNS === undefined) {\r\n      serializersNS = {};\r\n      const serializers = {};\r\n      serializers[node.localName] = nodeWriter;\r\n      serializersNS[node.namespaceURI] = serializers;\r\n      nodeFactory = makeSimpleNodeFactory(node.localName);\r\n    }\r\n    serialize(serializersNS, nodeFactory, value, objectStack);\r\n  };\r\n}\r\n\r\n/**\r\n * Create a node factory which can use the `keys` passed to\r\n * {@link module:ol/xml.serialize} or {@link module:ol/xml.pushSerializeAndPop} as node names,\r\n * or a fixed node name. The namespace of the created nodes can either be fixed,\r\n * or the parent namespace will be used.\r\n * @param {string} [fixedNodeName] Fixed node name which will be used for all\r\n *     created nodes. If not provided, the 3rd argument to the resulting node\r\n *     factory needs to be provided and will be the nodeName.\r\n * @param {string} [fixedNamespaceURI] Fixed namespace URI which will be used for\r\n *     all created nodes. If not provided, the namespace of the parent node will\r\n *     be used.\r\n * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.\r\n */\r\nexport function makeSimpleNodeFactory(fixedNodeName, fixedNamespaceURI) {\r\n  return (\r\n    /**\r\n     * @param {*} value Value.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @param {string} [newNodeName] Node name.\r\n     * @return {Node} Node.\r\n     */\r\n    function (value, objectStack, newNodeName) {\r\n      const context = /** @type {NodeStackItem} */ (\r\n        objectStack[objectStack.length - 1]\r\n      );\r\n      const node = context.node;\r\n      let nodeName = fixedNodeName;\r\n      if (nodeName === undefined) {\r\n        nodeName = newNodeName;\r\n      }\r\n\r\n      const namespaceURI =\r\n        fixedNamespaceURI !== undefined ? fixedNamespaceURI : node.namespaceURI;\r\n      return createElementNS(namespaceURI, /** @type {string} */ (nodeName));\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * A node factory that creates a node using the parent's `namespaceURI` and the\r\n * `nodeName` passed by {@link module:ol/xml.serialize} or\r\n * {@link module:ol/xml.pushSerializeAndPop} to the node factory.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nexport const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();\r\n\r\n/**\r\n * Create an array of `values` to be used with {@link module:ol/xml.serialize} or\r\n * {@link module:ol/xml.pushSerializeAndPop}, where `orderedKeys` has to be provided as\r\n * `key` argument.\r\n * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can\r\n *     be a subset of the `orderedKeys`.\r\n * @param {Array<string>} orderedKeys Keys in the order of the sequence.\r\n * @return {Array<*>} Values in the order of the sequence. The resulting array\r\n *     has the same length as the `orderedKeys` array. Values that are not\r\n *     present in `object` will be `undefined` in the resulting array.\r\n */\r\nexport function makeSequence(object, orderedKeys) {\r\n  const length = orderedKeys.length;\r\n  const sequence = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    sequence[i] = object[orderedKeys[i]];\r\n  }\r\n  return sequence;\r\n}\r\n\r\n/**\r\n * Create a namespaced structure, using the same values for each namespace.\r\n * This can be used as a starting point for versioned parsers, when only a few\r\n * values are version specific.\r\n * @param {Array<string>} namespaceURIs Namespace URIs.\r\n * @param {T} structure Structure.\r\n * @param {Object<string, T>} [structureNS] Namespaced structure to add to.\r\n * @return {Object<string, T>} Namespaced structure.\r\n * @template T\r\n */\r\nexport function makeStructureNS(namespaceURIs, structure, structureNS) {\r\n  structureNS = structureNS !== undefined ? structureNS : {};\r\n  let i, ii;\r\n  for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\r\n    structureNS[namespaceURIs[i]] = structure;\r\n  }\r\n  return structureNS;\r\n}\r\n\r\n/**\r\n * Parse a node using the parsers and object stack.\r\n * @param {Object<string, Object<string, Parser>>} parsersNS\r\n *     Parsers by namespace.\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {*} [thisArg] The object to use as `this`.\r\n */\r\nexport function parseNode(parsersNS, node, objectStack, thisArg) {\r\n  let n;\r\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n    const parsers = parsersNS[n.namespaceURI];\r\n    if (parsers !== undefined) {\r\n      const parser = parsers[n.localName];\r\n      if (parser !== undefined) {\r\n        parser.call(thisArg, n, objectStack);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Push an object on top of the stack, parse and return the popped object.\r\n * @param {T} object Object.\r\n * @param {Object<string, Object<string, Parser>>} parsersNS\r\n *     Parsers by namespace.\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {*} [thisArg] The object to use as `this`.\r\n * @return {T} Object.\r\n * @template T\r\n */\r\nexport function pushParseAndPop(object, parsersNS, node, objectStack, thisArg) {\r\n  objectStack.push(object);\r\n  parseNode(parsersNS, node, objectStack, thisArg);\r\n  return /** @type {T} */ (objectStack.pop());\r\n}\r\n\r\n/**\r\n * Walk through an array of `values` and call a serializer for each value.\r\n * @param {Object<string, Object<string, Serializer>>} serializersNS\r\n *     Namespaced serializers.\r\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\r\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\r\n *     will be used to choose a node writer from `serializersNS`. This\r\n *     separation allows us to decide what kind of node to create, depending on\r\n *     the value we want to serialize. An example for this would be different\r\n *     geometry writers based on the geometry type.\r\n * @param {Array<*>} values Values to serialize. An example would be an array\r\n *     of {@link module:ol/Feature~Feature} instances.\r\n * @param {Array<*>} objectStack Node stack.\r\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\r\n *     `nodeFactory`. This is used for serializing object literals where the\r\n *     node name relates to the property key. The array length of `keys` has\r\n *     to match the length of `values`. For serializing a sequence, `keys`\r\n *     determines the order of the sequence.\r\n * @param {T} [thisArg] The object to use as `this` for the node factory and\r\n *     serializers.\r\n * @template T\r\n */\r\nexport function serialize(\r\n  serializersNS,\r\n  nodeFactory,\r\n  values,\r\n  objectStack,\r\n  keys,\r\n  thisArg\r\n) {\r\n  const length = (keys !== undefined ? keys : values).length;\r\n  let value, node;\r\n  for (let i = 0; i < length; ++i) {\r\n    value = values[i];\r\n    if (value !== undefined) {\r\n      node = nodeFactory.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        value,\r\n        objectStack,\r\n        keys !== undefined ? keys[i] : undefined\r\n      );\r\n      if (node !== undefined) {\r\n        serializersNS[node.namespaceURI][node.localName].call(\r\n          thisArg,\r\n          node,\r\n          value,\r\n          objectStack\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {O} object Object.\r\n * @param {Object<string, Object<string, Serializer>>} serializersNS\r\n *     Namespaced serializers.\r\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\r\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\r\n *     will be used to choose a node writer from `serializersNS`. This\r\n *     separation allows us to decide what kind of node to create, depending on\r\n *     the value we want to serialize. An example for this would be different\r\n *     geometry writers based on the geometry type.\r\n * @param {Array<*>} values Values to serialize. An example would be an array\r\n *     of {@link module:ol/Feature~Feature} instances.\r\n * @param {Array<*>} objectStack Node stack.\r\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\r\n *     `nodeFactory`. This is used for serializing object literals where the\r\n *     node name relates to the property key. The array length of `keys` has\r\n *     to match the length of `values`. For serializing a sequence, `keys`\r\n *     determines the order of the sequence.\r\n * @param {T} [thisArg] The object to use as `this` for the node factory and\r\n *     serializers.\r\n * @return {O|undefined} Object.\r\n * @template O, T\r\n */\r\nexport function pushSerializeAndPop(\r\n  object,\r\n  serializersNS,\r\n  nodeFactory,\r\n  values,\r\n  objectStack,\r\n  keys,\r\n  thisArg\r\n) {\r\n  objectStack.push(object);\r\n  serialize(serializersNS, nodeFactory, values, objectStack, keys, thisArg);\r\n  return /** @type {O|undefined} */ (objectStack.pop());\r\n}\r\n\r\nlet xmlSerializer_ = undefined;\r\n\r\n/**\r\n * Register a XMLSerializer. Can be used  to inject a XMLSerializer\r\n * where there is no globally available implementation.\r\n *\r\n * @param {XMLSerializer} xmlSerializer A XMLSerializer.\r\n * @api\r\n */\r\nexport function registerXMLSerializer(xmlSerializer) {\r\n  xmlSerializer_ = xmlSerializer;\r\n}\r\n\r\n/**\r\n * @return {XMLSerializer} The XMLSerializer.\r\n */\r\nexport function getXMLSerializer() {\r\n  if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {\r\n    xmlSerializer_ = new XMLSerializer();\r\n  }\r\n  return xmlSerializer_;\r\n}\r\n\r\nlet document_ = undefined;\r\n\r\n/**\r\n * Register a Document to use when creating nodes for XML serializations. Can be used\r\n * to inject a Document where there is no globally available implementation.\r\n *\r\n * @param {Document} document A Document.\r\n * @api\r\n */\r\nexport function registerDocument(document) {\r\n  document_ = document;\r\n}\r\n\r\n/**\r\n * Get a document that should be used when creating nodes for XML serializations.\r\n * @return {Document} The document.\r\n */\r\nexport function getDocument() {\r\n  if (document_ === undefined && typeof document !== 'undefined') {\r\n    document_ = document.implementation.createDocument('', '', null);\r\n  }\r\n  return document_;\r\n}\r\n", "/**\r\n * @module ol/format/XMLFeature\r\n */\r\nimport FeatureFormat from '../format/Feature.js';\r\nimport {abstract} from '../util.js';\r\nimport {extend} from '../array.js';\r\nimport {getXMLSerializer, isDocument, parse} from '../xml.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for XML feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass XMLFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {XMLSerializer}\r\n     * @private\r\n     */\r\n    this.xmlSerializer_ = getXMLSerializer();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return 'xml';\r\n  }\r\n\r\n  /**\r\n   * Read a single feature.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, options) {\r\n    if (!source) {\r\n      return null;\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeatureFromDocument(doc, options);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readFeatureFromDocument(\r\n        /** @type {Document} */ (source),\r\n        options\r\n      );\r\n    }\r\n    return this.readFeatureFromNode(/** @type {Element} */ (source), options);\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromDocument(doc, options) {\r\n    const features = this.readFeaturesFromDocument(doc, options);\r\n    if (features.length > 0) {\r\n      return features[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromNode(node, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Read all features from a feature collection.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    if (!source) {\r\n      return [];\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeaturesFromDocument(doc, options);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readFeaturesFromDocument(\r\n        /** @type {Document} */ (source),\r\n        options\r\n      );\r\n    }\r\n    return this.readFeaturesFromNode(/** @type {Element} */ (source), options);\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromDocument(doc, options) {\r\n    /** @type {Array<import(\"../Feature.js\").default>} */\r\n    const features = [];\r\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        extend(\r\n          features,\r\n          this.readFeaturesFromNode(/** @type {Element} */ (n), options)\r\n        );\r\n      }\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometry(source, options) {\r\n    if (!source) {\r\n      return null;\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readGeometryFromDocument(doc, options);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readGeometryFromDocument(\r\n        /** @type {Document} */ (source),\r\n        options\r\n      );\r\n    }\r\n    return this.readGeometryFromNode(/** @type {Element} */ (source), options);\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromDocument(doc, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromNode(node, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Read the projection from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    if (!source) {\r\n      return null;\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readProjectionFromDocument(doc);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readProjectionFromDocument(/** @type {Document} */ (source));\r\n    }\r\n    return this.readProjectionFromNode(/** @type {Element} */ (source));\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromDocument(doc) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromNode(node) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   */\r\n  writeFeature(feature, options) {\r\n    const node = this.writeFeatureNode(feature, options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @protected\r\n   * @return {Node} Node.\r\n   */\r\n  writeFeatureNode(feature, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Result.\r\n   * @api\r\n   */\r\n  writeFeatures(features, options) {\r\n    const node = this.writeFeaturesNode(features, options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as string.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded geometry.\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    const node = this.writeGeometryNode(geometry, options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   */\r\n  writeGeometryNode(geometry, options) {\r\n    return null; // not implemented\r\n  }\r\n}\r\n\r\nexport default XMLFeature;\r\n", "/**\r\n * @module ol/format/GMLBase\r\n */\r\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\r\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\r\n// envelopes/extents, only geometries!\r\nimport Feature from '../Feature.js';\r\nimport Geometry from '../geom/Geometry.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport LinearRing from '../geom/LinearRing.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {extend} from '../array.js';\r\nimport {\r\n  getAllTextContent,\r\n  getAttributeNS,\r\n  makeArrayPusher,\r\n  makeReplacer,\r\n  parseNode,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  transformExtentWithOptions,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const GMLNS = 'http://www.opengis.net/gml';\r\n\r\n/**\r\n * A regular expression that matches if a string only contains whitespace\r\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc.\r\n *\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst ONLY_WHITESPACE_RE = /^\\s*$/;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string, string>|string} [featureNS] Feature\r\n * namespace. If not defined will be derived from GML. If multiple\r\n * feature types have been configured which come from different feature\r\n * namespaces, this will be an object with the keys being the prefixes used\r\n * in the entries of featureType array. The values of the object will be the\r\n * feature namespaces themselves. So for instance there might be a featureType\r\n * item `topp:states` in the `featureType` array and then there will be a key\r\n * `topp` in the featureNS object with value `http://www.openplans.org/topp`.\r\n * @property {Array<string>|string} [featureType] Feature type(s) to parse.\r\n * If multiple feature types need to be configured\r\n * which come from different feature namespaces, `featureNS` will be an object\r\n * with the keys being the prefixes used in the entries of featureType array.\r\n * The values of the object will be the feature namespaces themselves.\r\n * So for instance there might be a featureType item `topp:states` and then\r\n * there will be a key named `topp` in the featureNS object with value\r\n * `http://www.openplans.org/topp`.\r\n * @property {string} [srsName] srsName to use when writing geometries.\r\n * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon\r\n * elements. This also affects the elements in multi-part geometries.\r\n * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString\r\n * elements. This also affects the elements in multi-part geometries.\r\n * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.\r\n * Since the latter is deprecated in GML 3.\r\n * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of\r\n * gml:MultiPolygon. Since the latter is deprecated in GML 3.\r\n * @property {string} [schemaLocation] Optional schemaLocation to use when\r\n * writing out the GML, this will override the default provided.\r\n * @property {boolean} [hasZ=false] If coordinates have a Z value.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Feature base format for reading and writing data in the GML format.\r\n * This class cannot be instantiated, it contains only base content that\r\n * is shared with versioned format classes GML2 and GML3.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass GMLBase extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<string>|string|undefined}\r\n     */\r\n    this.featureType = options.featureType;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Object<string, string>|string|undefined}\r\n     */\r\n    this.featureNS = options.featureNS;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {string|undefined}\r\n     */\r\n    this.srsName = options.srsName;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = '';\r\n\r\n    /**\r\n     * @type {Object<string, Object<string, Object>>}\r\n     */\r\n    this.FEATURE_COLLECTION_PARSERS = {};\r\n    this.FEATURE_COLLECTION_PARSERS[this.namespace] = {\r\n      'featureMember': makeArrayPusher(this.readFeaturesInternal),\r\n      'featureMembers': makeReplacer(this.readFeaturesInternal),\r\n    };\r\n\r\n    this.supportedMediaTypes = ['application/gml+xml'];\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<Feature> | undefined} Features.\r\n   */\r\n  readFeaturesInternal(node, objectStack) {\r\n    const localName = node.localName;\r\n    let features = null;\r\n    if (localName == 'FeatureCollection') {\r\n      features = pushParseAndPop(\r\n        [],\r\n        this.FEATURE_COLLECTION_PARSERS,\r\n        node,\r\n        objectStack,\r\n        this\r\n      );\r\n    } else if (\r\n      localName == 'featureMembers' ||\r\n      localName == 'featureMember' ||\r\n      localName == 'member'\r\n    ) {\r\n      const context = objectStack[0];\r\n      let featureType = context['featureType'];\r\n      let featureNS = context['featureNS'];\r\n      const prefix = 'p';\r\n      const defaultPrefix = 'p0';\r\n      if (!featureType && node.childNodes) {\r\n        (featureType = []), (featureNS = {});\r\n        for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {\r\n          const child = /** @type {Element} */ (node.childNodes[i]);\r\n          if (child.nodeType === 1) {\r\n            const ft = child.nodeName.split(':').pop();\r\n            if (!featureType.includes(ft)) {\r\n              let key = '';\r\n              let count = 0;\r\n              const uri = child.namespaceURI;\r\n              for (const candidate in featureNS) {\r\n                if (featureNS[candidate] === uri) {\r\n                  key = candidate;\r\n                  break;\r\n                }\r\n                ++count;\r\n              }\r\n              if (!key) {\r\n                key = prefix + count;\r\n                featureNS[key] = uri;\r\n              }\r\n              featureType.push(key + ':' + ft);\r\n            }\r\n          }\r\n        }\r\n        if (localName != 'featureMember') {\r\n          // recheck featureType for each featureMember\r\n          context['featureType'] = featureType;\r\n          context['featureNS'] = featureNS;\r\n        }\r\n      }\r\n      if (typeof featureNS === 'string') {\r\n        const ns = featureNS;\r\n        featureNS = {};\r\n        featureNS[defaultPrefix] = ns;\r\n      }\r\n      /** @type {Object<string, Object<string, import(\"../xml.js\").Parser>>} */\r\n      const parsersNS = {};\r\n      const featureTypes = Array.isArray(featureType)\r\n        ? featureType\r\n        : [featureType];\r\n      for (const p in featureNS) {\r\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\r\n        const parsers = {};\r\n        for (let i = 0, ii = featureTypes.length; i < ii; ++i) {\r\n          const featurePrefix = featureTypes[i].includes(':')\r\n            ? featureTypes[i].split(':')[0]\r\n            : defaultPrefix;\r\n          if (featurePrefix === p) {\r\n            parsers[featureTypes[i].split(':').pop()] =\r\n              localName == 'featureMembers'\r\n                ? makeArrayPusher(this.readFeatureElement, this)\r\n                : makeReplacer(this.readFeatureElement, this);\r\n          }\r\n        }\r\n        parsersNS[featureNS[p]] = parsers;\r\n      }\r\n      if (localName == 'featureMember' || localName == 'member') {\r\n        features = pushParseAndPop(undefined, parsersNS, node, objectStack);\r\n      } else {\r\n        features = pushParseAndPop([], parsersNS, node, objectStack);\r\n      }\r\n    }\r\n    if (features === null) {\r\n      features = [];\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent|undefined} Geometry.\r\n   */\r\n  readGeometryOrExtent(node, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[0]);\r\n    context['srsName'] = node.firstElementChild.getAttribute('srsName');\r\n    context['srsDimension'] =\r\n      node.firstElementChild.getAttribute('srsDimension');\r\n    return pushParseAndPop(\r\n      null,\r\n      this.GEOMETRY_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../extent.js\").Extent|undefined} Geometry.\r\n   */\r\n  readExtentElement(node, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[0]);\r\n    const extent = /** @type {import(\"../extent.js\").Extent} */ (\r\n      this.readGeometryOrExtent(node, objectStack)\r\n    );\r\n    return extent ? transformExtentWithOptions(extent, context) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../geom/Geometry.js\").default|undefined} Geometry.\r\n   */\r\n  readGeometryElement(node, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[0]);\r\n    const geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n      this.readGeometryOrExtent(node, objectStack)\r\n    );\r\n    return geometry\r\n      ? transformGeometryWithOptions(geometry, false, context)\r\n      : undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {boolean} asFeature whether result should be wrapped as a feature.\r\n   * @return {Feature|Object} Feature\r\n   */\r\n  readFeatureElementInternal(node, objectStack, asFeature) {\r\n    let geometryName;\r\n    const values = {};\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      let value;\r\n      const localName = n.localName;\r\n      // first, check if it is simple attribute\r\n      if (\r\n        n.childNodes.length === 0 ||\r\n        (n.childNodes.length === 1 &&\r\n          (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))\r\n      ) {\r\n        value = getAllTextContent(n, false);\r\n        if (ONLY_WHITESPACE_RE.test(value)) {\r\n          value = undefined;\r\n        }\r\n      } else {\r\n        if (asFeature) {\r\n          //if feature, try it as a geometry or extent\r\n          value =\r\n            localName === 'boundedBy'\r\n              ? this.readExtentElement(n, objectStack)\r\n              : this.readGeometryElement(n, objectStack);\r\n        }\r\n        if (!value) {\r\n          //if not a geometry or not a feature, treat it as a complex attribute\r\n          value = this.readFeatureElementInternal(n, objectStack, false);\r\n        } else if (localName !== 'boundedBy') {\r\n          // boundedBy is an extent and must not be considered as a geometry\r\n          geometryName = localName;\r\n        }\r\n      }\r\n\r\n      const len = n.attributes.length;\r\n      if (len > 0 && !(value instanceof Geometry)) {\r\n        value = {_content_: value};\r\n        for (let i = 0; i < len; i++) {\r\n          const attName = n.attributes[i].name;\r\n          value[attName] = n.attributes[i].value;\r\n        }\r\n      }\r\n\r\n      if (values[localName]) {\r\n        if (!(values[localName] instanceof Array)) {\r\n          values[localName] = [values[localName]];\r\n        }\r\n        values[localName].push(value);\r\n      } else {\r\n        values[localName] = value;\r\n      }\r\n    }\r\n    if (!asFeature) {\r\n      return values;\r\n    }\r\n    const feature = new Feature(values);\r\n    if (geometryName) {\r\n      feature.setGeometryName(geometryName);\r\n    }\r\n    const fid =\r\n      node.getAttribute('fid') || getAttributeNS(node, this.namespace, 'id');\r\n    if (fid) {\r\n      feature.setId(fid);\r\n    }\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Feature} Feature.\r\n   */\r\n  readFeatureElement(node, objectStack) {\r\n    return this.readFeatureElementInternal(node, objectStack, true);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Point|undefined} Point.\r\n   */\r\n  readPoint(node, objectStack) {\r\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\r\n    if (flatCoordinates) {\r\n      return new Point(flatCoordinates, 'XYZ');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiPoint|undefined} MultiPoint.\r\n   */\r\n  readMultiPoint(node, objectStack) {\r\n    /** @type {Array<Array<number>>} */\r\n    const coordinates = pushParseAndPop(\r\n      [],\r\n      this.MULTIPOINT_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (coordinates) {\r\n      return new MultiPoint(coordinates);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiLineString|undefined} MultiLineString.\r\n   */\r\n  readMultiLineString(node, objectStack) {\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = pushParseAndPop(\r\n      [],\r\n      this.MULTILINESTRING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (lineStrings) {\r\n      return new MultiLineString(lineStrings);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiPolygon|undefined} MultiPolygon.\r\n   */\r\n  readMultiPolygon(node, objectStack) {\r\n    /** @type {Array<Polygon>} */\r\n    const polygons = pushParseAndPop(\r\n      [],\r\n      this.MULTIPOLYGON_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (polygons) {\r\n      return new MultiPolygon(polygons);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  pointMemberParser(node, objectStack) {\r\n    parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  lineStringMemberParser(node, objectStack) {\r\n    parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  polygonMemberParser(node, objectStack) {\r\n    parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {LineString|undefined} LineString.\r\n   */\r\n  readLineString(node, objectStack) {\r\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\r\n    if (flatCoordinates) {\r\n      const lineString = new LineString(flatCoordinates, 'XYZ');\r\n      return lineString;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} LinearRing flat coordinates.\r\n   */\r\n  readFlatLinearRing(node, objectStack) {\r\n    const ring = pushParseAndPop(\r\n      null,\r\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (ring) {\r\n      return ring;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {LinearRing|undefined} LinearRing.\r\n   */\r\n  readLinearRing(node, objectStack) {\r\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\r\n    if (flatCoordinates) {\r\n      return new LinearRing(flatCoordinates, 'XYZ');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Polygon|undefined} Polygon.\r\n   */\r\n  readPolygon(node, objectStack) {\r\n    /** @type {Array<Array<number>>} */\r\n    const flatLinearRings = pushParseAndPop(\r\n      [null],\r\n      this.FLAT_LINEAR_RINGS_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRings && flatLinearRings[0]) {\r\n      const flatCoordinates = flatLinearRings[0];\r\n      const ends = [flatCoordinates.length];\r\n      let i, ii;\r\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\r\n        extend(flatCoordinates, flatLinearRings[i]);\r\n        ends.push(flatCoordinates.length);\r\n      }\r\n      return new Polygon(flatCoordinates, 'XYZ', ends);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  readFlatCoordinatesFromNode(node, objectStack) {\r\n    return pushParseAndPop(\r\n      null,\r\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromNode(node, options) {\r\n    const geometry = this.readGeometryElement(node, [\r\n      this.getReadOptions(node, options ? options : {}),\r\n    ]);\r\n    return geometry ? geometry : null;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    const internalOptions = {\r\n      featureType: this.featureType,\r\n      featureNS: this.featureNS,\r\n    };\r\n    if (internalOptions) {\r\n      Object.assign(internalOptions, this.getReadOptions(node, options));\r\n    }\r\n    const features = this.readFeaturesInternal(node, [internalOptions]);\r\n    return features || [];\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromNode(node) {\r\n    return getProjection(\r\n      this.srsName\r\n        ? this.srsName\r\n        : node.firstElementChild.getAttribute('srsName')\r\n    );\r\n  }\r\n}\r\n\r\nGMLBase.prototype.namespace = GMLNS;\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml': {},\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml': {},\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml': {},\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.MULTIPOINT_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.MULTILINESTRING_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lineStringMember': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n    'lineStringMembers': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.MULTIPOLYGON_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.POINTMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.POLYGONMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.RING_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\r\n  },\r\n};\r\n\r\nexport default GMLBase;\r\n", "/**\r\n * @module ol/format/xsd\r\n */\r\nimport {getAllTextContent, getDocument} from '../xml.js';\r\nimport {padNumber} from '../string.js';\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {boolean|undefined} Boolean.\r\n */\r\nexport function readBoolean(node) {\r\n  const s = getAllTextContent(node, false);\r\n  return readBooleanString(s);\r\n}\r\n\r\n/**\r\n * @param {string} string String.\r\n * @return {boolean|undefined} Boolean.\r\n */\r\nexport function readBooleanString(string) {\r\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\r\n  if (m) {\r\n    return m[1] !== undefined || false;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} DateTime in seconds.\r\n */\r\nexport function readDateTime(node) {\r\n  const s = getAllTextContent(node, false);\r\n  const dateTime = Date.parse(s);\r\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} Decimal.\r\n */\r\nexport function readDecimal(node) {\r\n  const s = getAllTextContent(node, false);\r\n  return readDecimalString(s);\r\n}\r\n\r\n/**\r\n * @param {string} string String.\r\n * @return {number|undefined} Decimal.\r\n */\r\nexport function readDecimalString(string) {\r\n  // FIXME check spec\r\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\r\n  if (m) {\r\n    return parseFloat(m[1]);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} Non negative integer.\r\n */\r\nexport function readPositiveInteger(node) {\r\n  const s = getAllTextContent(node, false);\r\n  return readNonNegativeIntegerString(s);\r\n}\r\n\r\n/**\r\n * @param {string} string String.\r\n * @return {number|undefined} Non negative integer.\r\n */\r\nexport function readNonNegativeIntegerString(string) {\r\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\r\n  if (m) {\r\n    return parseInt(m[1], 10);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {string|undefined} String.\r\n */\r\nexport function readString(node) {\r\n  return getAllTextContent(node, false).trim();\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the boolean to.\r\n * @param {boolean} bool Boolean.\r\n */\r\nexport function writeBooleanTextNode(node, bool) {\r\n  writeStringTextNode(node, bool ? '1' : '0');\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a CDATA Section with the string to.\r\n * @param {string} string String.\r\n */\r\nexport function writeCDATASection(node, string) {\r\n  node.appendChild(getDocument().createCDATASection(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the dateTime to.\r\n * @param {number} dateTime DateTime in seconds.\r\n */\r\nexport function writeDateTimeTextNode(node, dateTime) {\r\n  const date = new Date(dateTime * 1000);\r\n  const string =\r\n    date.getUTCFullYear() +\r\n    '-' +\r\n    padNumber(date.getUTCMonth() + 1, 2) +\r\n    '-' +\r\n    padNumber(date.getUTCDate(), 2) +\r\n    'T' +\r\n    padNumber(date.getUTCHours(), 2) +\r\n    ':' +\r\n    padNumber(date.getUTCMinutes(), 2) +\r\n    ':' +\r\n    padNumber(date.getUTCSeconds(), 2) +\r\n    'Z';\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the decimal to.\r\n * @param {number} decimal Decimal.\r\n */\r\nexport function writeDecimalTextNode(node, decimal) {\r\n  const string = decimal.toPrecision();\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the decimal to.\r\n * @param {number} nonNegativeInteger Non negative integer.\r\n */\r\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\r\n  const string = nonNegativeInteger.toString();\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the string to.\r\n * @param {string} string String.\r\n */\r\nexport function writeStringTextNode(node, string) {\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n", "/**\r\n * @module ol/format/GML2\r\n */\r\nimport GMLBase, {GMLNS} from './GMLBase.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  createElementNS,\r\n  getAllTextContent,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeReplacer,\r\n  makeSimpleNodeFactory,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {createOrUpdate} from '../extent.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  transformExtentWithOptions,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\nimport {writeStringTextNode} from './xsd.js';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst schemaLocation =\r\n  GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\r\n  'MultiLineString': 'lineStringMember',\r\n  'MultiCurve': 'curveMember',\r\n  'MultiPolygon': 'polygonMember',\r\n  'MultiSurface': 'surfaceMember',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GML format,\r\n * version 2.1.2.\r\n *\r\n * @api\r\n */\r\nclass GML2 extends GMLBase {\r\n  /**\r\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(options);\r\n\r\n    this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(\r\n      this.readFeaturesInternal\r\n    );\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : schemaLocation;\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Flat coordinates.\r\n   */\r\n  readFlatCoordinates(node, objectStack) {\r\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\r\n    const context = /** @type {import(\"../xml.js\").NodeStackItem} */ (\r\n      objectStack[0]\r\n    );\r\n    const containerSrs = context['srsName'];\r\n    let axisOrientation = 'enu';\r\n    if (containerSrs) {\r\n      const proj = getProjection(containerSrs);\r\n      if (proj) {\r\n        axisOrientation = proj.getAxisOrientation();\r\n      }\r\n    }\r\n    const coordsGroups = s.trim().split(/\\s+/);\r\n    const flatCoordinates = [];\r\n    for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\r\n      const coords = coordsGroups[i].split(/,+/);\r\n      const x = parseFloat(coords[0]);\r\n      const y = parseFloat(coords[1]);\r\n      const z = coords.length === 3 ? parseFloat(coords[2]) : 0;\r\n      if (axisOrientation.substr(0, 2) === 'en') {\r\n        flatCoordinates.push(x, y, z);\r\n      } else {\r\n        flatCoordinates.push(y, x, z);\r\n      }\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\r\n   */\r\n  readBox(node, objectStack) {\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = pushParseAndPop(\r\n      [null],\r\n      this.BOX_PARSERS_,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    return createOrUpdate(\r\n      flatCoordinates[1][0],\r\n      flatCoordinates[1][1],\r\n      flatCoordinates[1][3],\r\n      flatCoordinates[1][4]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  innerBoundaryIsParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings.push(flatLinearRing);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  outerBoundaryIsParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings[0] = flatLinearRing;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Element|undefined} Node.\r\n   * @private\r\n   */\r\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const multiSurface = context['multiSurface'];\r\n    const surface = context['surface'];\r\n    const multiCurve = context['multiCurve'];\r\n    if (!Array.isArray(value)) {\r\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        value\r\n      ).getType();\r\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\r\n        nodeName = 'MultiSurface';\r\n      } else if (nodeName === 'Polygon' && surface === true) {\r\n        nodeName = 'Surface';\r\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\r\n        nodeName = 'MultiCurve';\r\n      }\r\n    } else {\r\n      nodeName = 'Envelope';\r\n    }\r\n    return createElementNS('http://www.opengis.net/gml', nodeName);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeFeatureElement(node, feature, objectStack) {\r\n    const fid = feature.getId();\r\n    if (fid) {\r\n      node.setAttribute('fid', /** @type {string} */ (fid));\r\n    }\r\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n    const featureNS = context['featureNS'];\r\n    const geometryName = feature.getGeometryName();\r\n    if (!context.serializers) {\r\n      context.serializers = {};\r\n      context.serializers[featureNS] = {};\r\n    }\r\n    const keys = [];\r\n    const values = [];\r\n    if (feature.hasProperties()) {\r\n      const properties = feature.getProperties();\r\n      for (const key in properties) {\r\n        const value = properties[key];\r\n        if (value !== null) {\r\n          keys.push(key);\r\n          values.push(value);\r\n          if (\r\n            key == geometryName ||\r\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\r\n              'function'\r\n          ) {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] = makeChildAppender(\r\n                this.writeGeometryElement,\r\n                this\r\n              );\r\n            }\r\n          } else {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] =\r\n                makeChildAppender(writeStringTextNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const item = Object.assign({}, context);\r\n    item.node = node;\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      context.serializers,\r\n      makeSimpleNodeFactory(undefined, featureNS),\r\n      values,\r\n      objectStack,\r\n      keys\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (\r\n      node.nodeName === 'LineString' ||\r\n      node.nodeName === 'LineStringSegment'\r\n    ) {\r\n      const coordinates = this.createCoordinatesNode_(node.namespaceURI);\r\n      node.appendChild(coordinates);\r\n      this.writeCoordinates_(coordinates, geometry, objectStack);\r\n    } else if (node.nodeName === 'Curve') {\r\n      const segments = createElementNS(node.namespaceURI, 'segments');\r\n      node.appendChild(segments);\r\n      this.writeCurveSegments_(segments, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLineStringOrCurveMember(node, line, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeCurveOrLineString(child, line, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const curve = context['curve'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const lines = geometry.getLineStrings();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\r\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      lines,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeGeometryElement(node, geometry, objectStack) {\r\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const item = Object.assign({}, context);\r\n    item['node'] = node;\r\n    let value;\r\n    if (Array.isArray(geometry)) {\r\n      value = transformExtentWithOptions(\r\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\r\n        context\r\n      );\r\n    } else {\r\n      value = transformGeometryWithOptions(\r\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\r\n        true,\r\n        context\r\n      );\r\n    }\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      this.GEOMETRY_SERIALIZERS,\r\n      this.GEOMETRY_NODE_FACTORY_,\r\n      [value],\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {string} namespaceURI XML namespace.\r\n   * @return {Element} coordinates node.\r\n   * @private\r\n   */\r\n  createCoordinatesNode_(namespaceURI) {\r\n    const coordinates = createElementNS(namespaceURI, 'coordinates');\r\n    coordinates.setAttribute('decimal', '.');\r\n    coordinates.setAttribute('cs', ',');\r\n    coordinates.setAttribute('ts', ' ');\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeCoordinates_(node, value, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    // only 2d for simple features profile\r\n    const points = value.getCoordinates();\r\n    const len = points.length;\r\n    const parts = new Array(len);\r\n    for (let i = 0; i < len; ++i) {\r\n      const point = points[i];\r\n      parts[i] = this.getCoords_(point, srsName, hasZ);\r\n    }\r\n    writeStringTextNode(node, parts.join(' '));\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeCurveSegments_(node, line, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\r\n    node.appendChild(child);\r\n    this.writeCurveOrLineString(child, line, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\r\n      const rings = geometry.getLinearRings();\r\n      pushSerializeAndPop(\r\n        {node: node, hasZ: hasZ, srsName: srsName},\r\n        this.RING_SERIALIZERS,\r\n        this.RING_NODE_FACTORY_,\r\n        rings,\r\n        objectStack,\r\n        undefined,\r\n        this\r\n      );\r\n    } else if (node.nodeName === 'Surface') {\r\n      const patches = createElementNS(node.namespaceURI, 'patches');\r\n      node.appendChild(patches);\r\n      this.writeSurfacePatches_(patches, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node} Node.\r\n   * @private\r\n   */\r\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const parentNode = context.node;\r\n    const exteriorWritten = context['exteriorWritten'];\r\n    if (exteriorWritten === undefined) {\r\n      context['exteriorWritten'] = true;\r\n    }\r\n    return createElementNS(\r\n      parentNode.namespaceURI,\r\n      exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeSurfacePatches_(node, polygon, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\r\n    node.appendChild(child);\r\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeRing(node, ring, objectStack) {\r\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\r\n    node.appendChild(linearRing);\r\n    this.writeLinearRing(linearRing, ring, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} point Point geometry.\r\n   * @param {string} [srsName] Optional srsName\r\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\r\n   * @return {string} The coords string.\r\n   * @private\r\n   */\r\n  getCoords_(point, srsName, hasZ) {\r\n    let axisOrientation = 'enu';\r\n    if (srsName) {\r\n      axisOrientation = getProjection(srsName).getAxisOrientation();\r\n    }\r\n    let coords =\r\n      axisOrientation.substr(0, 2) === 'en'\r\n        ? point[0] + ',' + point[1]\r\n        : point[1] + ',' + point[0];\r\n    if (hasZ) {\r\n      // For newly created points, Z can be undefined.\r\n      const z = point[2] || 0;\r\n      coords += ',' + z;\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\r\n    node.appendChild(coordinates);\r\n    const point = geometry.getCoordinates();\r\n    const coord = this.getCoords_(point, srsName, hasZ);\r\n    writeStringTextNode(coordinates, coord);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiPoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const points = geometry.getPoints();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName},\r\n      this.POINTMEMBER_SERIALIZERS,\r\n      makeSimpleNodeFactory('pointMember'),\r\n      points,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePointMember(node, point, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'Point');\r\n    node.appendChild(child);\r\n    this.writePoint(child, point, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLinearRing(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\r\n    node.appendChild(coordinates);\r\n    this.writeCoordinates_(coordinates, geometry, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const surface = context['surface'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const polygons = geometry.getPolygons();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\r\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      polygons,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeEnvelope(node, extent, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const keys = ['lowerCorner', 'upperCorner'];\r\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      ({node: node}),\r\n      this.ENVELOPE_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      values,\r\n      objectStack,\r\n      keys,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node|undefined} Node.\r\n   * @private\r\n   */\r\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const parentNode = objectStack[objectStack.length - 1].node;\r\n    return createElementNS(\r\n      'http://www.opengis.net/gml',\r\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\r\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.BOX_PARSERS_ = {\r\n  'http://www.opengis.net/gml': {\r\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\r\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\r\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\r\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\r\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\r\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\r\n    'Box': makeReplacer(GML2.prototype.readBox),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.GEOMETRY_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\r\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\r\n    'Point': makeChildAppender(GML2.prototype.writePoint),\r\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\r\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\r\n    'MultiLineString': makeChildAppender(\r\n      GML2.prototype.writeMultiCurveOrLineString\r\n    ),\r\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\r\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\r\n    'MultiPolygon': makeChildAppender(\r\n      GML2.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\r\n    'MultiSurface': makeChildAppender(\r\n      GML2.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lineStringMember': makeChildAppender(\r\n      GML2.prototype.writeLineStringOrCurveMember\r\n    ),\r\n    'curveMember': makeChildAppender(\r\n      GML2.prototype.writeLineStringOrCurveMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.RING_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\r\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'surfaceMember': makeChildAppender(\r\n      GML2.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n    'polygonMember': makeChildAppender(\r\n      GML2.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.ENVELOPE_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lowerCorner': makeChildAppender(writeStringTextNode),\r\n    'upperCorner': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\nexport default GML2;\r\n", "/**\r\n * @module ol/format/GML3\r\n */\r\nimport GML2 from './GML2.js';\r\nimport GMLBase, {GMLNS} from './GMLBase.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  getAllTextContent,\r\n  makeArrayExtender,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeReplacer,\r\n  makeSimpleNodeFactory,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {createOrUpdate} from '../extent.js';\r\nimport {extend} from '../array.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\r\nimport {\r\n  transformExtentWithOptions,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n * @private\r\n */\r\nconst schemaLocation =\r\n  GMLNS +\r\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\r\n  '1.0.0/gmlsf.xsd';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\r\n  'MultiLineString': 'lineStringMember',\r\n  'MultiCurve': 'curveMember',\r\n  'MultiPolygon': 'polygonMember',\r\n  'MultiSurface': 'surfaceMember',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GML format\r\n * version 3.1.1.\r\n * Currently only supports GML 3.1.1 Simple Features profile.\r\n *\r\n * @api\r\n */\r\nclass GML3 extends GMLBase {\r\n  /**\r\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.surface_ = options.surface !== undefined ? options.surface : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.curve_ = options.curve !== undefined ? options.curve : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.multiCurve_ =\r\n      options.multiCurve !== undefined ? options.multiCurve : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.multiSurface_ =\r\n      options.multiSurface !== undefined ? options.multiSurface : true;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : schemaLocation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiLineString|undefined} MultiLineString.\r\n   */\r\n  readMultiCurve(node, objectStack) {\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = pushParseAndPop(\r\n      [],\r\n      this.MULTICURVE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (lineStrings) {\r\n      const multiLineString = new MultiLineString(lineStrings);\r\n      return multiLineString;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Polygon.\r\n   */\r\n  readFlatCurveRing(node, objectStack) {\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = pushParseAndPop(\r\n      [],\r\n      this.MULTICURVE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    const flatCoordinates = [];\r\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\r\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiPolygon|undefined} MultiPolygon.\r\n   */\r\n  readMultiSurface(node, objectStack) {\r\n    /** @type {Array<Polygon>} */\r\n    const polygons = pushParseAndPop(\r\n      [],\r\n      this.MULTISURFACE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (polygons) {\r\n      return new MultiPolygon(polygons);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  curveMemberParser(node, objectStack) {\r\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  surfaceMemberParser(node, objectStack) {\r\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\r\n   */\r\n  readPatch(node, objectStack) {\r\n    return pushParseAndPop(\r\n      [null],\r\n      this.PATCHES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} flat coordinates.\r\n   */\r\n  readSegment(node, objectStack) {\r\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\r\n   */\r\n  readPolygonPatch(node, objectStack) {\r\n    return pushParseAndPop(\r\n      [null],\r\n      this.FLAT_LINEAR_RINGS_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} flat coordinates.\r\n   */\r\n  readLineStringSegment(node, objectStack) {\r\n    return pushParseAndPop(\r\n      [null],\r\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  interiorParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings.push(flatLinearRing);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  exteriorParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings[0] = flatLinearRing;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Polygon|undefined} Polygon.\r\n   */\r\n  readSurface(node, objectStack) {\r\n    /** @type {Array<Array<number>>} */\r\n    const flatLinearRings = pushParseAndPop(\r\n      [null],\r\n      this.SURFACE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRings && flatLinearRings[0]) {\r\n      const flatCoordinates = flatLinearRings[0];\r\n      const ends = [flatCoordinates.length];\r\n      let i, ii;\r\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\r\n        extend(flatCoordinates, flatLinearRings[i]);\r\n        ends.push(flatCoordinates.length);\r\n      }\r\n      return new Polygon(flatCoordinates, 'XYZ', ends);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {LineString|undefined} LineString.\r\n   */\r\n  readCurve(node, objectStack) {\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = pushParseAndPop(\r\n      [null],\r\n      this.CURVE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatCoordinates) {\r\n      const lineString = new LineString(flatCoordinates, 'XYZ');\r\n      return lineString;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\r\n   */\r\n  readEnvelope(node, objectStack) {\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = pushParseAndPop(\r\n      [null],\r\n      this.ENVELOPE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    return createOrUpdate(\r\n      flatCoordinates[1][0],\r\n      flatCoordinates[1][1],\r\n      flatCoordinates[2][0],\r\n      flatCoordinates[2][1]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Flat coordinates.\r\n   */\r\n  readFlatPos(node, objectStack) {\r\n    let s = getAllTextContent(node, false);\r\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = [];\r\n    let m;\r\n    while ((m = re.exec(s))) {\r\n      flatCoordinates.push(parseFloat(m[1]));\r\n      s = s.substr(m[0].length);\r\n    }\r\n    if (s !== '') {\r\n      return undefined;\r\n    }\r\n    const context = objectStack[0];\r\n    const containerSrs = context['srsName'];\r\n    let axisOrientation = 'enu';\r\n    if (containerSrs) {\r\n      const proj = getProjection(containerSrs);\r\n      axisOrientation = proj.getAxisOrientation();\r\n    }\r\n    if (axisOrientation === 'neu') {\r\n      let i, ii;\r\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\r\n        const y = flatCoordinates[i];\r\n        const x = flatCoordinates[i + 1];\r\n        flatCoordinates[i] = x;\r\n        flatCoordinates[i + 1] = y;\r\n      }\r\n    }\r\n    const len = flatCoordinates.length;\r\n    if (len == 2) {\r\n      flatCoordinates.push(0);\r\n    }\r\n    if (len === 0) {\r\n      return undefined;\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Flat coordinates.\r\n   */\r\n  readFlatPosList(node, objectStack) {\r\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\r\n    const context = objectStack[0];\r\n    const containerSrs = context['srsName'];\r\n    const contextDimension = context['srsDimension'];\r\n    let axisOrientation = 'enu';\r\n    if (containerSrs) {\r\n      const proj = getProjection(containerSrs);\r\n      axisOrientation = proj.getAxisOrientation();\r\n    }\r\n    const coords = s.split(/\\s+/);\r\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\r\n    let dim = 2;\r\n    if (node.getAttribute('srsDimension')) {\r\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\r\n    } else if (node.getAttribute('dimension')) {\r\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\r\n    } else if (\r\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\r\n    ) {\r\n      dim = readNonNegativeIntegerString(\r\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\r\n      );\r\n    } else if (contextDimension) {\r\n      dim = readNonNegativeIntegerString(contextDimension);\r\n    }\r\n    let x, y, z;\r\n    const flatCoordinates = [];\r\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\r\n      x = parseFloat(coords[i]);\r\n      y = parseFloat(coords[i + 1]);\r\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\r\n      if (axisOrientation.substr(0, 2) === 'en') {\r\n        flatCoordinates.push(x, y, z);\r\n      } else {\r\n        flatCoordinates.push(y, x, z);\r\n      }\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writePos_(node, value, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsDimension = hasZ ? '3' : '2';\r\n    node.setAttribute('srsDimension', srsDimension);\r\n    const srsName = context['srsName'];\r\n    let axisOrientation = 'enu';\r\n    if (srsName) {\r\n      axisOrientation = getProjection(srsName).getAxisOrientation();\r\n    }\r\n    const point = value.getCoordinates();\r\n    let coords;\r\n    // only 2d for simple features profile\r\n    if (axisOrientation.substr(0, 2) === 'en') {\r\n      coords = point[0] + ' ' + point[1];\r\n    } else {\r\n      coords = point[1] + ' ' + point[0];\r\n    }\r\n    if (hasZ) {\r\n      // For newly created points, Z can be undefined.\r\n      const z = point[2] || 0;\r\n      coords += ' ' + z;\r\n    }\r\n    writeStringTextNode(node, coords);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} point Point geometry.\r\n   * @param {string} [srsName] Optional srsName\r\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\r\n   * @return {string} The coords string.\r\n   * @private\r\n   */\r\n  getCoords_(point, srsName, hasZ) {\r\n    let axisOrientation = 'enu';\r\n    if (srsName) {\r\n      axisOrientation = getProjection(srsName).getAxisOrientation();\r\n    }\r\n    let coords =\r\n      axisOrientation.substr(0, 2) === 'en'\r\n        ? point[0] + ' ' + point[1]\r\n        : point[1] + ' ' + point[0];\r\n    if (hasZ) {\r\n      // For newly created points, Z can be undefined.\r\n      const z = point[2] || 0;\r\n      coords += ' ' + z;\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writePosList_(node, value, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsDimension = hasZ ? '3' : '2';\r\n    node.setAttribute('srsDimension', srsDimension);\r\n    const srsName = context['srsName'];\r\n    // only 2d for simple features profile\r\n    const points = value.getCoordinates();\r\n    const len = points.length;\r\n    const parts = new Array(len);\r\n    let point;\r\n    for (let i = 0; i < len; ++i) {\r\n      point = points[i];\r\n      parts[i] = this.getCoords_(point, srsName, hasZ);\r\n    }\r\n    writeStringTextNode(node, parts.join(' '));\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const pos = createElementNS(node.namespaceURI, 'pos');\r\n    node.appendChild(pos);\r\n    this.writePos_(pos, geometry, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeEnvelope(node, extent, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const keys = ['lowerCorner', 'upperCorner'];\r\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      ({node: node}),\r\n      this.ENVELOPE_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      values,\r\n      objectStack,\r\n      keys,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLinearRing(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const posList = createElementNS(node.namespaceURI, 'posList');\r\n    node.appendChild(posList);\r\n    this.writePosList_(posList, geometry, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node} Node.\r\n   * @private\r\n   */\r\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const parentNode = context.node;\r\n    const exteriorWritten = context['exteriorWritten'];\r\n    if (exteriorWritten === undefined) {\r\n      context['exteriorWritten'] = true;\r\n    }\r\n    return createElementNS(\r\n      parentNode.namespaceURI,\r\n      exteriorWritten !== undefined ? 'interior' : 'exterior'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Polygon} geometry Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\r\n      const rings = geometry.getLinearRings();\r\n      pushSerializeAndPop(\r\n        {node: node, hasZ: hasZ, srsName: srsName},\r\n        this.RING_SERIALIZERS,\r\n        this.RING_NODE_FACTORY_,\r\n        rings,\r\n        objectStack,\r\n        undefined,\r\n        this\r\n      );\r\n    } else if (node.nodeName === 'Surface') {\r\n      const patches = createElementNS(node.namespaceURI, 'patches');\r\n      node.appendChild(patches);\r\n      this.writeSurfacePatches_(patches, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {LineString} geometry LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (\r\n      node.nodeName === 'LineString' ||\r\n      node.nodeName === 'LineStringSegment'\r\n    ) {\r\n      const posList = createElementNS(node.namespaceURI, 'posList');\r\n      node.appendChild(posList);\r\n      this.writePosList_(posList, geometry, objectStack);\r\n    } else if (node.nodeName === 'Curve') {\r\n      const segments = createElementNS(node.namespaceURI, 'segments');\r\n      node.appendChild(segments);\r\n      this.writeCurveSegments_(segments, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const surface = context['surface'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const polygons = geometry.getPolygons();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\r\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      polygons,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiPoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    const hasZ = context['hasZ'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const points = geometry.getPoints();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName},\r\n      this.POINTMEMBER_SERIALIZERS,\r\n      makeSimpleNodeFactory('pointMember'),\r\n      points,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {MultiLineString} geometry MultiLineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const curve = context['curve'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const lines = geometry.getLineStrings();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\r\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      lines,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeRing(node, ring, objectStack) {\r\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\r\n    node.appendChild(linearRing);\r\n    this.writeLinearRing(linearRing, ring, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Polygon} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePointMember(node, point, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'Point');\r\n    node.appendChild(child);\r\n    this.writePoint(child, point, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {LineString} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLineStringOrCurveMember(node, line, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeCurveOrLineString(child, line, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Polygon} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeSurfacePatches_(node, polygon, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\r\n    node.appendChild(child);\r\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {LineString} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeCurveSegments_(node, line, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\r\n    node.appendChild(child);\r\n    this.writeCurveOrLineString(child, line, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeGeometryElement(node, geometry, objectStack) {\r\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const item = Object.assign({}, context);\r\n    item['node'] = node;\r\n    let value;\r\n    if (Array.isArray(geometry)) {\r\n      value = transformExtentWithOptions(\r\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\r\n        context\r\n      );\r\n    } else {\r\n      value = transformGeometryWithOptions(\r\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\r\n        true,\r\n        context\r\n      );\r\n    }\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      this.GEOMETRY_SERIALIZERS,\r\n      this.GEOMETRY_NODE_FACTORY_,\r\n      [value],\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeFeatureElement(node, feature, objectStack) {\r\n    const fid = feature.getId();\r\n    if (fid) {\r\n      node.setAttribute('fid', /** @type {string} */ (fid));\r\n    }\r\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n    const featureNS = context['featureNS'];\r\n    const geometryName = feature.getGeometryName();\r\n    if (!context.serializers) {\r\n      context.serializers = {};\r\n      context.serializers[featureNS] = {};\r\n    }\r\n    const keys = [];\r\n    const values = [];\r\n    if (feature.hasProperties()) {\r\n      const properties = feature.getProperties();\r\n      for (const key in properties) {\r\n        const value = properties[key];\r\n        if (value !== null) {\r\n          keys.push(key);\r\n          values.push(value);\r\n          if (\r\n            key == geometryName ||\r\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\r\n              'function'\r\n          ) {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] = makeChildAppender(\r\n                this.writeGeometryElement,\r\n                this\r\n              );\r\n            }\r\n          } else {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] =\r\n                makeChildAppender(writeStringTextNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const item = Object.assign({}, context);\r\n    item.node = node;\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      context.serializers,\r\n      makeSimpleNodeFactory(undefined, featureNS),\r\n      values,\r\n      objectStack,\r\n      keys\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeFeatureMembers_(node, features, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n    const featureType = context['featureType'];\r\n    const featureNS = context['featureNS'];\r\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\r\n    const serializers = {};\r\n    serializers[featureNS] = {};\r\n    serializers[featureNS][featureType] = makeChildAppender(\r\n      this.writeFeatureElement,\r\n      this\r\n    );\r\n    const item = Object.assign({}, context);\r\n    item.node = node;\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      serializers,\r\n      makeSimpleNodeFactory(featureType, featureNS),\r\n      features,\r\n      objectStack\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node|undefined} Node.\r\n   * @private\r\n   */\r\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const parentNode = objectStack[objectStack.length - 1].node;\r\n    return createElementNS(\r\n      this.namespace,\r\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Element|undefined} Node.\r\n   * @private\r\n   */\r\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const multiSurface = context['multiSurface'];\r\n    const surface = context['surface'];\r\n    const curve = context['curve'];\r\n    const multiCurve = context['multiCurve'];\r\n    if (!Array.isArray(value)) {\r\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        value\r\n      ).getType();\r\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\r\n        nodeName = 'MultiSurface';\r\n      } else if (nodeName === 'Polygon' && surface === true) {\r\n        nodeName = 'Surface';\r\n      } else if (nodeName === 'LineString' && curve === true) {\r\n        nodeName = 'Curve';\r\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\r\n        nodeName = 'MultiCurve';\r\n      }\r\n    } else {\r\n      nodeName = 'Envelope';\r\n    }\r\n    return createElementNS(this.namespace, nodeName);\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry in GML 3.1.1 Simple Features.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   * @api\r\n   */\r\n  writeGeometryNode(geometry, options) {\r\n    options = this.adaptOptions(options);\r\n    const geom = createElementNS(this.namespace, 'geom');\r\n    const context = {\r\n      node: geom,\r\n      hasZ: this.hasZ,\r\n      srsName: this.srsName,\r\n      curve: this.curve_,\r\n      surface: this.surface_,\r\n      multiSurface: this.multiSurface_,\r\n      multiCurve: this.multiCurve_,\r\n    };\r\n    if (options) {\r\n      Object.assign(context, options);\r\n    }\r\n    this.writeGeometryElement(geom, geometry, [context]);\r\n    return geom;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Element} Node.\r\n   * @api\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const node = createElementNS(this.namespace, 'featureMembers');\r\n    node.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      this.schemaLocation\r\n    );\r\n    const context = {\r\n      srsName: this.srsName,\r\n      hasZ: this.hasZ,\r\n      curve: this.curve_,\r\n      surface: this.surface_,\r\n      multiSurface: this.multiSurface_,\r\n      multiCurve: this.multiCurve_,\r\n      featureNS: this.featureNS,\r\n      featureType: this.featureType,\r\n    };\r\n    if (options) {\r\n      Object.assign(context, options);\r\n    }\r\n    this.writeFeatureMembers_(node, features, [context]);\r\n    return node;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\r\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\r\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'interior': GML3.prototype.interiorParser,\r\n    'exterior': GML3.prototype.exteriorParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\r\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\r\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\r\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\r\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\r\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\r\n    'Surface': makeReplacer(GML3.prototype.readSurface),\r\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\r\n    'Curve': makeReplacer(GML3.prototype.readCurve),\r\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\r\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.MULTICURVE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.MULTISURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.CURVEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.SURFACEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.SURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'patches': makeReplacer(GML3.prototype.readPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.CURVE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'segments': makeReplacer(GML3.prototype.readSegment),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.ENVELOPE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.PATCHES_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.SEGMENTS_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LineStringSegment': makeArrayExtender(\r\n      GML3.prototype.readLineStringSegment\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.RING_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\r\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\r\n  },\r\n};\r\n\r\n/**\r\n * Encode an array of features in GML 3.1.1 Simple Features.\r\n *\r\n * @function\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n * @return {string} Result.\r\n * @api\r\n */\r\nGML3.prototype.writeFeatures;\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.RING_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\r\n    'interior': makeChildAppender(GML3.prototype.writeRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.ENVELOPE_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lowerCorner': makeChildAppender(writeStringTextNode),\r\n    'upperCorner': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'surfaceMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n    'polygonMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lineStringMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n    'curveMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.GEOMETRY_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\r\n    'Point': makeChildAppender(GML3.prototype.writePoint),\r\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\r\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiLineString': makeChildAppender(\r\n      GML3.prototype.writeMultiCurveOrLineString\r\n    ),\r\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\r\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiPolygon': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiSurface': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\r\n  },\r\n};\r\n\r\nexport default GML3;\r\n", "/**\r\n * @module ol/format/GML\r\n */\r\nimport GML3 from './GML3.js';\r\n\r\n/**\r\n * Feature format for reading and writing data in the GML format\r\n * version 3.1.1.\r\n * Currently only supports GML 3.1.1 Simple Features profile.\r\n *\r\n * @class\r\n * @param {import(\"./GMLBase.js\").Options} [options]\r\n *     Optional configuration object.\r\n * @api\r\n */\r\nconst GML = GML3;\r\n\r\n/**\r\n * Encode an array of features in GML 3.1.1 Simple Features.\r\n *\r\n * @function\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n * @return {string} Result.\r\n * @api\r\n */\r\nGML.prototype.writeFeatures;\r\n\r\n/**\r\n * Encode an array of features in the GML 3.1.1 format as an XML node.\r\n *\r\n * @function\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n * @return {Node} Node.\r\n * @api\r\n */\r\nGML.prototype.writeFeaturesNode;\r\n\r\nexport default GML;\r\n", "/**\r\n * @module ol/format/GPX\r\n */\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport Point from '../geom/Point.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  makeArrayPusher,\r\n  makeArraySerializer,\r\n  makeChildAppender,\r\n  makeObjectPropertySetter,\r\n  makeSequence,\r\n  makeSimpleNodeFactory,\r\n  makeStructureNS,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  readDateTime,\r\n  readDecimal,\r\n  readPositiveInteger,\r\n  readString,\r\n  writeDateTimeTextNode,\r\n  writeDecimalTextNode,\r\n  writeNonNegativeIntegerTextNode,\r\n  writeStringTextNode,\r\n} from './xsd.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [\r\n  null,\r\n  'http://www.topografix.com/GPX/1/0',\r\n  'http://www.topografix.com/GPX/1/1',\r\n];\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst SCHEMA_LOCATION =\r\n  'http://www.topografix.com/GPX/1/1 ' +\r\n  'http://www.topografix.com/GPX/1/1/gpx.xsd';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}\r\n */\r\nconst FEATURE_READER = {\r\n  'rte': readRte,\r\n  'trk': readTrk,\r\n  'wpt': readWpt,\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GPX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'rte': makeArrayPusher(readRte),\r\n  'trk': makeArrayPusher(readTrk),\r\n  'wpt': makeArrayPusher(readWpt),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'text': makeObjectPropertySetter(readString, 'linkText'),\r\n  'type': makeObjectPropertySetter(readString, 'linkType'),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst GPX_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'rte': makeChildAppender(writeRte),\r\n  'trk': makeChildAppender(writeTrk),\r\n  'wpt': makeChildAppender(writeWpt),\r\n});\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {function(Feature, Node):void} [readExtensions] Callback function\r\n * to process `extensions` nodes. To prevent memory leaks, this callback function must\r\n * not store any references to the node. Note that the `extensions`\r\n * node is not allowed in GPX 1.0. Moreover, only `extensions`\r\n * nodes from `wpt`, `rte` and `trk` can be processed, as those are\r\n * directly mapped to a feature.\r\n */\r\n\r\n/**\r\n * @typedef {Object} LayoutOptions\r\n * @property {boolean} [hasZ] HasZ.\r\n * @property {boolean} [hasM] HasM.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GPX format.\r\n *\r\n * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first\r\n * feature of the source.\r\n *\r\n * When reading, routes (`<rte>`) are converted into LineString geometries, and\r\n * tracks (`<trk>`) into MultiLineString. Any properties on route and track\r\n * waypoints are ignored.\r\n *\r\n * When writing, LineString geometries are output as routes (`<rte>`), and\r\n * MultiLineString as tracks (`<trk>`).\r\n *\r\n * @api\r\n */\r\nclass GPX extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @type {function(Feature, Node): void|undefined}\r\n     * @private\r\n     */\r\n    this.readExtensions_ = options.readExtensions;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Feature>} features List of features.\r\n   * @private\r\n   */\r\n  handleReadExtensions_(features) {\r\n    if (!features) {\r\n      features = [];\r\n    }\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      const feature = features[i];\r\n      if (this.readExtensions_) {\r\n        const extensionsNode = feature.get('extensionsNode_') || null;\r\n        this.readExtensions_(feature, extensionsNode);\r\n      }\r\n      feature.set('extensionsNode_', undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return null;\r\n    }\r\n    const featureReader = FEATURE_READER[node.localName];\r\n    if (!featureReader) {\r\n      return null;\r\n    }\r\n    const feature = featureReader(node, [this.getReadOptions(node, options)]);\r\n    if (!feature) {\r\n      return null;\r\n    }\r\n    this.handleReadExtensions_([feature]);\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return [];\r\n    }\r\n    if (node.localName == 'gpx') {\r\n      /** @type {Array<Feature>} */\r\n      const features = pushParseAndPop([], GPX_PARSERS, node, [\r\n        this.getReadOptions(node, options),\r\n      ]);\r\n      if (features) {\r\n        this.handleReadExtensions_(features);\r\n        return features;\r\n      }\r\n      return [];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in the GPX format as an XML node.\r\n   * LineString geometries are output as routes (`<rte>`), and MultiLineString\r\n   * as tracks (`<trk>`).\r\n   *\r\n   * @param {Array<Feature>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   * @api\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    options = this.adaptOptions(options);\r\n    //FIXME Serialize metadata\r\n    const gpx = createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');\r\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\r\n    gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\r\n    gpx.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      SCHEMA_LOCATION\r\n    );\r\n    gpx.setAttribute('version', '1.1');\r\n    gpx.setAttribute('creator', 'OpenLayers');\r\n\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      ({node: gpx}),\r\n      GPX_SERIALIZERS,\r\n      GPX_NODE_FACTORY,\r\n      features,\r\n      [options]\r\n    );\r\n    return gpx;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst RTE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeObjectPropertySetter(readString),\r\n  'cmt': makeObjectPropertySetter(readString),\r\n  'desc': makeObjectPropertySetter(readString),\r\n  'src': makeObjectPropertySetter(readString),\r\n  'link': parseLink,\r\n  'number': makeObjectPropertySetter(readPositiveInteger),\r\n  'extensions': parseExtensions,\r\n  'type': makeObjectPropertySetter(readString),\r\n  'rtept': parseRtePt,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst RTEPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeObjectPropertySetter(readDecimal),\r\n  'time': makeObjectPropertySetter(readDateTime),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TRK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeObjectPropertySetter(readString),\r\n  'cmt': makeObjectPropertySetter(readString),\r\n  'desc': makeObjectPropertySetter(readString),\r\n  'src': makeObjectPropertySetter(readString),\r\n  'link': parseLink,\r\n  'number': makeObjectPropertySetter(readPositiveInteger),\r\n  'type': makeObjectPropertySetter(readString),\r\n  'extensions': parseExtensions,\r\n  'trkseg': parseTrkSeg,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TRKSEG_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'trkpt': parseTrkPt,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TRKPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeObjectPropertySetter(readDecimal),\r\n  'time': makeObjectPropertySetter(readDateTime),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst WPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeObjectPropertySetter(readDecimal),\r\n  'time': makeObjectPropertySetter(readDateTime),\r\n  'magvar': makeObjectPropertySetter(readDecimal),\r\n  'geoidheight': makeObjectPropertySetter(readDecimal),\r\n  'name': makeObjectPropertySetter(readString),\r\n  'cmt': makeObjectPropertySetter(readString),\r\n  'desc': makeObjectPropertySetter(readString),\r\n  'src': makeObjectPropertySetter(readString),\r\n  'link': parseLink,\r\n  'sym': makeObjectPropertySetter(readString),\r\n  'type': makeObjectPropertySetter(readString),\r\n  'fix': makeObjectPropertySetter(readString),\r\n  'sat': makeObjectPropertySetter(readPositiveInteger),\r\n  'hdop': makeObjectPropertySetter(readDecimal),\r\n  'vdop': makeObjectPropertySetter(readDecimal),\r\n  'pdop': makeObjectPropertySetter(readDecimal),\r\n  'ageofdgpsdata': makeObjectPropertySetter(readDecimal),\r\n  'dgpsid': makeObjectPropertySetter(readPositiveInteger),\r\n  'extensions': parseExtensions,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst LINK_SEQUENCE = ['text', 'type'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst LINK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'text': makeChildAppender(writeStringTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst RTE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'name',\r\n  'cmt',\r\n  'desc',\r\n  'src',\r\n  'link',\r\n  'number',\r\n  'type',\r\n  'rtept',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst RTE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'cmt': makeChildAppender(writeStringTextNode),\r\n  'desc': makeChildAppender(writeStringTextNode),\r\n  'src': makeChildAppender(writeStringTextNode),\r\n  'link': makeChildAppender(writeLink),\r\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n  'rtept': makeArraySerializer(makeChildAppender(writeWptType)),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst RTEPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['ele', 'time']);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst TRK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'name',\r\n  'cmt',\r\n  'desc',\r\n  'src',\r\n  'link',\r\n  'number',\r\n  'type',\r\n  'trkseg',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst TRK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'cmt': makeChildAppender(writeStringTextNode),\r\n  'desc': makeChildAppender(writeStringTextNode),\r\n  'src': makeChildAppender(writeStringTextNode),\r\n  'link': makeChildAppender(writeLink),\r\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n  'trkseg': makeArraySerializer(makeChildAppender(writeTrkSeg)),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst TRKSEG_NODE_FACTORY = makeSimpleNodeFactory('trkpt');\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst TRKSEG_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'trkpt': makeChildAppender(writeWptType),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst WPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'ele',\r\n  'time',\r\n  'magvar',\r\n  'geoidheight',\r\n  'name',\r\n  'cmt',\r\n  'desc',\r\n  'src',\r\n  'link',\r\n  'sym',\r\n  'type',\r\n  'fix',\r\n  'sat',\r\n  'hdop',\r\n  'vdop',\r\n  'pdop',\r\n  'ageofdgpsdata',\r\n  'dgpsid',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst WPT_TYPE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeChildAppender(writeDecimalTextNode),\r\n  'time': makeChildAppender(writeDateTimeTextNode),\r\n  'magvar': makeChildAppender(writeDecimalTextNode),\r\n  'geoidheight': makeChildAppender(writeDecimalTextNode),\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'cmt': makeChildAppender(writeStringTextNode),\r\n  'desc': makeChildAppender(writeStringTextNode),\r\n  'src': makeChildAppender(writeStringTextNode),\r\n  'link': makeChildAppender(writeLink),\r\n  'sym': makeChildAppender(writeStringTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n  'fix': makeChildAppender(writeStringTextNode),\r\n  'sat': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n  'hdop': makeChildAppender(writeDecimalTextNode),\r\n  'vdop': makeChildAppender(writeDecimalTextNode),\r\n  'pdop': makeChildAppender(writeDecimalTextNode),\r\n  'ageofdgpsdata': makeChildAppender(writeDecimalTextNode),\r\n  'dgpsid': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst GEOMETRY_TYPE_TO_NODENAME = {\r\n  'Point': 'wpt',\r\n  'LineString': 'rte',\r\n  'MultiLineString': 'trk',\r\n};\r\n\r\n/**\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nfunction GPX_NODE_FACTORY(value, objectStack, nodeName) {\r\n  const geometry = /** @type {Feature} */ (value).getGeometry();\r\n  if (geometry) {\r\n    const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];\r\n    if (nodeName) {\r\n      const parentNode = objectStack[objectStack.length - 1].node;\r\n      return createElementNS(parentNode.namespaceURI, nodeName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {LayoutOptions} layoutOptions Layout options.\r\n * @param {Element} node Node.\r\n * @param {!Object} values Values.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nfunction appendCoordinate(flatCoordinates, layoutOptions, node, values) {\r\n  flatCoordinates.push(\r\n    parseFloat(node.getAttribute('lon')),\r\n    parseFloat(node.getAttribute('lat'))\r\n  );\r\n  if ('ele' in values) {\r\n    flatCoordinates.push(/** @type {number} */ (values['ele']));\r\n    delete values['ele'];\r\n    layoutOptions.hasZ = true;\r\n  } else {\r\n    flatCoordinates.push(0);\r\n  }\r\n  if ('time' in values) {\r\n    flatCoordinates.push(/** @type {number} */ (values['time']));\r\n    delete values['time'];\r\n    layoutOptions.hasM = true;\r\n  } else {\r\n    flatCoordinates.push(0);\r\n  }\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates\r\n * and ends arrays by shrinking them accordingly (removing unused zero entries).\r\n *\r\n * @param {LayoutOptions} layoutOptions Layout options.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {Array<number>} [ends] Ends.\r\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} Layout.\r\n */\r\nfunction applyLayoutOptions(layoutOptions, flatCoordinates, ends) {\r\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\r\n  let layout = 'XY';\r\n  let stride = 2;\r\n  if (layoutOptions.hasZ && layoutOptions.hasM) {\r\n    layout = 'XYZM';\r\n    stride = 4;\r\n  } else if (layoutOptions.hasZ) {\r\n    layout = 'XYZ';\r\n    stride = 3;\r\n  } else if (layoutOptions.hasM) {\r\n    layout = 'XYM';\r\n    stride = 3;\r\n  }\r\n  if (stride !== 4) {\r\n    for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {\r\n      flatCoordinates[i * stride] = flatCoordinates[i * 4];\r\n      flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];\r\n      if (layoutOptions.hasZ) {\r\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];\r\n      }\r\n      if (layoutOptions.hasM) {\r\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];\r\n      }\r\n    }\r\n    flatCoordinates.length = (flatCoordinates.length / 4) * stride;\r\n    if (ends) {\r\n      for (let i = 0, ii = ends.length; i < ii; i++) {\r\n        ends[i] = (ends[i] / 4) * stride;\r\n      }\r\n    }\r\n  }\r\n  return layout;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseLink(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const href = node.getAttribute('href');\r\n  if (href !== null) {\r\n    values['link'] = href;\r\n  }\r\n  parseNode(LINK_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseExtensions(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  values['extensionsNode_'] = node;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseRtePt(node, objectStack) {\r\n  const values = pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);\r\n  if (values) {\r\n    const rteValues = /** @type {!Object} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const flatCoordinates = /** @type {Array<number>} */ (\r\n      rteValues['flatCoordinates']\r\n    );\r\n    const layoutOptions = /** @type {LayoutOptions} */ (\r\n      rteValues['layoutOptions']\r\n    );\r\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseTrkPt(node, objectStack) {\r\n  const values = pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);\r\n  if (values) {\r\n    const trkValues = /** @type {!Object} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const flatCoordinates = /** @type {Array<number>} */ (\r\n      trkValues['flatCoordinates']\r\n    );\r\n    const layoutOptions = /** @type {LayoutOptions} */ (\r\n      trkValues['layoutOptions']\r\n    );\r\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseTrkSeg(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  parseNode(TRKSEG_PARSERS, node, objectStack);\r\n  const flatCoordinates =\r\n    /** @type {Array<number>} */\r\n    (values['flatCoordinates']);\r\n  const ends = /** @type {Array<number>} */ (values['ends']);\r\n  ends.push(flatCoordinates.length);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Feature|undefined} Track.\r\n */\r\nfunction readRte(node, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const values = pushParseAndPop(\r\n    {\r\n      'flatCoordinates': [],\r\n      'layoutOptions': {},\r\n    },\r\n    RTE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!values) {\r\n    return undefined;\r\n  }\r\n  const flatCoordinates =\r\n    /** @type {Array<number>} */\r\n    (values['flatCoordinates']);\r\n  delete values['flatCoordinates'];\r\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\r\n  delete values['layoutOptions'];\r\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates);\r\n  const geometry = new LineString(flatCoordinates, layout);\r\n  transformGeometryWithOptions(geometry, false, options);\r\n  const feature = new Feature(geometry);\r\n  feature.setProperties(values, true);\r\n  return feature;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Feature|undefined} Track.\r\n */\r\nfunction readTrk(node, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const values = pushParseAndPop(\r\n    {\r\n      'flatCoordinates': [],\r\n      'ends': [],\r\n      'layoutOptions': {},\r\n    },\r\n    TRK_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!values) {\r\n    return undefined;\r\n  }\r\n  const flatCoordinates =\r\n    /** @type {Array<number>} */\r\n    (values['flatCoordinates']);\r\n  delete values['flatCoordinates'];\r\n  const ends = /** @type {Array<number>} */ (values['ends']);\r\n  delete values['ends'];\r\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\r\n  delete values['layoutOptions'];\r\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);\r\n  const geometry = new MultiLineString(flatCoordinates, layout, ends);\r\n  transformGeometryWithOptions(geometry, false, options);\r\n  const feature = new Feature(geometry);\r\n  feature.setProperties(values, true);\r\n  return feature;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Feature|undefined} Waypoint.\r\n */\r\nfunction readWpt(node, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const values = pushParseAndPop({}, WPT_PARSERS, node, objectStack);\r\n  if (!values) {\r\n    return undefined;\r\n  }\r\n  const layoutOptions = /** @type {LayoutOptions} */ ({});\r\n  const coordinates = appendCoordinate([], layoutOptions, node, values);\r\n  const layout = applyLayoutOptions(layoutOptions, coordinates);\r\n  const geometry = new Point(coordinates, layout);\r\n  transformGeometryWithOptions(geometry, false, options);\r\n  const feature = new Feature(geometry);\r\n  feature.setProperties(values, true);\r\n  return feature;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {string} value Value for the link's `href` attribute.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeLink(node, value, objectStack) {\r\n  node.setAttribute('href', value);\r\n  const context = objectStack[objectStack.length - 1];\r\n  const properties = context['properties'];\r\n  const link = [properties['linkText'], properties['linkType']];\r\n  pushSerializeAndPop(\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */ ({node: node}),\r\n    LINK_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    link,\r\n    objectStack,\r\n    LINK_SEQUENCE\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeWptType(node, coordinate, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const parentNode = context.node;\r\n  const namespaceURI = parentNode.namespaceURI;\r\n  const properties = context['properties'];\r\n  //FIXME Projection handling\r\n  node.setAttributeNS(null, 'lat', String(coordinate[1]));\r\n  node.setAttributeNS(null, 'lon', String(coordinate[0]));\r\n  const geometryLayout = context['geometryLayout'];\r\n  switch (geometryLayout) {\r\n    case 'XYZM':\r\n      if (coordinate[3] !== 0) {\r\n        properties['time'] = coordinate[3];\r\n      }\r\n    // fall through\r\n    case 'XYZ':\r\n      if (coordinate[2] !== 0) {\r\n        properties['ele'] = coordinate[2];\r\n      }\r\n      break;\r\n    case 'XYM':\r\n      if (coordinate[2] !== 0) {\r\n        properties['time'] = coordinate[2];\r\n      }\r\n      break;\r\n    default:\r\n    // pass\r\n  }\r\n  const orderedKeys =\r\n    node.nodeName == 'rtept'\r\n      ? RTEPT_TYPE_SEQUENCE[namespaceURI]\r\n      : WPT_TYPE_SEQUENCE[namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    ({node: node, 'properties': properties}),\r\n    WPT_TYPE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeRte(node, feature, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const properties = feature.getProperties();\r\n  const context = {node: node};\r\n  context['properties'] = properties;\r\n  const geometry = feature.getGeometry();\r\n  if (geometry.getType() == 'LineString') {\r\n    const lineString = /** @type {LineString} */ (\r\n      transformGeometryWithOptions(geometry, true, options)\r\n    );\r\n    context['geometryLayout'] = lineString.getLayout();\r\n    properties['rtept'] = lineString.getCoordinates();\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    RTE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeTrk(node, feature, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const properties = feature.getProperties();\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const context = {node: node};\r\n  context['properties'] = properties;\r\n  const geometry = feature.getGeometry();\r\n  if (geometry.getType() == 'MultiLineString') {\r\n    const multiLineString = /** @type {MultiLineString} */ (\r\n      transformGeometryWithOptions(geometry, true, options)\r\n    );\r\n    properties['trkseg'] = multiLineString.getLineStrings();\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    TRK_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {LineString} lineString LineString.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeTrkSeg(node, lineString, objectStack) {\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const context = {node: node};\r\n  context['geometryLayout'] = lineString.getLayout();\r\n  context['properties'] = {};\r\n  pushSerializeAndPop(\r\n    context,\r\n    TRKSEG_SERIALIZERS,\r\n    TRKSEG_NODE_FACTORY,\r\n    lineString.getCoordinates(),\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeWpt(node, feature, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const context = objectStack[objectStack.length - 1];\r\n  context['properties'] = feature.getProperties();\r\n  const geometry = feature.getGeometry();\r\n  if (geometry.getType() == 'Point') {\r\n    const point = /** @type {Point} */ (\r\n      transformGeometryWithOptions(geometry, true, options)\r\n    );\r\n    context['geometryLayout'] = point.getLayout();\r\n    writeWptType(node, point.getCoordinates(), objectStack);\r\n  }\r\n}\r\n\r\nexport default GPX;\r\n", "/**\r\n * @module ol/format/TextFeature\r\n */\r\nimport FeatureFormat from '../format/Feature.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for text feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass TextFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return 'text';\r\n  }\r\n\r\n  /**\r\n   * Read the feature from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, options) {\r\n    return this.readFeatureFromText(\r\n      getText(source),\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the features from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    return this.readFeaturesFromText(\r\n      getText(source),\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the geometry from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   */\r\n  readGeometry(source, options) {\r\n    return this.readGeometryFromText(\r\n      getText(source),\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    return this.readProjectionFromText(getText(source));\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */\r\n  readProjectionFromText(text) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   */\r\n  writeFeature(feature, options) {\r\n    return this.writeFeatureText(feature, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   */\r\n  writeFeatures(features, options) {\r\n    return this.writeFeaturesText(features, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Geometry.\r\n   * @api\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return this.writeGeometryText(geometry, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Document|Element|Object|string} source Source.\r\n * @return {string} Text.\r\n */\r\nfunction getText(source) {\r\n  if (typeof source === 'string') {\r\n    return source;\r\n  }\r\n  return '';\r\n}\r\n\r\nexport default TextFeature;\r\n", "/**\r\n * @module ol/format/IGC\r\n */\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport TextFeature from './TextFeature.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {'barometric' | 'gps' | 'none'} IGCZ\r\n * IGC altitude/z. One of 'barometric', 'gps', 'none'.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst B_RECORD_RE =\r\n  /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})/;\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst HFDTE_RECORD_RE = /^HFDTE(\\d{2})(\\d{2})(\\d{2})/;\r\n\r\n/**\r\n * A regular expression matching the newline characters `\\r\\n`, `\\r` and `\\n`.\r\n *\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst NEWLINE_RE = /\\r\\n|\\r|\\n/;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {IGCZ} [altitudeMode='none'] Altitude mode. Possible\r\n * values are `'barometric'`, `'gps'`, and `'none'`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for `*.igc` flight recording files.\r\n *\r\n * As IGC sources contain a single feature,\r\n * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an\r\n * array\r\n *\r\n * @api\r\n */\r\nclass IGC extends TextFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {IGCZ}\r\n     */\r\n    this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : 'none';\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    const altitudeMode = this.altitudeMode_;\r\n    const lines = text.split(NEWLINE_RE);\r\n    /** @type {Object<string, string>} */\r\n    const properties = {};\r\n    const flatCoordinates = [];\r\n    let year = 2000;\r\n    let month = 0;\r\n    let day = 1;\r\n    let lastDateTime = -1;\r\n    let i, ii;\r\n    for (i = 0, ii = lines.length; i < ii; ++i) {\r\n      const line = lines[i];\r\n      let m;\r\n      if (line.charAt(0) == 'B') {\r\n        m = B_RECORD_RE.exec(line);\r\n        if (m) {\r\n          const hour = parseInt(m[1], 10);\r\n          const minute = parseInt(m[2], 10);\r\n          const second = parseInt(m[3], 10);\r\n          let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;\r\n          if (m[6] == 'S') {\r\n            y = -y;\r\n          }\r\n          let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;\r\n          if (m[9] == 'W') {\r\n            x = -x;\r\n          }\r\n          flatCoordinates.push(x, y);\r\n          if (altitudeMode != 'none') {\r\n            let z;\r\n            if (altitudeMode == 'gps') {\r\n              z = parseInt(m[11], 10);\r\n            } else if (altitudeMode == 'barometric') {\r\n              z = parseInt(m[12], 10);\r\n            } else {\r\n              z = 0;\r\n            }\r\n            flatCoordinates.push(z);\r\n          }\r\n          let dateTime = Date.UTC(year, month, day, hour, minute, second);\r\n          // Detect UTC midnight wrap around.\r\n          if (dateTime < lastDateTime) {\r\n            dateTime = Date.UTC(year, month, day + 1, hour, minute, second);\r\n          }\r\n          flatCoordinates.push(dateTime / 1000);\r\n          lastDateTime = dateTime;\r\n        }\r\n      } else if (line.charAt(0) == 'H') {\r\n        m = HFDTE_RECORD_RE.exec(line);\r\n        if (m) {\r\n          day = parseInt(m[1], 10);\r\n          month = parseInt(m[2], 10) - 1;\r\n          year = 2000 + parseInt(m[3], 10);\r\n        } else {\r\n          m = H_RECORD_RE.exec(line);\r\n          if (m) {\r\n            properties[m[1]] = m[2].trim();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (flatCoordinates.length === 0) {\r\n      return null;\r\n    }\r\n    const layout = altitudeMode == 'none' ? 'XYM' : 'XYZM';\r\n    const lineString = new LineString(flatCoordinates, layout);\r\n    const feature = new Feature(\r\n      transformGeometryWithOptions(lineString, false, options)\r\n    );\r\n    feature.setProperties(properties, true);\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    const feature = this.readFeatureFromText(text, options);\r\n    if (feature) {\r\n      return [feature];\r\n    }\r\n    return [];\r\n  }\r\n}\r\n\r\nexport default IGC;\r\n", "/**\r\n * @module ol/format/IIIFInfo\r\n */\r\n\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * @typedef {Object} PreferredOptions\r\n * @property {string} [format] Preferred image format. Will be used if the image information\r\n * indicates support for that format.\r\n * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information\r\n * indicates support for that quality.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SupportedFeatures\r\n * @property {Array<string>} [supports] Supported IIIF image size and region\r\n * calculation features.\r\n * @property {Array<string>} [formats] Supported image formats.\r\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TileInfo\r\n * @property {Array<number>} scaleFactors Supported resolution scaling factors.\r\n * @property {number} width Tile width in pixels.\r\n * @property {number} [height] Tile height in pixels. Same as tile width if height is\r\n * not given.\r\n */\r\n\r\n/**\r\n * @typedef {Object} IiifProfile\r\n * @property {Array<string>} [formats] Supported image formats for the image service.\r\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\r\n * @property {Array<string>} [supports] Supported features.\r\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\r\n * @property {number} [maxHeight] Maximum height.\r\n * @property {number} [maxWidth] Maximum width.\r\n */\r\n\r\n/**\r\n * @typedef {Object<string,string|number|Array<number|string|IiifProfile|Object<string, number>|TileInfo>>}\r\n *    ImageInformationResponse\r\n */\r\n\r\n/**\r\n * Enum representing the major IIIF Image API versions\r\n * @enum {string}\r\n */\r\nexport const Versions = {\r\n  VERSION1: 'version1',\r\n  VERSION2: 'version2',\r\n  VERSION3: 'version3',\r\n};\r\n\r\n/**\r\n * Supported image formats, qualities and supported region / size calculation features\r\n * for different image API versions and compliance levels\r\n * @const\r\n * @type {Object<string, Object<string, SupportedFeatures>>}\r\n */\r\nconst IIIF_PROFILE_VALUES = {};\r\nIIIF_PROFILE_VALUES[Versions.VERSION1] = {\r\n  'level0': {\r\n    supports: [],\r\n    formats: [],\r\n    qualities: ['native'],\r\n  },\r\n  'level1': {\r\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\r\n    formats: ['jpg'],\r\n    qualities: ['native'],\r\n  },\r\n  'level2': {\r\n    supports: [\r\n      'regionByPx',\r\n      'regionByPct',\r\n      'sizeByW',\r\n      'sizeByH',\r\n      'sizeByPct',\r\n      'sizeByConfinedWh',\r\n      'sizeByWh',\r\n    ],\r\n    formats: ['jpg', 'png'],\r\n    qualities: ['native', 'color', 'grey', 'bitonal'],\r\n  },\r\n};\r\nIIIF_PROFILE_VALUES[Versions.VERSION2] = {\r\n  'level0': {\r\n    supports: [],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level1': {\r\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level2': {\r\n    supports: [\r\n      'regionByPx',\r\n      'regionByPct',\r\n      'sizeByW',\r\n      'sizeByH',\r\n      'sizeByPct',\r\n      'sizeByConfinedWh',\r\n      'sizeByDistortedWh',\r\n      'sizeByWh',\r\n    ],\r\n    formats: ['jpg', 'png'],\r\n    qualities: ['default', 'bitonal'],\r\n  },\r\n};\r\nIIIF_PROFILE_VALUES[Versions.VERSION3] = {\r\n  'level0': {\r\n    supports: [],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level1': {\r\n    supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level2': {\r\n    supports: [\r\n      'regionByPx',\r\n      'regionSquare',\r\n      'regionByPct',\r\n      'sizeByW',\r\n      'sizeByH',\r\n      'sizeByPct',\r\n      'sizeByConfinedWh',\r\n      'sizeByWh',\r\n    ],\r\n    formats: ['jpg', 'png'],\r\n    qualities: ['default'],\r\n  },\r\n};\r\nIIIF_PROFILE_VALUES['none'] = {\r\n  'none': {\r\n    supports: [],\r\n    formats: [],\r\n    qualities: [],\r\n  },\r\n};\r\n\r\nconst COMPLIANCE_VERSION1 =\r\n  /^https?:\\/\\/library\\.stanford\\.edu\\/iiif\\/image-api\\/(?:1\\.1\\/)?compliance\\.html#level[0-2]$/;\r\nconst COMPLIANCE_VERSION2 =\r\n  /^https?:\\/\\/iiif\\.io\\/api\\/image\\/2\\/level[0-2](?:\\.json)?$/;\r\nconst COMPLIANCE_VERSION3 =\r\n  /(^https?:\\/\\/iiif\\.io\\/api\\/image\\/3\\/level[0-2](?:\\.json)?$)|(^level[0-2]$)/;\r\n\r\nfunction generateVersion1Options(iiifInfo) {\r\n  let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\r\n  // Version 1.0 and 1.1 do not require a profile.\r\n  if (levelProfile === undefined) {\r\n    levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];\r\n  }\r\n  return {\r\n    url:\r\n      iiifInfo.imageInfo['@id'] === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\r\n    supports: levelProfile.supports,\r\n    formats: [\r\n      ...levelProfile.formats,\r\n      iiifInfo.imageInfo.formats === undefined\r\n        ? []\r\n        : iiifInfo.imageInfo.formats,\r\n    ],\r\n    qualities: [\r\n      ...levelProfile.qualities,\r\n      iiifInfo.imageInfo.qualities === undefined\r\n        ? []\r\n        : iiifInfo.imageInfo.qualities,\r\n    ],\r\n    resolutions: iiifInfo.imageInfo.scale_factors,\r\n    tileSize:\r\n      iiifInfo.imageInfo.tile_width !== undefined\r\n        ? iiifInfo.imageInfo.tile_height !== undefined\r\n          ? [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height]\r\n          : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]\r\n        : iiifInfo.imageInfo.tile_height != undefined\r\n        ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height]\r\n        : undefined,\r\n  };\r\n}\r\n\r\nfunction generateVersion2Options(iiifInfo) {\r\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\r\n    additionalProfile =\r\n      Array.isArray(iiifInfo.imageInfo.profile) &&\r\n      iiifInfo.imageInfo.profile.length > 1,\r\n    profileSupports =\r\n      additionalProfile && iiifInfo.imageInfo.profile[1].supports\r\n        ? iiifInfo.imageInfo.profile[1].supports\r\n        : [],\r\n    profileFormats =\r\n      additionalProfile && iiifInfo.imageInfo.profile[1].formats\r\n        ? iiifInfo.imageInfo.profile[1].formats\r\n        : [],\r\n    profileQualities =\r\n      additionalProfile && iiifInfo.imageInfo.profile[1].qualities\r\n        ? iiifInfo.imageInfo.profile[1].qualities\r\n        : [];\r\n  return {\r\n    url: iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\r\n    sizes:\r\n      iiifInfo.imageInfo.sizes === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.sizes.map(function (size) {\r\n            return [size.width, size.height];\r\n          }),\r\n    tileSize:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : [\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.width;\r\n            })[0],\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.height === undefined ? tile.width : tile.height;\r\n            })[0],\r\n          ],\r\n    resolutions:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\r\n            return tile.scaleFactors;\r\n          })[0],\r\n    supports: [...levelProfile.supports, ...profileSupports],\r\n    formats: [...levelProfile.formats, ...profileFormats],\r\n    qualities: [...levelProfile.qualities, ...profileQualities],\r\n  };\r\n}\r\n\r\nfunction generateVersion3Options(iiifInfo) {\r\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\r\n    formats =\r\n      iiifInfo.imageInfo.extraFormats === undefined\r\n        ? levelProfile.formats\r\n        : [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],\r\n    preferredFormat =\r\n      iiifInfo.imageInfo.preferredFormats !== undefined &&\r\n      Array.isArray(iiifInfo.imageInfo.preferredFormats) &&\r\n      iiifInfo.imageInfo.preferredFormats.length > 0\r\n        ? iiifInfo.imageInfo.preferredFormats\r\n            .filter(function (format) {\r\n              return ['jpg', 'png', 'gif'].includes(format);\r\n            })\r\n            .reduce(function (acc, format) {\r\n              return acc === undefined && formats.includes(format)\r\n                ? format\r\n                : acc;\r\n            }, undefined)\r\n        : undefined;\r\n  return {\r\n    url: iiifInfo.imageInfo['id'],\r\n    sizes:\r\n      iiifInfo.imageInfo.sizes === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.sizes.map(function (size) {\r\n            return [size.width, size.height];\r\n          }),\r\n    tileSize:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : [\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.width;\r\n            })[0],\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.height;\r\n            })[0],\r\n          ],\r\n    resolutions:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\r\n            return tile.scaleFactors;\r\n          })[0],\r\n    supports:\r\n      iiifInfo.imageInfo.extraFeatures === undefined\r\n        ? levelProfile.supports\r\n        : [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],\r\n    formats: formats,\r\n    qualities:\r\n      iiifInfo.imageInfo.extraQualities === undefined\r\n        ? levelProfile.qualities\r\n        : [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],\r\n    preferredFormat: preferredFormat,\r\n  };\r\n}\r\n\r\nconst versionFunctions = {};\r\nversionFunctions[Versions.VERSION1] = generateVersion1Options;\r\nversionFunctions[Versions.VERSION2] = generateVersion2Options;\r\nversionFunctions[Versions.VERSION3] = generateVersion3Options;\r\n\r\n/**\r\n * @classdesc\r\n * Format for transforming IIIF Image API image information responses into\r\n * IIIF tile source ready options\r\n *\r\n * @api\r\n */\r\nclass IIIFInfo {\r\n  /**\r\n   * @param {string|ImageInformationResponse} imageInfo\r\n   * Deserialized image information JSON response object or JSON response as string\r\n   */\r\n  constructor(imageInfo) {\r\n    this.setImageInfo(imageInfo);\r\n  }\r\n\r\n  /**\r\n   * @param {string|ImageInformationResponse} imageInfo\r\n   * Deserialized image information JSON response object or JSON response as string\r\n   * @api\r\n   */\r\n  setImageInfo(imageInfo) {\r\n    if (typeof imageInfo == 'string') {\r\n      this.imageInfo = JSON.parse(imageInfo);\r\n    } else {\r\n      this.imageInfo = imageInfo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {Versions|undefined} Major IIIF version.\r\n   * @api\r\n   */\r\n  getImageApiVersion() {\r\n    if (this.imageInfo === undefined) {\r\n      return undefined;\r\n    }\r\n    let context = this.imageInfo['@context'] || 'ol-no-context';\r\n    if (typeof context == 'string') {\r\n      context = [context];\r\n    }\r\n    for (let i = 0; i < context.length; i++) {\r\n      switch (context[i]) {\r\n        case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':\r\n        case 'http://iiif.io/api/image/1/context.json':\r\n          return Versions.VERSION1;\r\n        case 'http://iiif.io/api/image/2/context.json':\r\n          return Versions.VERSION2;\r\n        case 'http://iiif.io/api/image/3/context.json':\r\n          return Versions.VERSION3;\r\n        case 'ol-no-context':\r\n          // Image API 1.0 has no '@context'\r\n          if (\r\n            this.getComplianceLevelEntryFromProfile(Versions.VERSION1) &&\r\n            this.imageInfo.identifier\r\n          ) {\r\n            return Versions.VERSION1;\r\n          }\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n    assert(\r\n      false,\r\n      'Cannot determine IIIF Image API version from provided image information JSON'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Versions} version Optional IIIF image API version\r\n   * @return {string|undefined} Compliance level as it appears in the IIIF image information\r\n   * response.\r\n   */\r\n  getComplianceLevelEntryFromProfile(version) {\r\n    if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {\r\n      return undefined;\r\n    }\r\n    if (version === undefined) {\r\n      version = this.getImageApiVersion();\r\n    }\r\n    switch (version) {\r\n      case Versions.VERSION1:\r\n        if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {\r\n          return this.imageInfo.profile;\r\n        }\r\n        break;\r\n      case Versions.VERSION3:\r\n        if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {\r\n          return this.imageInfo.profile;\r\n        }\r\n        break;\r\n      case Versions.VERSION2:\r\n        if (\r\n          typeof this.imageInfo.profile === 'string' &&\r\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile)\r\n        ) {\r\n          return this.imageInfo.profile;\r\n        }\r\n        if (\r\n          Array.isArray(this.imageInfo.profile) &&\r\n          this.imageInfo.profile.length > 0 &&\r\n          typeof this.imageInfo.profile[0] === 'string' &&\r\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])\r\n        ) {\r\n          return this.imageInfo.profile[0];\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Versions} version Optional IIIF image API version\r\n   * @return {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined\r\n   */\r\n  getComplianceLevelFromProfile(version) {\r\n    const complianceLevel = this.getComplianceLevelEntryFromProfile(version);\r\n    if (complianceLevel === undefined) {\r\n      return undefined;\r\n    }\r\n    const level = complianceLevel.match(/level[0-2](?:\\.json)?$/g);\r\n    return Array.isArray(level) ? level[0].replace('.json', '') : undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {SupportedFeatures|undefined} Image formats, qualities and region / size calculation\r\n   * methods that are supported by the IIIF service.\r\n   */\r\n  getComplianceLevelSupportedFeatures() {\r\n    if (this.imageInfo === undefined) {\r\n      return undefined;\r\n    }\r\n    const version = this.getImageApiVersion();\r\n    const level = this.getComplianceLevelFromProfile(version);\r\n    if (level === undefined) {\r\n      return IIIF_PROFILE_VALUES['none']['none'];\r\n    }\r\n    return IIIF_PROFILE_VALUES[version][level];\r\n  }\r\n\r\n  /**\r\n   * @param {PreferredOptions} [preferredOptions] Optional options for preferred format and quality.\r\n   * @return {import(\"../source/IIIF.js\").Options|undefined} IIIF tile source ready constructor options.\r\n   * @api\r\n   */\r\n  getTileSourceOptions(preferredOptions) {\r\n    const options = preferredOptions || {},\r\n      version = this.getImageApiVersion();\r\n    if (version === undefined) {\r\n      return undefined;\r\n    }\r\n    const imageOptions =\r\n      version === undefined ? undefined : versionFunctions[version](this);\r\n    if (imageOptions === undefined) {\r\n      return undefined;\r\n    }\r\n    return {\r\n      url: imageOptions.url,\r\n      version: version,\r\n      size: [this.imageInfo.width, this.imageInfo.height],\r\n      sizes: imageOptions.sizes,\r\n      format:\r\n        options.format !== undefined &&\r\n        imageOptions.formats.includes(options.format)\r\n          ? options.format\r\n          : imageOptions.preferredFormat !== undefined\r\n          ? imageOptions.preferredFormat\r\n          : 'jpg',\r\n      supports: imageOptions.supports,\r\n      quality:\r\n        options.quality && imageOptions.qualities.includes(options.quality)\r\n          ? options.quality\r\n          : imageOptions.qualities.includes('native')\r\n          ? 'native'\r\n          : 'default',\r\n      resolutions: Array.isArray(imageOptions.resolutions)\r\n        ? imageOptions.resolutions.sort(function (a, b) {\r\n            return b - a;\r\n          })\r\n        : undefined,\r\n      tileSize: imageOptions.tileSize,\r\n    };\r\n  }\r\n}\r\n\r\nexport default IIIFInfo;\r\n", "/**\r\n * @module ol/style/Fill\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} [color=null] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set fill style for vector features.\r\n * @api\r\n */\r\nclass Fill {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null}\r\n     */\r\n    this.color_ = options.color !== undefined ? options.color : null;\r\n  }\r\n\r\n  /**\r\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\r\n   * @return {Fill} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Fill({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the fill color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    this.color_ = color;\r\n  }\r\n}\r\n\r\nexport default Fill;\r\n", "/**\r\n * @module ol/ImageState\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport default {\r\n  IDLE: 0,\r\n  LOADING: 1,\r\n  LOADED: 2,\r\n  ERROR: 3,\r\n  EMPTY: 4,\r\n};\r\n", "/**\r\n * @module ol/size\r\n */\r\n\r\n/**\r\n * An array of numbers representing a size: `[width, height]`.\r\n * @typedef {Array<number>} Size\r\n * @api\r\n */\r\n\r\n/**\r\n * Returns a buffered size.\r\n * @param {Size} size Size.\r\n * @param {number} num The amount by which to buffer.\r\n * @param {Size} [dest] Optional reusable size array.\r\n * @return {Size} The buffered size.\r\n */\r\nexport function buffer(size, num, dest) {\r\n  if (dest === undefined) {\r\n    dest = [0, 0];\r\n  }\r\n  dest[0] = size[0] + 2 * num;\r\n  dest[1] = size[1] + 2 * num;\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Determines if a size has a positive area.\r\n * @param {Size} size The size to test.\r\n * @return {boolean} The size has a positive area.\r\n */\r\nexport function hasArea(size) {\r\n  return size[0] > 0 && size[1] > 0;\r\n}\r\n\r\n/**\r\n * Returns a size scaled by a ratio. The result will be an array of integers.\r\n * @param {Size} size Size.\r\n * @param {number} ratio Ratio.\r\n * @param {Size} [dest] Optional reusable size array.\r\n * @return {Size} The scaled size.\r\n */\r\nexport function scale(size, ratio, dest) {\r\n  if (dest === undefined) {\r\n    dest = [0, 0];\r\n  }\r\n  dest[0] = (size[0] * ratio + 0.5) | 0;\r\n  dest[1] = (size[1] * ratio + 0.5) | 0;\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Returns an `Size` array for the passed in number (meaning: square) or\r\n * `Size` array.\r\n * (meaning: non-square),\r\n * @param {number|Size} size Width and height.\r\n * @param {Size} [dest] Optional reusable size array.\r\n * @return {Size} Size.\r\n * @api\r\n */\r\nexport function toSize(size, dest) {\r\n  if (Array.isArray(size)) {\r\n    return size;\r\n  }\r\n  if (dest === undefined) {\r\n    dest = [size, size];\r\n  } else {\r\n    dest[0] = size;\r\n    dest[1] = size;\r\n  }\r\n  return dest;\r\n}\r\n", "/**\r\n * @module ol/style/Image\r\n */\r\nimport {abstract} from '../util.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} opacity Opacity.\r\n * @property {boolean} rotateWithView If the image should get rotated with the view.\r\n * @property {number} rotation Rotation.\r\n * @property {number|import(\"../size.js\").Size} scale Scale.\r\n * @property {Array<number>} displacement Displacement.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */\r\n\r\n/**\r\n * @classdesc\r\n * A base class used for creating subclasses and not instantiated in\r\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\r\n * {@link module:ol/style/RegularShape~RegularShape}.\r\n * @abstract\r\n * @api\r\n */\r\nclass ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.opacity_ = options.opacity;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.displacement_ = options.displacement;\r\n\r\n    /**\r\n     * @private\r\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\r\n     */\r\n    this.declutterMode_ = options.declutterMode;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {ImageStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new ImageStyle({\r\n      opacity: this.getOpacity(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer opacity.\r\n   * @return {number} Opacity.\r\n   * @api\r\n   */\r\n  getOpacity() {\r\n    return this.opacity_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the symbolizer rotates with the map.\r\n   * @return {boolean} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the symoblizer rotation.\r\n   * @return {number} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale.\r\n   * @return {number|import(\"../size.js\").Size} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the displacement of the shape\r\n   * @return {Array<number>} Shape's center displacement\r\n   * @api\r\n   */\r\n  getDisplacement() {\r\n    return this.displacement_;\r\n  }\r\n\r\n  /**\r\n   * Get the declutter mode of the shape\r\n   * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Shape's declutter mode\r\n   * @api\r\n   */\r\n  getDeclutterMode() {\r\n    return this.declutterMode_;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Anchor.\r\n   */\r\n  getAnchor() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image element for the symbolizer.\r\n   * @abstract\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {import('../DataTile.js').ImageLike} Image element.\r\n   */\r\n  getImage(pixelRatio) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import('../DataTile.js').ImageLike} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Origin.\r\n   */\r\n  getOrigin() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   */\r\n  getSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Set the displacement.\r\n   *\r\n   * @param {Array<number>} displacement Displacement.\r\n   * @api\r\n   */\r\n  setDisplacement(displacement) {\r\n    this.displacement_ = displacement;\r\n  }\r\n\r\n  /**\r\n   * Set the opacity.\r\n   *\r\n   * @param {number} opacity Opacity.\r\n   * @api\r\n   */\r\n  setOpacity(opacity) {\r\n    this.opacity_ = opacity;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the style with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @abstract\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {\r\n    abstract();\r\n  }\r\n}\r\n\r\nexport default ImageStyle;\r\n", "/**\r\n * RGB space.\r\n *\r\n * @module  color-space/rgb\r\n */\r\n\r\nexport default {\r\n\tname: 'rgb',\r\n\tmin: [0,0,0],\r\n\tmax: [255,255,255],\r\n\tchannel: ['red', 'green', 'blue'],\r\n\talias: ['RGB']\r\n};\r\n", "/**\r\n * CIE XYZ\r\n *\r\n * @module  color-space/xyz\r\n */\r\nimport rgb from './rgb.js';\r\n\r\nvar xyz = {\r\n\tname: 'xyz',\r\n\tmin: [0,0,0],\r\n\tchannel: ['X','Y','Z'],\r\n\talias: ['XYZ', 'ciexyz', 'cie1931']\r\n};\r\n\r\n\r\n/**\r\n * Whitepoint reference values with observer/illuminant\r\n *\r\n * http://en.wikipedia.org/wiki/Standard_illuminant\r\n */\r\nxyz.whitepoint = {\r\n\t//1931 2°\r\n\t2: {\r\n\t\t//incadescent\r\n\t\tA:[109.85, 100, 35.585],\r\n\t\t// B:[],\r\n\t\tC: [98.074, 100, 118.232],\r\n\t\tD50: [96.422, 100, 82.521],\r\n\t\tD55: [95.682, 100, 92.149],\r\n\t\t//daylight\r\n\t\tD65: [95.045592705167, 100, 108.9057750759878],\r\n\t\tD75: [94.972, 100, 122.638],\r\n\t\t//flourescent\r\n\t\t// F1: [],\r\n\t\tF2: [99.187, 100, 67.395],\r\n\t\t// F3: [],\r\n\t\t// F4: [],\r\n\t\t// F5: [],\r\n\t\t// F6:[],\r\n\t\tF7: [95.044, 100, 108.755],\r\n\t\t// F8: [],\r\n\t\t// F9: [],\r\n\t\t// F10: [],\r\n\t\tF11: [100.966, 100, 64.370],\r\n\t\t// F12: [],\r\n\t\tE: [100,100,100]\r\n\t},\r\n\r\n\t//1964  10°\r\n\t10: {\r\n\t\t//incadescent\r\n\t\tA:[111.144, 100, 35.200],\r\n\t\tC: [97.285, 100, 116.145],\r\n\t\tD50: [96.720, 100, 81.427],\r\n\t\tD55: [95.799, 100, 90.926],\r\n\t\t//daylight\r\n\t\tD65: [94.811, 100, 107.304],\r\n\t\tD75: [94.416, 100, 120.641],\r\n\t\t//flourescent\r\n\t\tF2: [103.280, 100, 69.026],\r\n\t\tF7: [95.792, 100, 107.687],\r\n\t\tF11: [103.866, 100, 65.627],\r\n\t\tE: [100,100,100]\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Top values are the whitepoint’s top values, default are D65\r\n */\r\nxyz.max = xyz.whitepoint[2].D65;\r\n\r\n\r\n/**\r\n * Transform xyz to rgb\r\n *\r\n * @param {Array} xyz Array of xyz values\r\n *\r\n * @return {Array} RGB values\r\n */\r\nxyz.rgb = function (_xyz, white) {\r\n\t//FIXME: make sure we have to divide like this. Probably we have to replace matrix as well then\r\n\twhite = white || xyz.whitepoint[2].E;\r\n\r\n\tvar x = _xyz[0] / white[0],\r\n\t\ty = _xyz[1] / white[1],\r\n\t\tz = _xyz[2] / white[2],\r\n\t\tr, g, b;\r\n\r\n\t// assume sRGB\r\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\tr = (x * 3.240969941904521) + (y * -1.537383177570093) + (z * -0.498610760293);\r\n\tg = (x * -0.96924363628087) + (y * 1.87596750150772) + (z * 0.041555057407175);\r\n\tb = (x * 0.055630079696993) + (y * -0.20397695888897) + (z * 1.056971514242878);\r\n\r\n\tr = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\r\n\t\t: r = (r * 12.92);\r\n\r\n\tg = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\r\n\t\t: g = (g * 12.92);\r\n\r\n\tb = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\r\n\t\t: b = (b * 12.92);\r\n\r\n\tr = Math.min(Math.max(0, r), 1);\r\n\tg = Math.min(Math.max(0, g), 1);\r\n\tb = Math.min(Math.max(0, b), 1);\r\n\r\n\treturn [r * 255, g * 255, b * 255];\r\n}\r\n\r\n\r\n\r\n/**\r\n * RGB to XYZ\r\n *\r\n * @param {Array} rgb RGB channels\r\n *\r\n * @return {Array} XYZ channels\r\n */\r\nrgb.xyz = function(rgb, white) {\r\n\tvar r = rgb[0] / 255,\r\n\t\t\tg = rgb[1] / 255,\r\n\t\t\tb = rgb[2] / 255;\r\n\r\n\t// assume sRGB\r\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\r\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\r\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\r\n\r\n\tvar x = (r * 0.41239079926595) + (g * 0.35758433938387) + (b * 0.18048078840183);\r\n\tvar y = (r * 0.21263900587151) + (g * 0.71516867876775) + (b * 0.072192315360733);\r\n\tvar z = (r * 0.019330818715591) + (g * 0.11919477979462) + (b * 0.95053215224966);\r\n\r\n\twhite = white || xyz.whitepoint[2].E;\r\n\r\n\treturn [x * white[0], y * white[1], z * white[2]];\r\n};\r\n\r\n\r\n\r\nexport default xyz;\r\n", "/**\r\n * CIE LUV (C'est la vie)\r\n *\r\n * @module color-space/luv\r\n */\r\n import xyz from './xyz.js';\r\n\r\nexport default {\r\n\tname: 'luv',\r\n\t//NOTE: luv has no rigidly defined limits\r\n\t//easyrgb fails to get proper coords\r\n\t//boronine states no rigid limits\r\n\t//colorMine refers this ones:\r\n\tmin: [0,-134,-140],\r\n\tmax: [100,224,122],\r\n\tchannel: ['lightness', 'u', 'v'],\r\n\talias: ['LUV', 'cieluv', 'cie1976'],\r\n\r\n\txyz: function(arg, i, o){\r\n\t\tvar _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\r\n\t\tl = arg[0], u = arg[1], v = arg[2];\r\n\r\n\t\tif (l === 0) return [0,0,0];\r\n\r\n\t\t//get constants\r\n\t\t//var e = 0.008856451679035631; //(6/29)^3\r\n\t\tvar k = 0.0011070564598794539; //(3/29)^3\r\n\r\n\t\t//get illuminant/observer\r\n\t\ti = i || 'D65';\r\n\t\to = o || 2;\r\n\r\n\t\txn = xyz.whitepoint[o][i][0];\r\n\t\tyn = xyz.whitepoint[o][i][1];\r\n\t\tzn = xyz.whitepoint[o][i][2];\r\n\r\n\t\tun = (4 * xn) / (xn + (15 * yn) + (3 * zn));\r\n\t\tvn = (9 * yn) / (xn + (15 * yn) + (3 * zn));\r\n\t\t// un = 0.19783000664283;\r\n\t\t// vn = 0.46831999493879;\r\n\r\n\r\n\t\t_u = u / (13 * l) + un || 0;\r\n\t\t_v = v / (13 * l) + vn || 0;\r\n\r\n\t\ty = l > 8 ? yn * Math.pow( (l + 16) / 116 , 3) : yn * l * k;\r\n\r\n\t\t//wikipedia method\r\n\t\tx = y * 9 * _u / (4 * _v) || 0;\r\n\t\tz = y * (12 - 3 * _u - 20 * _v) / (4 * _v) || 0;\r\n\r\n\t\t//boronine method\r\n\t\t//https://github.com/boronine/husl/blob/master/husl.coffee#L201\r\n\t\t// x = 0 - (9 * y * _u) / ((_u - 4) * _v - _u * _v);\r\n\t\t// z = (9 * y - (15 * _v * y) - (_v * x)) / (3 * _v);\r\n\r\n\t\treturn [x, y, z];\r\n\t}\r\n};\r\n\r\n// http://www.brucelindbloom.com/index.html?Equations.html\r\n// https://github.com/boronine/husl/blob/master/husl.coffee\r\n//i - illuminant\r\n//o - observer\r\nxyz.luv = function(arg, i, o) {\r\n\tvar _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\r\n\r\n\t//get constants\r\n\tvar e = 0.008856451679035631; //(6/29)^3\r\n\tvar k = 903.2962962962961; //(29/3)^3\r\n\r\n\t//get illuminant/observer coords\r\n\ti = i || 'D65';\r\n\to = o || 2;\r\n\r\n\txn = xyz.whitepoint[o][i][0];\r\n\tyn = xyz.whitepoint[o][i][1];\r\n\tzn = xyz.whitepoint[o][i][2];\r\n\r\n\tun = (4 * xn) / (xn + (15 * yn) + (3 * zn));\r\n\tvn = (9 * yn) / (xn + (15 * yn) + (3 * zn));\r\n\r\n\r\n\tx = arg[0], y = arg[1], z = arg[2];\r\n\r\n\r\n\t_u = (4 * x) / (x + (15 * y) + (3 * z)) || 0;\r\n\t_v = (9 * y) / (x + (15 * y) + (3 * z)) || 0;\r\n\r\n\tvar yr = y/yn;\r\n\r\n\tl = yr <= e ? k * yr : 116 * Math.pow(yr, 1/3) - 16;\r\n\r\n\tu = 13 * l * (_u - un);\r\n\tv = 13 * l * (_v - vn);\r\n\r\n\treturn [l, u, v];\r\n};\r\n", "/**\r\n * Cylindrical CIE LUV\r\n *\r\n * @module color-space/lchuv\r\n */\r\nimport luv from './luv.js';\r\nimport xyz from './xyz.js';\r\n\r\n//cylindrical luv\r\nvar lchuv = {\r\n\tname: 'lchuv',\r\n\tchannel: ['lightness', 'chroma', 'hue'],\r\n\talias: ['LCHuv', 'cielchuv'],\r\n\tmin: [0,0,0],\r\n\tmax: [100,100,360],\r\n\r\n\tluv: function(luv){\r\n\t\tvar l = luv[0],\r\n\t\tc = luv[1],\r\n\t\th = luv[2],\r\n\t\tu, v, hr;\r\n\r\n\t\thr = h / 360 * 2 * Math.PI;\r\n\t\tu = c * Math.cos(hr);\r\n\t\tv = c * Math.sin(hr);\r\n\t\treturn [l, u, v];\r\n\t},\r\n\r\n\txyz: function(arg) {\r\n\t\treturn luv.xyz(lchuv.luv(arg));\r\n\t}\r\n};\r\n\r\nexport default lchuv;\r\n\r\nluv.lchuv = function(luv){\r\n\tvar l = luv[0], u = luv[1], v = luv[2];\r\n\r\n\tvar c = Math.sqrt(u*u + v*v);\r\n\tvar hr = Math.atan2(v,u);\r\n\tvar h = hr * 360 / 2 / Math.PI;\r\n\tif (h < 0) {\r\n\t\th += 360;\r\n\t}\r\n\r\n\treturn [l,c,h]\r\n};\r\n\r\nxyz.lchuv = function(arg){\r\n  return luv.lchuv(xyz.luv(arg));\r\n};\r\n", "/**\r\n * @module color-parse\r\n */\r\nimport names from 'color-name'\r\n\r\nexport default parse\r\n\r\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\r\n//FIXME: use external hue detector\r\nvar baseHues = {\r\n\tred: 0,\r\n\torange: 60,\r\n\tyellow: 120,\r\n\tgreen: 180,\r\n\tblue: 240,\r\n\tpurple: 300\r\n}\r\n\r\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\r\nfunction parse(cstr) {\r\n\tvar m, parts = [], alpha = 1, space\r\n\r\n\t//numeric case\r\n\tif (typeof cstr === 'number') {\r\n\t\treturn { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\r\n\t}\r\n\tif (typeof cstr === 'number') return { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\r\n\r\n\tcstr = String(cstr).toLowerCase();\r\n\r\n\t//keyword\r\n\tif (names[cstr]) {\r\n\t\tparts = names[cstr].slice()\r\n\t\tspace = 'rgb'\r\n\t}\r\n\r\n\t//reserved words\r\n\telse if (cstr === 'transparent') {\r\n\t\talpha = 0\r\n\t\tspace = 'rgb'\r\n\t\tparts = [0, 0, 0]\r\n\t}\r\n\r\n\t//hex\r\n\telse if (cstr[0] === '#') {\r\n\t\tvar base = cstr.slice(1)\r\n\t\tvar size = base.length\r\n\t\tvar isShort = size <= 4\r\n\t\talpha = 1\r\n\r\n\t\tif (isShort) {\r\n\t\t\tparts = [\r\n\t\t\t\tparseInt(base[0] + base[0], 16),\r\n\t\t\t\tparseInt(base[1] + base[1], 16),\r\n\t\t\t\tparseInt(base[2] + base[2], 16)\r\n\t\t\t]\r\n\t\t\tif (size === 4) {\r\n\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tparts = [\r\n\t\t\t\tparseInt(base[0] + base[1], 16),\r\n\t\t\t\tparseInt(base[2] + base[3], 16),\r\n\t\t\t\tparseInt(base[4] + base[5], 16)\r\n\t\t\t]\r\n\t\t\tif (size === 8) {\r\n\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!parts[0]) parts[0] = 0\r\n\t\tif (!parts[1]) parts[1] = 0\r\n\t\tif (!parts[2]) parts[2] = 0\r\n\r\n\t\tspace = 'rgb'\r\n\t}\r\n\r\n\t// color space\r\n\telse if (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\r\n\t\tvar name = m[1]\r\n\t\tspace = name.replace(/a$/, '')\r\n\t\tvar dims = space === 'cmyk' ? 4 : space === 'gray' ? 1 : 3\r\n\t\tparts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/)\r\n\r\n\t\t// color(srgb-linear x x x) -> srgb-linear(x x x)\r\n\t\tif (space === 'color') space = parts.shift()\r\n\r\n\t\tparts = parts.map(function (x, i) {\r\n\t\t\t//<percentage>\r\n\t\t\tif (x[x.length - 1] === '%') {\r\n\t\t\t\tx = parseFloat(x) / 100\r\n\t\t\t\t// alpha -> 0..1\r\n\t\t\t\tif (i === 3) return x\r\n\t\t\t\t// rgb -> 0..255\r\n\t\t\t\tif (space === 'rgb') return x * 255\r\n\t\t\t\t// hsl, hwb H -> 0..100\r\n\t\t\t\tif (space[0] === 'h') return x * 100\r\n\t\t\t\t// lch, lab L -> 0..100\r\n\t\t\t\tif (space[0] === 'l' && !i) return x * 100\r\n\t\t\t\t// lab A B -> -125..125\r\n\t\t\t\tif (space === 'lab') return x * 125\r\n\t\t\t\t// lch C -> 0..150, H -> 0..360\r\n\t\t\t\tif (space === 'lch') return i < 2 ? x * 150 : x * 360\r\n\t\t\t\t// oklch/oklab L -> 0..1\r\n\t\t\t\tif (space[0] === 'o' && !i) return x\r\n\t\t\t\t// oklab A B -> -0.4..0.4\r\n\t\t\t\tif (space === 'oklab') return x * 0.4\r\n\t\t\t\t// oklch C -> 0..0.4, H -> 0..360\r\n\t\t\t\tif (space === 'oklch') return i < 2 ? x * 0.4 : x * 360\r\n\t\t\t\t// color(xxx) -> 0..1\r\n\t\t\t\treturn x\r\n\t\t\t}\r\n\r\n\t\t\t//hue\r\n\t\t\tif (space[i] === 'h' || (i === 2 && space[space.length - 1] === 'h')) {\r\n\t\t\t\t//<base-hue>\r\n\t\t\t\tif (baseHues[x] !== undefined) return baseHues[x]\r\n\t\t\t\t//<deg>\r\n\t\t\t\tif (x.endsWith('deg')) return parseFloat(x)\r\n\t\t\t\t//<turn>\r\n\t\t\t\tif (x.endsWith('turn')) return parseFloat(x) * 360\r\n\t\t\t\tif (x.endsWith('grad')) return parseFloat(x) * 360 / 400\r\n\t\t\t\tif (x.endsWith('rad')) return parseFloat(x) * 180 / Math.PI\r\n\t\t\t}\r\n\t\t\tif (x === 'none') return 0\r\n\t\t\treturn parseFloat(x)\r\n\t\t});\r\n\r\n\t\talpha = parts.length > dims ? parts.pop() : 1\r\n\t}\r\n\r\n\t//named channels case\r\n\telse if (/[0-9](?:\\s|\\/|,)/.test(cstr)) {\r\n\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\r\n\t\t\treturn parseFloat(value)\r\n\t\t})\r\n\r\n\t\tspace = cstr.match(/([a-z])/ig)?.join('')?.toLowerCase() || 'rgb'\r\n\t}\r\n\r\n\treturn {\r\n\t\tspace,\r\n\t\tvalues: parts,\r\n\t\talpha\r\n\t}\r\n}\r\n", "/**\r\n * @module color-space/hsl\r\n */\r\nimport rgb from './rgb.js';\r\n\r\nexport default {\r\n\tname: 'hsl',\r\n\tmin: [0,0,0],\r\n\tmax: [360,100,100],\r\n\tchannel: ['hue', 'saturation', 'lightness'],\r\n\talias: ['HSL'],\r\n\r\n\trgb: function(hsl) {\r\n\t\tvar h = hsl[0]/360, s = hsl[1]/100, l = hsl[2]/100, t1, t2, t3, rgb, val, i=0;\r\n\r\n\t\tif (s === 0) return val = l * 255, [val, val, val];\r\n\r\n\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n\t\tt1 = 2 * l - t2;\r\n\r\n\t\trgb = [0, 0, 0];\r\n\t\tfor (;i<3;) {\r\n\t\t\tt3 = h + 1 / 3 * - (i - 1);\r\n\t\t\tt3 < 0 ? t3++ : t3 > 1 && t3--;\r\n\t\t\tval = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 :\r\n\t\t\t2 * t3 < 1 ? t2 :\r\n\t\t\t3 * t3 < 2 ?  t1 + (t2 - t1) * (2 / 3 - t3) * 6 :\r\n\t\t\tt1;\r\n\t\t\trgb[i++] = val * 255;\r\n\t\t}\r\n\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n\r\n//extend rgb\r\nrgb.hsl = function(rgb) {\r\n\tvar r = rgb[0]/255,\r\n\t\t\tg = rgb[1]/255,\r\n\t\t\tb = rgb[2]/255,\r\n\t\t\tmin = Math.min(r, g, b),\r\n\t\t\tmax = Math.max(r, g, b),\r\n\t\t\tdelta = max - min,\r\n\t\t\th, s, l;\r\n\r\n\tif (max === min) {\r\n\t\th = 0;\r\n\t}\r\n\telse if (r === max) {\r\n\t\th = (g - b) / delta;\r\n\t}\r\n\telse if (g === max) {\r\n\t\th = 2 + (b - r) / delta;\r\n\t}\r\n\telse if (b === max) {\r\n\t\th = 4 + (r - g)/ delta;\r\n\t}\r\n\r\n\th = Math.min(h * 60, 360);\r\n\r\n\tif (h < 0) {\r\n\t\th += 360;\r\n\t}\r\n\r\n\tl = (min + max) / 2;\r\n\r\n\tif (max === min) {\r\n\t\ts = 0;\r\n\t}\r\n\telse if (l <= 0.5) {\r\n\t\ts = delta / (max + min);\r\n\t}\r\n\telse {\r\n\t\ts = delta / (2 - max - min);\r\n\t}\r\n\r\n\treturn [h, s * 100, l * 100];\r\n};\r\n", "/** @module  color-rgba */\r\nimport parse from 'color-parse'\r\nimport rgb from 'color-space/rgb.js'\r\nimport hsl from 'color-space/hsl.js'\r\n\r\nexport default function rgba(color) {\r\n\t// template literals\r\n\tif (Array.isArray(color) && color.raw) color = String.raw(...arguments)\r\n\tif (color instanceof Number) color = +color\r\n\r\n\tvar values, i, l\r\n\r\n\t//attempt to parse non-array arguments\r\n\tvar parsed = parse(color)\r\n\r\n\tif (!parsed.space) return []\r\n\r\n\tconst min = parsed.space[0] === 'h' ? hsl.min : rgb.min\r\n\tconst max = parsed.space[0] === 'h' ? hsl.max : rgb.max\r\n\r\n\tvalues = Array(3)\r\n\tvalues[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0])\r\n\tvalues[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1])\r\n\tvalues[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2])\r\n\r\n\tif (parsed.space[0] === 'h') {\r\n\t\tvalues = hsl.rgb(values)\r\n\t}\r\n\r\n\tvalues.push(Math.min(Math.max(parsed.alpha, 0), 1))\r\n\r\n\treturn values\r\n}\r\n", "/**\r\n * @module ol/color\r\n */\r\nimport lchuv from 'color-space/lchuv.js';\r\nimport parseRgba from 'color-rgba';\r\nimport rgb from 'color-space/rgb.js';\r\nimport xyz from 'color-space/xyz.js';\r\nimport {clamp} from './math.js';\r\n\r\n/**\r\n * A color represented as a short array [red, green, blue, alpha].\r\n * red, green, and blue should be integers in the range 0..255 inclusive.\r\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\r\n * given then `1` will be used.\r\n * @typedef {Array<number>} Color\r\n * @api\r\n */\r\n\r\n/**\r\n * Return the color as an rgba string.\r\n * @param {Color|string} color Color.\r\n * @return {string} Rgba string.\r\n * @api\r\n */\r\nexport function asString(color) {\r\n  if (typeof color === 'string') {\r\n    return color;\r\n  }\r\n  return toString(color);\r\n}\r\n\r\n/**\r\n * @type {number}\r\n */\r\nconst MAX_CACHE_SIZE = 1024;\r\n\r\n/**\r\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\r\n * we delete an arbitrary set of the entries.\r\n *\r\n * @type {Object<string, Color>}\r\n */\r\nconst cache = {};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet cacheSize = 0;\r\n\r\n/**\r\n * @param {Color} color A color that may or may not have an alpha channel.\r\n * @return {Color} The input color with an alpha channel.  If the input color has\r\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\r\n * array will be returned with the input color and an alpha channel of 1.\r\n */\r\nexport function withAlpha(color) {\r\n  if (color.length === 4) {\r\n    return color;\r\n  }\r\n  const output = color.slice();\r\n  output[3] = 1;\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Color} color RGBA color.\r\n * @return {Color} LCHuv color with alpha.\r\n */\r\nexport function rgbaToLcha(color) {\r\n  const output = xyz.lchuv(rgb.xyz(color));\r\n  output[3] = color[3];\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Color} color LCHuv color with alpha.\r\n * @return {Color} RGBA color.\r\n */\r\nexport function lchaToRgba(color) {\r\n  const output = xyz.rgb(lchuv.xyz(color));\r\n  output[3] = color[3];\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {Color} Color.\r\n */\r\nexport function fromString(s) {\r\n  if (cache.hasOwnProperty(s)) {\r\n    return cache[s];\r\n  }\r\n  if (cacheSize >= MAX_CACHE_SIZE) {\r\n    let i = 0;\r\n    for (const key in cache) {\r\n      if ((i++ & 3) === 0) {\r\n        delete cache[key];\r\n        --cacheSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  const color = parseRgba(s);\r\n  if (color.length !== 4) {\r\n    throw new Error('Failed to parse \"' + s + '\" as color');\r\n  }\r\n  for (const c of color) {\r\n    if (isNaN(c)) {\r\n      throw new Error('Failed to parse \"' + s + '\" as color');\r\n    }\r\n  }\r\n  normalize(color);\r\n  cache[s] = color;\r\n  ++cacheSize;\r\n  return color;\r\n}\r\n\r\n/**\r\n * Return the color as an array. This function maintains a cache of calculated\r\n * arrays which means the result should not be modified.\r\n * @param {Color|string} color Color.\r\n * @return {Color} Color.\r\n * @api\r\n */\r\nexport function asArray(color) {\r\n  if (Array.isArray(color)) {\r\n    return color;\r\n  }\r\n  return fromString(color);\r\n}\r\n\r\n/**\r\n * Exported for the tests.\r\n * @param {Color} color Color.\r\n * @return {Color} Clamped color.\r\n */\r\nexport function normalize(color) {\r\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\r\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\r\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\r\n  color[3] = clamp(color[3], 0, 1);\r\n  return color;\r\n}\r\n\r\n/**\r\n * @param {Color} color Color.\r\n * @return {string} String.\r\n */\r\nexport function toString(color) {\r\n  let r = color[0];\r\n  if (r != (r | 0)) {\r\n    r = (r + 0.5) | 0;\r\n  }\r\n  let g = color[1];\r\n  if (g != (g | 0)) {\r\n    g = (g + 0.5) | 0;\r\n  }\r\n  let b = color[2];\r\n  if (b != (b | 0)) {\r\n    b = (b + 0.5) | 0;\r\n  }\r\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\r\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {boolean} Whether the string is actually a valid color\r\n */\r\nexport function isStringColor(s) {\r\n  try {\r\n    fromString(s);\r\n    return true;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n", "import {WORKER_OFFSCREEN_CANVAS} from './has.js';\r\n\r\n/**\r\n * @module ol/dom\r\n */\r\n\r\n//FIXME Move this function to the canvas module\r\n/**\r\n * Create an html canvas element and returns its 2d context.\r\n * @param {number} [width] Canvas width.\r\n * @param {number} [height] Canvas height.\r\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\r\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\r\n * @return {CanvasRenderingContext2D} The context.\r\n */\r\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\r\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\r\n  let canvas;\r\n  if (canvasPool && canvasPool.length) {\r\n    canvas = /** @type {HTMLCanvasElement} */ (canvasPool.shift());\r\n  } else if (WORKER_OFFSCREEN_CANVAS) {\r\n    canvas = new OffscreenCanvas(width || 300, height || 300);\r\n  } else {\r\n    canvas = document.createElement('canvas');\r\n  }\r\n  if (width) {\r\n    canvas.width = width;\r\n  }\r\n  if (height) {\r\n    canvas.height = height;\r\n  }\r\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\r\n  return /** @type {CanvasRenderingContext2D} */ (\r\n    canvas.getContext('2d', settings)\r\n  );\r\n}\r\n\r\n/**\r\n * Releases canvas memory to avoid exceeding memory limits in Safari.\r\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nexport function releaseCanvas(context) {\r\n  const canvas = context.canvas;\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  context.clearRect(0, 0, 1, 1);\r\n}\r\n\r\n/**\r\n * Get the current computed width for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The width.\r\n */\r\nexport function outerWidth(element) {\r\n  let width = element.offsetWidth;\r\n  const style = getComputedStyle(element);\r\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\r\n\r\n  return width;\r\n}\r\n\r\n/**\r\n * Get the current computed height for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The height.\r\n */\r\nexport function outerHeight(element) {\r\n  let height = element.offsetHeight;\r\n  const style = getComputedStyle(element);\r\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\r\n\r\n  return height;\r\n}\r\n\r\n/**\r\n * @param {Node} newNode Node to replace old node\r\n * @param {Node} oldNode The node to be replaced\r\n */\r\nexport function replaceNode(newNode, oldNode) {\r\n  const parent = oldNode.parentNode;\r\n  if (parent) {\r\n    parent.replaceChild(newNode, oldNode);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node The node to remove.\r\n * @return {Node|null} The node that was removed or null.\r\n */\r\nexport function removeNode(node) {\r\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\r\n}\r\n\r\n/**\r\n * @param {Node} node The node to remove the children from.\r\n */\r\nexport function removeChildren(node) {\r\n  while (node.lastChild) {\r\n    node.removeChild(node.lastChild);\r\n  }\r\n}\r\n\r\n/**\r\n * Transform the children of a parent node so they match the\r\n * provided list of children.  This function aims to efficiently\r\n * remove, add, and reorder child nodes while maintaining a simple\r\n * implementation (it is not guaranteed to minimize DOM operations).\r\n * @param {Node} node The parent node whose children need reworking.\r\n * @param {Array<Node>} children The desired children.\r\n */\r\nexport function replaceChildren(node, children) {\r\n  const oldChildren = node.childNodes;\r\n\r\n  for (let i = 0; true; ++i) {\r\n    const oldChild = oldChildren[i];\r\n    const newChild = children[i];\r\n\r\n    // check if our work is done\r\n    if (!oldChild && !newChild) {\r\n      break;\r\n    }\r\n\r\n    // check if children match\r\n    if (oldChild === newChild) {\r\n      continue;\r\n    }\r\n\r\n    // check if a new child needs to be added\r\n    if (!oldChild) {\r\n      node.appendChild(newChild);\r\n      continue;\r\n    }\r\n\r\n    // check if an old child needs to be removed\r\n    if (!newChild) {\r\n      node.removeChild(oldChild);\r\n      --i;\r\n      continue;\r\n    }\r\n\r\n    // reorder\r\n    node.insertBefore(newChild, oldChild);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/Image\r\n */\r\nimport EventTarget from './events/Target.js';\r\nimport EventType from './events/EventType.js';\r\nimport ImageState from './ImageState.js';\r\nimport {CREATE_IMAGE_BITMAP, IMAGE_DECODE} from './has.js';\r\nimport {listenOnce, unlistenByKey} from './events.js';\r\nimport {toPromise} from './functions.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\r\n * `{string}` for the src as arguments. It is supposed to make it so the\r\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\r\n * content specified by the src. If not specified, the default is\r\n *\r\n *     function(image, src) {\r\n *       image.getImage().src = src;\r\n *     }\r\n *\r\n * Providing a custom `imageLoadFunction` can be useful to load images with\r\n * post requests or - in general - through XHR requests, where the src of the\r\n * image element would be set to a data URI when the content is loaded.\r\n *\r\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageObject\r\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\r\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\r\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\r\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */\r\n\r\n/**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * For images that cover any extent and resolution (static images), the loader function should not accept\r\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\r\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\r\n * For loaders that generate images, the promise should not resolve until the image is loaded.\r\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\r\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\r\n * correct `extent`, `resolution` and `pixelRatio`.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\r\n * @api\r\n */\r\n\r\n/**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\r\n */\r\n\r\nclass ImageWrapper extends EventTarget {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\r\n   * resolution will be assumed.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\r\n   */\r\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.extent = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number|Array<number>|undefined}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./ImageState.js\").default}\r\n     */\r\n    this.state =\r\n      typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('./DataTile.js').ImageLike|null}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./Image.js\").Loader}\r\n     */\r\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */\r\n  getExtent() {\r\n    return this.extent;\r\n  }\r\n\r\n  /**\r\n   * @return {import('./DataTile.js').ImageLike} Image.\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} PixelRatio.\r\n   */\r\n  getPixelRatio() {\r\n    return this.pixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * @return {number|Array<number>} Resolution.\r\n   */\r\n  getResolution() {\r\n    return /** @type {number} */ (this.resolution);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./ImageState.js\").default} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE) {\r\n      if (this.loader) {\r\n        this.state = ImageState.LOADING;\r\n        this.changed();\r\n        const resolution = this.getResolution();\r\n        const requestResolution = Array.isArray(resolution)\r\n          ? resolution[0]\r\n          : resolution;\r\n        toPromise(() =>\r\n          this.loader(this.getExtent(), requestResolution, this.getPixelRatio())\r\n        )\r\n          .then((image) => {\r\n            if ('image' in image) {\r\n              this.image_ = image.image;\r\n            }\r\n            if ('extent' in image) {\r\n              this.extent = image.extent;\r\n            }\r\n            if ('resolution' in image) {\r\n              this.resolution = image.resolution;\r\n            }\r\n            if ('pixelRatio' in image) {\r\n              this.pixelRatio_ = image.pixelRatio;\r\n            }\r\n            if (\r\n              image instanceof HTMLImageElement ||\r\n              image instanceof ImageBitmap ||\r\n              image instanceof HTMLCanvasElement ||\r\n              image instanceof HTMLVideoElement\r\n            ) {\r\n              this.image_ = image;\r\n            }\r\n            this.state = ImageState.LOADED;\r\n          })\r\n          .catch((error) => {\r\n            this.state = ImageState.ERROR;\r\n            console.error(error); // eslint-disable-line no-console\r\n          })\r\n          .finally(() => this.changed());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import('./DataTile.js').ImageLike} image The image.\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * @param {number|Array<number>} resolution Resolution.\r\n   */\r\n  setResolution(resolution) {\r\n    this.resolution = resolution;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./DataTile.js').ImageLike} image Image element.\r\n * @param {function():any} loadHandler Load callback function.\r\n * @param {function():any} errorHandler Error callback function.\r\n * @return {function():void} Callback to stop listening.\r\n */\r\nexport function listenImage(image, loadHandler, errorHandler) {\r\n  const img = /** @type {HTMLImageElement} */ (image);\r\n  let listening = true;\r\n  let decoding = false;\r\n  let loaded = false;\r\n\r\n  const listenerKeys = [\r\n    listenOnce(img, EventType.LOAD, function () {\r\n      loaded = true;\r\n      if (!decoding) {\r\n        loadHandler();\r\n      }\r\n    }),\r\n  ];\r\n\r\n  if (img.src && IMAGE_DECODE) {\r\n    decoding = true;\r\n    img\r\n      .decode()\r\n      .then(function () {\r\n        if (listening) {\r\n          loadHandler();\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        if (listening) {\r\n          if (loaded) {\r\n            loadHandler();\r\n          } else {\r\n            errorHandler();\r\n          }\r\n        }\r\n      });\r\n  } else {\r\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\r\n  }\r\n\r\n  return function unlisten() {\r\n    listening = false;\r\n    listenerKeys.forEach(unlistenByKey);\r\n  };\r\n}\r\n\r\n/**\r\n * Loads an image.\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\r\n * @api\r\n */\r\nexport function load(image, src) {\r\n  return new Promise((resolve, reject) => {\r\n    function handleLoad() {\r\n      unlisten();\r\n      resolve(image);\r\n    }\r\n    function handleError() {\r\n      unlisten();\r\n      reject(new Error('Image load error'));\r\n    }\r\n    function unlisten() {\r\n      image.removeEventListener('load', handleLoad);\r\n      image.removeEventListener('error', handleError);\r\n    }\r\n    image.addEventListener('load', handleLoad);\r\n    image.addEventListener('error', handleError);\r\n    if (src) {\r\n      image.src = src;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\r\n */\r\nexport function decodeFallback(image, src) {\r\n  if (src) {\r\n    image.src = src;\r\n  }\r\n  return image.src && IMAGE_DECODE\r\n    ? new Promise((resolve, reject) =>\r\n        image\r\n          .decode()\r\n          .then(() => resolve(image))\r\n          .catch((e) =>\r\n            image.complete && image.width ? resolve(image) : reject(e)\r\n          )\r\n      )\r\n    : load(image);\r\n}\r\n\r\n/**\r\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\r\n * the loaded image otherwise.\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\r\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\r\n * @api\r\n */\r\nexport function decode(image, src) {\r\n  if (src) {\r\n    image.src = src;\r\n  }\r\n  return image.src && IMAGE_DECODE && CREATE_IMAGE_BITMAP\r\n    ? image\r\n        .decode()\r\n        .then(() => createImageBitmap(image))\r\n        .catch((e) => {\r\n          if (image.complete && image.width) {\r\n            return image;\r\n          }\r\n          throw e;\r\n        })\r\n    : decodeFallback(image);\r\n}\r\n\r\nexport default ImageWrapper;\r\n", "/**\r\n * @module ol/style/IconImageCache\r\n */\r\nimport {asString} from '../color.js';\r\n\r\n/**\r\n * @classdesc\r\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\r\n */\r\nclass IconImageCache {\r\n  constructor() {\r\n    /**\r\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\r\n     * @private\r\n     */\r\n    this.cache_ = {};\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.cacheSize_ = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxCacheSize_ = 32;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  clear() {\r\n    this.cache_ = {};\r\n    this.cacheSize_ = 0;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    return this.cacheSize_ > this.maxCacheSize_;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  expire() {\r\n    if (this.canExpireCache()) {\r\n      let i = 0;\r\n      for (const key in this.cache_) {\r\n        const iconImage = this.cache_[key];\r\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\r\n          delete this.cache_[key];\r\n          --this.cacheSize_;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color} color Color.\r\n   * @return {import(\"./IconImage.js\").default} Icon image.\r\n   */\r\n  get(src, crossOrigin, color) {\r\n    const key = getKey(src, crossOrigin, color);\r\n    return key in this.cache_ ? this.cache_[key] : null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color} color Color.\r\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\r\n   */\r\n  set(src, crossOrigin, color, iconImage) {\r\n    const key = getKey(src, crossOrigin, color);\r\n    this.cache_[key] = iconImage;\r\n    ++this.cacheSize_;\r\n  }\r\n\r\n  /**\r\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\r\n   * your map uses more than 32 different icon images and you are not caching icon\r\n   * styles on the application level.\r\n   * @param {number} maxCacheSize Cache max size.\r\n   * @api\r\n   */\r\n  setSize(maxCacheSize) {\r\n    this.maxCacheSize_ = maxCacheSize;\r\n    this.expire();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} src Src.\r\n * @param {?string} crossOrigin Cross origin.\r\n * @param {import(\"../color.js\").Color} color Color.\r\n * @return {string} Cache key.\r\n */\r\nfunction getKey(src, crossOrigin, color) {\r\n  const colorString = color ? asString(color) : 'null';\r\n  return crossOrigin + ':' + src + ':' + colorString;\r\n}\r\n\r\nexport default IconImageCache;\r\n\r\n/**\r\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\r\n * {@link module:ol/style/Icon~Icon} images.\r\n * @api\r\n */\r\nexport const shared = new IconImageCache();\r\n", "/**\r\n * @module ol/style/IconImage\r\n */\r\n\r\nimport EventTarget from '../events/Target.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ImageState from '../ImageState.js';\r\nimport {asString} from '../color.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {decodeFallback} from '../Image.js';\r\nimport {shared as iconImageCache} from './IconImageCache.js';\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet taintedTestContext = null;\r\n\r\nclass IconImage extends EventTarget {\r\n  /**\r\n   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap} image Image.\r\n   * @param {string|undefined} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\r\n   * @param {import(\"../color.js\").Color} color Color.\r\n   */\r\n  constructor(image, src, crossOrigin, imageState, color) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\r\n     */\r\n    this.hitDetectionImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\r\n     */\r\n    this.image_ = image;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|null}\r\n     */\r\n    this.crossOrigin_ = crossOrigin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<number, HTMLCanvasElement>}\r\n     */\r\n    this.canvas_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */\r\n    this.color_ = color;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../ImageState.js\").default}\r\n     */\r\n    this.imageState_ = imageState === undefined ? ImageState.IDLE : imageState;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size|null}\r\n     */\r\n    this.size_ =\r\n      image && image.width && image.height ? [image.width, image.height] : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.src_ = src;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.tainted_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  initializeImage_() {\r\n    this.image_ = new Image();\r\n    if (this.crossOrigin_ !== null) {\r\n      this.image_.crossOrigin = this.crossOrigin_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {boolean} The image canvas is tainted.\r\n   */\r\n  isTainted_() {\r\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\r\n      if (!taintedTestContext) {\r\n        taintedTestContext = createCanvasContext2D(1, 1, undefined, {\r\n          willReadFrequently: true,\r\n        });\r\n      }\r\n      taintedTestContext.drawImage(this.image_, 0, 0);\r\n      try {\r\n        taintedTestContext.getImageData(0, 0, 1, 1);\r\n        this.tainted_ = false;\r\n      } catch (e) {\r\n        taintedTestContext = null;\r\n        this.tainted_ = true;\r\n      }\r\n    }\r\n    return this.tainted_ === true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  dispatchChangeEvent_() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.imageState_ = ImageState.ERROR;\r\n    this.dispatchChangeEvent_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    this.imageState_ = ImageState.LOADED;\r\n    this.size_ = [this.image_.width, this.image_.height];\r\n    this.dispatchChangeEvent_();\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.\r\n   */\r\n  getImage(pixelRatio) {\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n    this.replaceColor_(pixelRatio);\r\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Image or Canvas element.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    this.replaceColor_(pixelRatio);\r\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return this.imageState_;\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n    if (!this.hitDetectionImage_) {\r\n      if (this.isTainted_()) {\r\n        const width = this.size_[0];\r\n        const height = this.size_[1];\r\n        const context = createCanvasContext2D(width, height);\r\n        context.fillRect(0, 0, width, height);\r\n        this.hitDetectionImage_ = context.canvas;\r\n      } else {\r\n        this.hitDetectionImage_ = this.image_;\r\n      }\r\n    }\r\n    return this.hitDetectionImage_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * @return {string|undefined} Image src.\r\n   */\r\n  getSrc() {\r\n    return this.src_;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.imageState_ !== ImageState.IDLE) {\r\n      return;\r\n    }\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n\r\n    this.imageState_ = ImageState.LOADING;\r\n    try {\r\n      if (this.src_ !== undefined) {\r\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\r\n      }\r\n    } catch (e) {\r\n      this.handleImageError_();\r\n    }\r\n    if (this.image_ instanceof HTMLImageElement) {\r\n      decodeFallback(this.image_, this.src_)\r\n        .then((image) => {\r\n          this.image_ = image;\r\n          this.handleImageLoad_();\r\n        })\r\n        .catch(this.handleImageError_.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @private\r\n   */\r\n  replaceColor_(pixelRatio) {\r\n    if (\r\n      !this.color_ ||\r\n      this.canvas_[pixelRatio] ||\r\n      this.imageState_ !== ImageState.LOADED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const image = this.image_;\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = Math.ceil(image.width * pixelRatio);\r\n    canvas.height = Math.ceil(image.height * pixelRatio);\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.scale(pixelRatio, pixelRatio);\r\n    ctx.drawImage(image, 0, 0);\r\n\r\n    ctx.globalCompositeOperation = 'multiply';\r\n    ctx.fillStyle = asString(this.color_);\r\n    ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\r\n\r\n    ctx.globalCompositeOperation = 'destination-in';\r\n    ctx.drawImage(image, 0, 0);\r\n\r\n    this.canvas_[pixelRatio] = canvas;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap} image Image.\r\n * @param {string} cacheKey Src.\r\n * @param {?string} crossOrigin Cross origin.\r\n * @param {import(\"../ImageState.js\").default} imageState Image state.\r\n * @param {import(\"../color.js\").Color} color Color.\r\n * @return {IconImage} Icon image.\r\n */\r\nexport function get(image, cacheKey, crossOrigin, imageState, color) {\r\n  let iconImage =\r\n    cacheKey === undefined\r\n      ? undefined\r\n      : iconImageCache.get(cacheKey, crossOrigin, color);\r\n  if (!iconImage) {\r\n    iconImage = new IconImage(\r\n      image,\r\n      image instanceof HTMLImageElement ? image.src || undefined : cacheKey,\r\n      crossOrigin,\r\n      imageState,\r\n      color\r\n    );\r\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage);\r\n  }\r\n  return iconImage;\r\n}\r\n\r\nexport default IconImage;\r\n", "/**\r\n * @module ol/style/Icon\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport ImageState from '../ImageState.js';\r\nimport ImageStyle from './Image.js';\r\nimport {asArray} from '../color.js';\r\nimport {assert} from '../asserts.js';\r\nimport {get as getIconImage} from './IconImage.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\r\n * Anchor unit can be either a fraction of the icon size or in pixels.\r\n */\r\n\r\n/**\r\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\r\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\r\n * Positive values will shift the icon right and up.\r\n * @property {number} [opacity=1] Opacity of the icon.\r\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {string} [src] Image source URI.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\r\n */\r\n\r\n/**\r\n * @param {number} width The width.\r\n * @param {number} height The height.\r\n * @param {number|undefined} wantedWidth The wanted width.\r\n * @param {number|undefined} wantedHeight The wanted height.\r\n * @return {number|Array<number>} The scale.\r\n */\r\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\r\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\r\n    return [wantedWidth / width, wantedHeight / height];\r\n  }\r\n  if (wantedWidth !== undefined) {\r\n    return wantedWidth / width;\r\n  }\r\n  if (wantedHeight !== undefined) {\r\n    return wantedHeight / height;\r\n  }\r\n  return 1;\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Set icon style for vector features.\r\n * @api\r\n */\r\nclass Icon extends ImageStyle {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\r\n\r\n    /**\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    const scale = options.scale !== undefined ? options.scale : 1;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    const rotateWithView =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    super({\r\n      opacity: opacity,\r\n      rotation: rotation,\r\n      scale: scale,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      rotateWithView: rotateWithView,\r\n      declutterMode: options.declutterMode,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.normalizedAnchor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.anchorOrigin_ =\r\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorXUnits_ =\r\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorYUnits_ =\r\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    const image = options.img !== undefined ? options.img : null;\r\n\r\n    let cacheKey = options.src;\r\n\r\n    assert(\r\n      !(cacheKey !== undefined && image),\r\n      '`image` and `src` cannot be provided at the same time'\r\n    );\r\n\r\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\r\n      cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);\r\n    }\r\n    assert(\r\n      cacheKey !== undefined && cacheKey.length > 0,\r\n      'A defined and non-empty `src` or `image` must be provided'\r\n    );\r\n\r\n    assert(\r\n      !(\r\n        (options.width !== undefined || options.height !== undefined) &&\r\n        options.scale !== undefined\r\n      ),\r\n      '`width` or `height` cannot be provided together with `scale`'\r\n    );\r\n\r\n    let imageState;\r\n    if (options.src !== undefined) {\r\n      imageState = ImageState.IDLE;\r\n    } else if (image !== undefined) {\r\n      if (image instanceof HTMLImageElement) {\r\n        if (image.complete) {\r\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\r\n        } else {\r\n          imageState = ImageState.LOADING;\r\n        }\r\n      } else {\r\n        imageState = ImageState.LOADED;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */\r\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default}\r\n     */\r\n    this.iconImage_ = getIconImage(\r\n      image,\r\n      /** @type {string} */ (cacheKey),\r\n      this.crossOrigin_,\r\n      imageState,\r\n      this.color_\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.offsetOrigin_ =\r\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_ = options.size !== undefined ? options.size : null;\r\n\r\n    /**\r\n     * Calculate the scale if width or height were given.\r\n     */\r\n    if (options.width !== undefined || options.height !== undefined) {\r\n      let width, height;\r\n      if (options.size) {\r\n        [width, height] = options.size;\r\n      } else {\r\n        const image = this.getImage(1);\r\n        if (image.width && image.height) {\r\n          width = image.width;\r\n          height = image.height;\r\n        } else if (image instanceof HTMLImageElement) {\r\n          this.initialOptions_ = options;\r\n          const onload = () => {\r\n            this.unlistenImageChange(onload);\r\n            if (!this.initialOptions_) {\r\n              return;\r\n            }\r\n            const imageSize = this.iconImage_.getSize();\r\n            this.setScale(\r\n              calculateScale(\r\n                imageSize[0],\r\n                imageSize[1],\r\n                options.width,\r\n                options.height\r\n              )\r\n            );\r\n          };\r\n          this.listenImageChange(onload);\r\n          return;\r\n        }\r\n      }\r\n      if (width !== undefined) {\r\n        this.setScale(\r\n          calculateScale(width, height, options.width, options.height)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\r\n   * @return {Icon} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    let scale, width, height;\r\n    if (this.initialOptions_) {\r\n      width = this.initialOptions_.width;\r\n      height = this.initialOptions_.height;\r\n    } else {\r\n      scale = this.getScale();\r\n      scale = Array.isArray(scale) ? scale.slice() : scale;\r\n    }\r\n    return new Icon({\r\n      anchor: this.anchor_.slice(),\r\n      anchorOrigin: this.anchorOrigin_,\r\n      anchorXUnits: this.anchorXUnits_,\r\n      anchorYUnits: this.anchorYUnits_,\r\n      color:\r\n        this.color_ && this.color_.slice\r\n          ? this.color_.slice()\r\n          : this.color_ || undefined,\r\n      crossOrigin: this.crossOrigin_,\r\n      offset: this.offset_.slice(),\r\n      offsetOrigin: this.offsetOrigin_,\r\n      opacity: this.getOpacity(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      rotation: this.getRotation(),\r\n      scale,\r\n      width,\r\n      height,\r\n      size: this.size_ !== null ? this.size_.slice() : undefined,\r\n      src: this.getSrc(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   */\r\n  getAnchor() {\r\n    let anchor = this.normalizedAnchor_;\r\n    if (!anchor) {\r\n      anchor = this.anchor_;\r\n      const size = this.getSize();\r\n      if (\r\n        this.anchorXUnits_ == 'fraction' ||\r\n        this.anchorYUnits_ == 'fraction'\r\n      ) {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        anchor = this.anchor_.slice();\r\n        if (this.anchorXUnits_ == 'fraction') {\r\n          anchor[0] *= size[0];\r\n        }\r\n        if (this.anchorYUnits_ == 'fraction') {\r\n          anchor[1] *= size[1];\r\n        }\r\n      }\r\n\r\n      if (this.anchorOrigin_ != 'top-left') {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        if (anchor === this.anchor_) {\r\n          anchor = this.anchor_.slice();\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'top-right' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[0] = -anchor[0] + size[0];\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'bottom-left' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[1] = -anchor[1] + size[1];\r\n        }\r\n      }\r\n      this.normalizedAnchor_ = anchor;\r\n    }\r\n    const displacement = this.getDisplacement();\r\n    const scale = this.getScaleArray();\r\n    // anchor is scaled by renderer but displacement should not be scaled\r\n    // so divide by scale here\r\n    return [\r\n      anchor[0] - displacement[0] / scale[0],\r\n      anchor[1] + displacement[1] / scale[1],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Set the anchor point. The anchor determines the center point for the\r\n   * symbolizer.\r\n   *\r\n   * @param {Array<number>} anchor Anchor.\r\n   * @api\r\n   */\r\n  setAnchor(anchor) {\r\n    this.anchor_ = anchor;\r\n    this.normalizedAnchor_ = null;\r\n  }\r\n\r\n  /**\r\n   * Get the icon color.\r\n   * @return {import(\"../color.js\").Color} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\r\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\r\n   * @api\r\n   */\r\n  getImage(pixelRatio) {\r\n    return this.iconImage_.getImage(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * Get the pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} The pixel ratio of the image.\r\n   * @api\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return this.iconImage_.getPixelRatio(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return this.iconImage_.getSize();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return this.iconImage_.getImageState();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    return this.iconImage_.getHitDetectionImage();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   */\r\n  getOrigin() {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    }\r\n    let offset = this.offset_;\r\n\r\n    if (this.offsetOrigin_ != 'top-left') {\r\n      const size = this.getSize();\r\n      const iconImageSize = this.iconImage_.getSize();\r\n      if (!size || !iconImageSize) {\r\n        return null;\r\n      }\r\n      offset = offset.slice();\r\n      if (\r\n        this.offsetOrigin_ == 'top-right' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\r\n      }\r\n      if (\r\n        this.offsetOrigin_ == 'bottom-left' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\r\n      }\r\n    }\r\n    this.origin_ = offset;\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the image URL.\r\n   * @return {string|undefined} Image src.\r\n   * @api\r\n   */\r\n  getSrc() {\r\n    return this.iconImage_.getSrc();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @api\r\n   */\r\n  getSize() {\r\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon width (in pixels).\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    const scale = this.getScaleArray();\r\n    if (this.size_) {\r\n      return this.size_[0] * scale[0];\r\n    }\r\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\r\n      return this.iconImage_.getSize()[0] * scale[0];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon height (in pixels).\r\n   * @api\r\n   */\r\n  getHeight() {\r\n    const scale = this.getScaleArray();\r\n    if (this.size_) {\r\n      return this.size_[1] * scale[1];\r\n    }\r\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\r\n      return this.iconImage_.getSize()[1] * scale[1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    delete this.initialOptions_;\r\n    super.setScale(scale);\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {\r\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * When rendering a feature with an icon style, the vector renderer will\r\n   * automatically call this method. However, you might want to call this\r\n   * method yourself for preloading or other purposes.\r\n   * @api\r\n   */\r\n  load() {\r\n    this.iconImage_.load();\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {\r\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\r\n  }\r\n}\r\n\r\nexport default Icon;\r\n", "/**\r\n * @module ol/style/Stroke\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */\r\nclass Stroke {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\r\n    this.color_ = options.color !== undefined ? options.color : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */\r\n    this.lineCap_ = options.lineCap;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lineDashOffset_ = options.lineDashOffset;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */\r\n    this.lineJoin_ = options.lineJoin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.miterLimit_ = options.miterLimit;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = options.width;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Stroke({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n      lineCap: this.getLineCap(),\r\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\r\n      lineDashOffset: this.getLineDashOffset(),\r\n      lineJoin: this.getLineJoin(),\r\n      miterLimit: this.getMiterLimit(),\r\n      width: this.getWidth(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */\r\n  getLineCap() {\r\n    return this.lineCap_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>|null} Line dash.\r\n   * @api\r\n   */\r\n  getLineDash() {\r\n    return this.lineDash_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */\r\n  getLineDashOffset() {\r\n    return this.lineDashOffset_;\r\n  }\r\n\r\n  /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */\r\n  getLineJoin() {\r\n    return this.lineJoin_;\r\n  }\r\n\r\n  /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */\r\n  getMiterLimit() {\r\n    return this.miterLimit_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    return this.width_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    this.color_ = color;\r\n  }\r\n\r\n  /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */\r\n  setLineCap(lineCap) {\r\n    this.lineCap_ = lineCap;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash.\r\n   *\r\n   * @param {Array<number>|null} lineDash Line dash.\r\n   * @api\r\n   */\r\n  setLineDash(lineDash) {\r\n    this.lineDash_ = lineDash;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */\r\n  setLineDashOffset(lineDashOffset) {\r\n    this.lineDashOffset_ = lineDashOffset;\r\n  }\r\n\r\n  /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */\r\n  setLineJoin(lineJoin) {\r\n    this.lineJoin_ = lineJoin;\r\n  }\r\n\r\n  /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */\r\n  setMiterLimit(miterLimit) {\r\n    this.miterLimit_ = miterLimit;\r\n  }\r\n\r\n  /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */\r\n  setWidth(width) {\r\n    this.width_ = width;\r\n  }\r\n}\r\n\r\nexport default Stroke;\r\n", "/**\r\n * @module ol/colorlike\r\n */\r\nimport {toString} from './color.js';\r\n\r\n/**\r\n * A type accepted by CanvasRenderingContext2D.fillStyle\r\n * or CanvasRenderingContext2D.strokeStyle.\r\n * Represents a color, pattern, or gradient. The origin for patterns and\r\n * gradients as fill style is an increment of 512 css pixels from map coordinate\r\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\r\n * must be a factor of two (2, 4, 8, ..., 512).\r\n *\r\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {import(\"./color.js\").Color|ColorLike} color Color.\r\n * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.\r\n * @api\r\n */\r\nexport function asColorLike(color) {\r\n  if (Array.isArray(color)) {\r\n    return toString(color);\r\n  }\r\n  return color;\r\n}\r\n", "/**\r\n * @module ol/css\r\n */\r\n\r\n/**\r\n * @typedef {Object} FontParameters\r\n * @property {string} style Style.\r\n * @property {string} variant Variant.\r\n * @property {string} weight Weight.\r\n * @property {string} size Size.\r\n * @property {string} lineHeight LineHeight.\r\n * @property {string} family Family.\r\n * @property {Array<string>} families Families.\r\n */\r\n\r\n/**\r\n * The CSS class for hidden feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_HIDDEN = 'ol-hidden';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements to have them selectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_SELECTABLE = 'ol-selectable';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements to have them unselectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\r\n\r\n/**\r\n * The CSS class for unsupported feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\r\n\r\n/**\r\n * The CSS class for controls.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_CONTROL = 'ol-control';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\r\n * to those elements which usually can be expanded.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_COLLAPSED = 'ol-collapsed';\r\n\r\n/**\r\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\r\n * @type {RegExp}\r\n */\r\nconst fontRegEx = new RegExp(\r\n  [\r\n    '^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)',\r\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)',\r\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',\r\n    '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?',\r\n    '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))',\r\n    '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))',\r\n    '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z]+?)\\\\s*$',\r\n  ].join(''),\r\n  'i'\r\n);\r\n/** @type {Array<'style'|'variant'|'weight'|'size'|'lineHeight'|'family'>} */\r\nconst fontRegExMatchIndex = [\r\n  'style',\r\n  'variant',\r\n  'weight',\r\n  'size',\r\n  'lineHeight',\r\n  'family',\r\n];\r\n\r\n/**\r\n * Get the list of font families from a font spec.  Note that this doesn't work\r\n * for font families that have commas in them.\r\n * @param {string} fontSpec The CSS font property.\r\n * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).\r\n */\r\nexport const getFontParameters = function (fontSpec) {\r\n  const match = fontSpec.match(fontRegEx);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  const style = /** @type {FontParameters} */ ({\r\n    lineHeight: 'normal',\r\n    size: '1.2em',\r\n    style: 'normal',\r\n    weight: 'normal',\r\n    variant: 'normal',\r\n  });\r\n  for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\r\n    const value = match[i + 1];\r\n    if (value !== undefined) {\r\n      style[fontRegExMatchIndex[i]] = value;\r\n    }\r\n  }\r\n  style.families = style.family.split(/,\\s?/);\r\n  return style;\r\n};\r\n", "/**\r\n * @module ol/render/canvas\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\r\nimport {clear} from '../obj.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {getFontParameters} from '../css.js';\r\n\r\n/**\r\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillState\r\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\r\n */\r\n\r\n/**\r\n * @typedef Label\r\n * @property {number} width Width.\r\n * @property {number} height Height.\r\n * @property {Array<string|number>} contextInstructions ContextInstructions.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillStrokeState\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\r\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\r\n * @property {Array<number>} currentLineDash Current LineDash.\r\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\r\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\r\n * @property {number} [currentLineWidth] Current LineWidth.\r\n * @property {number} [currentMiterLimit] Current MiterLimit.\r\n * @property {number} [lastStroke] Last stroke.\r\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {CanvasLineCap} [lineCap] LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} [lineDashOffset] LineDashOffset.\r\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\r\n * @property {number} [lineWidth] LineWidth.\r\n * @property {number} [miterLimit] MiterLimit.\r\n */\r\n\r\n/**\r\n * @typedef {Object} StrokeState\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} lineWidth LineWidth.\r\n * @property {number} miterLimit MiterLimit.\r\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TextState\r\n * @property {string} font Font.\r\n * @property {CanvasTextAlign} [textAlign] TextAlign.\r\n * @property {number} [repeat] Repeat.\r\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\r\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\r\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\r\n * @property {number} [maxAngle] MaxAngle.\r\n * @property {boolean} [overflow] Overflow.\r\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\r\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\r\n * @property {import(\"../size.js\").Size} [scale] Scale.\r\n * @property {Array<number>} [padding] Padding.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SerializableInstructions\r\n * @property {Array<*>} instructions The rendering instructions.\r\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\r\n * @property {Array<number>} coordinates The array of all coordinates.\r\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\r\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\r\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\r\n */\r\n\r\n/**\r\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFont = '10px sans-serif';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFillStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineCap}\r\n */\r\nexport const defaultLineCap = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultLineDash = [];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineDashOffset = 0;\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineJoin}\r\n */\r\nexport const defaultLineJoin = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultMiterLimit = 10;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\r\nexport const defaultStrokeStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextAlign}\r\n */\r\nexport const defaultTextAlign = 'center';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextBaseline}\r\n */\r\nexport const defaultTextBaseline = 'middle';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultPadding = [0, 0, 0, 0];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineWidth = 1;\r\n\r\n/**\r\n * @type {BaseObject}\r\n */\r\nexport const checkedFonts = new BaseObject();\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet measureContext = null;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet measureFont;\r\n\r\n/**\r\n * @type {!Object<string, number>}\r\n */\r\nexport const textHeights = {};\r\n\r\n/**\r\n * Clears the label cache when a font becomes available.\r\n * @param {string} fontSpec CSS font spec.\r\n */\r\nexport const registerFont = (function () {\r\n  const retries = 100;\r\n  const size = '32px ';\r\n  const referenceFonts = ['monospace', 'serif'];\r\n  const len = referenceFonts.length;\r\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\r\n  let interval, referenceWidth;\r\n\r\n  /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */\r\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\r\n    let available = true;\r\n    for (let i = 0; i < len; ++i) {\r\n      const referenceFont = referenceFonts[i];\r\n      referenceWidth = measureTextWidth(\r\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\r\n        text\r\n      );\r\n      if (fontFamily != referenceFont) {\r\n        const width = measureTextWidth(\r\n          fontStyle +\r\n            ' ' +\r\n            fontWeight +\r\n            ' ' +\r\n            size +\r\n            fontFamily +\r\n            ',' +\r\n            referenceFont,\r\n          text\r\n        );\r\n        // If width and referenceWidth are the same, then the fallback was used\r\n        // instead of the font we wanted, so the font is not available.\r\n        available = available && width != referenceWidth;\r\n      }\r\n    }\r\n    if (available) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function check() {\r\n    let done = true;\r\n    const fonts = checkedFonts.getKeys();\r\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\r\n      const font = fonts[i];\r\n      if (checkedFonts.get(font) < retries) {\r\n        if (isAvailable.apply(this, font.split('\\n'))) {\r\n          clear(textHeights);\r\n          // Make sure that loaded fonts are picked up by Safari\r\n          measureContext = null;\r\n          measureFont = undefined;\r\n          checkedFonts.set(font, retries);\r\n        } else {\r\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\r\n          done = false;\r\n        }\r\n      }\r\n    }\r\n    if (done) {\r\n      clearInterval(interval);\r\n      interval = undefined;\r\n    }\r\n  }\r\n\r\n  return function (fontSpec) {\r\n    const font = getFontParameters(fontSpec);\r\n    if (!font) {\r\n      return;\r\n    }\r\n    const families = font.families;\r\n    for (let i = 0, ii = families.length; i < ii; ++i) {\r\n      const family = families[i];\r\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\r\n      if (checkedFonts.get(key) === undefined) {\r\n        checkedFonts.set(key, retries, true);\r\n        if (!isAvailable(font.style, font.weight, family)) {\r\n          checkedFonts.set(key, 0, true);\r\n          if (interval === undefined) {\r\n            interval = setInterval(check, 32);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @return {import(\"../size.js\").Size} Measurement.\r\n */\r\nexport const measureTextHeight = (function () {\r\n  /**\r\n   * @type {HTMLDivElement}\r\n   */\r\n  let measureElement;\r\n  return function (fontSpec) {\r\n    let height = textHeights[fontSpec];\r\n    if (height == undefined) {\r\n      if (WORKER_OFFSCREEN_CANVAS) {\r\n        const font = getFontParameters(fontSpec);\r\n        const metrics = measureText(fontSpec, 'Žg');\r\n        const lineHeight = isNaN(Number(font.lineHeight))\r\n          ? 1.2\r\n          : Number(font.lineHeight);\r\n        height =\r\n          lineHeight *\r\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\r\n      } else {\r\n        if (!measureElement) {\r\n          measureElement = document.createElement('div');\r\n          measureElement.innerHTML = 'M';\r\n          measureElement.style.minHeight = '0';\r\n          measureElement.style.maxHeight = 'none';\r\n          measureElement.style.height = 'auto';\r\n          measureElement.style.padding = '0';\r\n          measureElement.style.border = 'none';\r\n          measureElement.style.position = 'absolute';\r\n          measureElement.style.display = 'block';\r\n          measureElement.style.left = '-99999px';\r\n        }\r\n        measureElement.style.font = fontSpec;\r\n        document.body.appendChild(measureElement);\r\n        height = measureElement.offsetHeight;\r\n        document.body.removeChild(measureElement);\r\n      }\r\n      textHeights[fontSpec] = height;\r\n    }\r\n    return height;\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {TextMetrics} Text metrics.\r\n */\r\nfunction measureText(font, text) {\r\n  if (!measureContext) {\r\n    measureContext = createCanvasContext2D(1, 1);\r\n  }\r\n  if (font != measureFont) {\r\n    measureContext.font = font;\r\n    measureFont = measureContext.font;\r\n  }\r\n  return measureContext.measureText(text);\r\n}\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {number} Width.\r\n */\r\nexport function measureTextWidth(font, text) {\r\n  return measureText(font, text).width;\r\n}\r\n\r\n/**\r\n * Measure text width using a cache.\r\n * @param {string} font The font.\r\n * @param {string} text The text to measure.\r\n * @param {Object<string, number>} cache A lookup of cached widths by text.\r\n * @return {number} The text width.\r\n */\r\nexport function measureAndCacheTextWidth(font, text, cache) {\r\n  if (text in cache) {\r\n    return cache[text];\r\n  }\r\n  const width = text\r\n    .split('\\n')\r\n    .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\r\n  cache[text] = width;\r\n  return width;\r\n}\r\n\r\n/**\r\n * @param {TextState} baseStyle Base style.\r\n * @param {Array<string>} chunks Text chunks to measure.\r\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\r\n */\r\nexport function getTextDimensions(baseStyle, chunks) {\r\n  const widths = [];\r\n  const heights = [];\r\n  const lineWidths = [];\r\n  let width = 0;\r\n  let lineWidth = 0;\r\n  let height = 0;\r\n  let lineHeight = 0;\r\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\r\n    const text = chunks[i];\r\n    if (text === '\\n' || i === ii) {\r\n      width = Math.max(width, lineWidth);\r\n      lineWidths.push(lineWidth);\r\n      lineWidth = 0;\r\n      height += lineHeight;\r\n      continue;\r\n    }\r\n    const font = chunks[i + 1] || baseStyle.font;\r\n    const currentWidth = measureTextWidth(font, text);\r\n    widths.push(currentWidth);\r\n    lineWidth += currentWidth;\r\n    const currentHeight = measureTextHeight(font);\r\n    heights.push(currentHeight);\r\n    lineHeight = Math.max(lineHeight, currentHeight);\r\n  }\r\n  return {width, height, widths, heights, lineWidths};\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {number} rotation Rotation.\r\n * @param {number} offsetX X offset.\r\n * @param {number} offsetY Y offset.\r\n */\r\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\r\n  if (rotation !== 0) {\r\n    context.translate(offsetX, offsetY);\r\n    context.rotate(rotation);\r\n    context.translate(-offsetX, -offsetY);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\r\n * @param {number} opacity Opacity.\r\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\r\n * @param {number} originX Origin X.\r\n * @param {number} originY Origin Y.\r\n * @param {number} w Width.\r\n * @param {number} h Height.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {import(\"../size.js\").Size} scale Scale.\r\n */\r\nexport function drawImageOrLabel(\r\n  context,\r\n  transform,\r\n  opacity,\r\n  labelOrImage,\r\n  originX,\r\n  originY,\r\n  w,\r\n  h,\r\n  x,\r\n  y,\r\n  scale\r\n) {\r\n  context.save();\r\n\r\n  if (opacity !== 1) {\r\n    context.globalAlpha *= opacity;\r\n  }\r\n  if (transform) {\r\n    context.transform.apply(context, transform);\r\n  }\r\n\r\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\r\n    // label\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\r\n  } else if (scale[0] < 0 || scale[1] < 0) {\r\n    // flipped image\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      0,\r\n      0,\r\n      w,\r\n      h\r\n    );\r\n  } else {\r\n    // if image not flipped translate and scale can be avoided\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      x,\r\n      y,\r\n      w * scale[0],\r\n      h * scale[1]\r\n    );\r\n  }\r\n\r\n  context.restore();\r\n}\r\n\r\n/**\r\n * @param {Label} label Label.\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nfunction executeLabelInstructions(label, context) {\r\n  const contextInstructions = label.contextInstructions;\r\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\r\n    if (Array.isArray(contextInstructions[i + 1])) {\r\n      context[contextInstructions[i]].apply(\r\n        context,\r\n        contextInstructions[i + 1]\r\n      );\r\n    } else {\r\n      context[contextInstructions[i]] = contextInstructions[i + 1];\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @module ol/style/RegularShape\r\n */\r\n\r\nimport ImageState from '../ImageState.js';\r\nimport ImageStyle from './Image.js';\r\nimport {asArray} from '../color.js';\r\nimport {asColorLike} from '../colorlike.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineCap,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../render/canvas.js';\r\n\r\n/**\r\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\r\n * is the number of sides.\r\n * @property {number} [radius] Radius of a regular polygon.\r\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\r\n * @property {number} [radius2] Second radius of a star.\r\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\r\n * Positive values will shift the shape right and up.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\r\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\r\n */\r\n\r\n/**\r\n * @typedef {Object} RenderOptions\r\n * @property {import(\"../colorlike.js\").ColorLike|undefined} strokeStyle StrokeStyle.\r\n * @property {number} strokeWidth StrokeWidth.\r\n * @property {number} size Size.\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>|null} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} miterLimit MiterLimit.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set regular shape style for vector features. The resulting shape will be\r\n * a regular polygon when `radius` is provided, or a star when `radius1` and\r\n * `radius2` are provided.\r\n * @api\r\n */\r\nclass RegularShape extends ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    const rotateWithView =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    super({\r\n      opacity: 1,\r\n      rotateWithView: rotateWithView,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      declutterMode: options.declutterMode,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<number, HTMLCanvasElement>}\r\n     */\r\n    this.canvases_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|null}\r\n     */\r\n    this.hitDetectionCanvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.points_ = options.points;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.radius_ =\r\n      options.radius !== undefined ? options.radius : options.radius1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.radius2_ = options.radius2;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderOptions}\r\n     */\r\n    this.renderOptions_;\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {RegularShape} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new RegularShape({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      points: this.getPoints(),\r\n      radius: this.getRadius(),\r\n      radius2: this.getRadius2(),\r\n      angle: this.getAngle(),\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   */\r\n  getAnchor() {\r\n    const size = this.size_;\r\n    const displacement = this.getDisplacement();\r\n    const scale = this.getScaleArray();\r\n    // anchor is scaled by renderer but displacement should not be scaled\r\n    // so divide by scale here\r\n    return [\r\n      size[0] / 2 - displacement[0] / scale[0],\r\n      size[1] / 2 + displacement[1] / scale[1],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the angle used in generating the shape.\r\n   * @return {number} Shape's rotation in radians.\r\n   * @api\r\n   */\r\n  getAngle() {\r\n    return this.angle_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the shape.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    if (!this.hitDetectionCanvas_) {\r\n      this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(\r\n        this.renderOptions_\r\n      );\r\n    }\r\n    return this.hitDetectionCanvas_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLCanvasElement} Image or Canvas element.\r\n   * @api\r\n   */\r\n  getImage(pixelRatio) {\r\n    let image = this.canvases_[pixelRatio];\r\n    if (!image) {\r\n      const renderOptions = this.renderOptions_;\r\n      const context = createCanvasContext2D(\r\n        renderOptions.size * pixelRatio,\r\n        renderOptions.size * pixelRatio\r\n      );\r\n      this.draw_(renderOptions, context, pixelRatio);\r\n\r\n      image = context.canvas;\r\n      this.canvases_[pixelRatio] = image;\r\n    }\r\n    return image;\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return pixelRatio;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return ImageState.LOADED;\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   */\r\n  getOrigin() {\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the number of points for generating the shape.\r\n   * @return {number} Number of points for stars and regular polygons.\r\n   * @api\r\n   */\r\n  getPoints() {\r\n    return this.points_;\r\n  }\r\n\r\n  /**\r\n   * Get the (primary) radius for the shape.\r\n   * @return {number} Radius.\r\n   * @api\r\n   */\r\n  getRadius() {\r\n    return this.radius_;\r\n  }\r\n\r\n  /**\r\n   * Get the secondary radius for the shape.\r\n   * @return {number|undefined} Radius2.\r\n   * @api\r\n   */\r\n  getRadius2() {\r\n    return this.radius2_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   * @api\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the shape.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {}\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {}\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {}\r\n\r\n  /**\r\n   * Calculate additional canvas size needed for the miter.\r\n   * @param {string} lineJoin Line join\r\n   * @param {number} strokeWidth Stroke width\r\n   * @param {number} miterLimit Miter limit\r\n   * @return {number} Additional canvas size needed\r\n   * @private\r\n   */\r\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\r\n    if (\r\n      strokeWidth === 0 ||\r\n      this.points_ === Infinity ||\r\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\r\n    ) {\r\n      return strokeWidth;\r\n    }\r\n    // m  | ^\r\n    // i  | |\\                  .\r\n    // t >|  #\\\r\n    // e  | |\\ \\              .\r\n    // r      \\s\\\r\n    //      |  \\t\\          .                 .\r\n    //          \\r\\                      .   .\r\n    //      |    \\o\\      .          .  . . .\r\n    //          e \\k\\            .  .    . .\r\n    //      |      \\e\\  .    .  .       . .\r\n    //       d      \\ \\  .  .          . .\r\n    //      | _ _a_ _\\#  .            . .\r\n    //   r1          / `             . .\r\n    //      |                       . .\r\n    //       b     /               . .\r\n    //      |                     . .\r\n    //           / r2            . .\r\n    //      |                        .   .\r\n    //         /                           .   .\r\n    //      |α                                   .   .\r\n    //       /                                         .   .\r\n    //      ° center\r\n    let r1 = this.radius_;\r\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\r\n    if (r1 < r2) {\r\n      const tmp = r1;\r\n      r1 = r2;\r\n      r2 = tmp;\r\n    }\r\n    const points =\r\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\r\n    const alpha = (2 * Math.PI) / points;\r\n    const a = r2 * Math.sin(alpha);\r\n    const b = Math.sqrt(r2 * r2 - a * a);\r\n    const d = r1 - b;\r\n    const e = Math.sqrt(a * a + d * d);\r\n    const miterRatio = e / a;\r\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\r\n      return miterRatio * strokeWidth;\r\n    }\r\n    // Calculate the distance from center to the stroke corner where\r\n    // it was cut short because of the miter limit.\r\n    //              l\r\n    //        ----+---- <= distance from center to here is maxr\r\n    //       /####|k ##\\\r\n    //      /#####^#####\\\r\n    //     /#### /+\\# s #\\\r\n    //    /### h/+++\\# t #\\\r\n    //   /### t/+++++\\# r #\\\r\n    //  /### a/+++++++\\# o #\\\r\n    // /### p/++ fill +\\# k #\\\r\n    ///#### /+++++^+++++\\# e #\\\r\n    //#####/+++++/+\\+++++\\#####\\\r\n    const k = strokeWidth / 2 / miterRatio;\r\n    const l = (strokeWidth / 2) * (d / e);\r\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\r\n    const bevelAdd = maxr - r1;\r\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\r\n      return bevelAdd * 2;\r\n    }\r\n    // If outer miter is over the miter limit the inner miter may reach through the\r\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\r\n    const aa = r1 * Math.sin(alpha);\r\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\r\n    const dd = r2 - bb;\r\n    const ee = Math.sqrt(aa * aa + dd * dd);\r\n    const innerMiterRatio = ee / aa;\r\n    if (innerMiterRatio <= miterLimit) {\r\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\r\n      return 2 * Math.max(bevelAdd, innerLength);\r\n    }\r\n    return bevelAdd * 2;\r\n  }\r\n\r\n  /**\r\n   * @return {RenderOptions}  The render options\r\n   * @protected\r\n   */\r\n  createRenderOptions() {\r\n    let lineCap = defaultLineCap;\r\n    let lineJoin = defaultLineJoin;\r\n    let miterLimit = 0;\r\n    let lineDash = null;\r\n    let lineDashOffset = 0;\r\n    let strokeStyle;\r\n    let strokeWidth = 0;\r\n\r\n    if (this.stroke_) {\r\n      strokeStyle = asColorLike(this.stroke_.getColor() ?? defaultStrokeStyle);\r\n      strokeWidth = this.stroke_.getWidth() ?? defaultLineWidth;\r\n      lineDash = this.stroke_.getLineDash();\r\n      lineDashOffset = this.stroke_.getLineDashOffset() ?? 0;\r\n      lineJoin = this.stroke_.getLineJoin() ?? defaultLineJoin;\r\n      lineCap = this.stroke_.getLineCap() ?? defaultLineCap;\r\n      miterLimit = this.stroke_.getMiterLimit() ?? defaultMiterLimit;\r\n    }\r\n\r\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\r\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\r\n    const size = Math.ceil(2 * maxRadius + add);\r\n\r\n    return {\r\n      strokeStyle: strokeStyle,\r\n      strokeWidth: strokeWidth,\r\n      size: size,\r\n      lineCap: lineCap,\r\n      lineDash: lineDash,\r\n      lineDashOffset: lineDashOffset,\r\n      lineJoin: lineJoin,\r\n      miterLimit: miterLimit,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  render() {\r\n    this.renderOptions_ = this.createRenderOptions();\r\n    const size = this.renderOptions_.size;\r\n    this.canvases_ = {};\r\n    this.hitDetectionCanvas_ = null;\r\n    this.size_ = [size, size];\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The rendering context.\r\n   * @param {number} pixelRatio The pixel ratio.\r\n   */\r\n  draw_(renderOptions, context, pixelRatio) {\r\n    context.scale(pixelRatio, pixelRatio);\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n      if (color === null) {\r\n        color = defaultFillStyle;\r\n      }\r\n      context.fillStyle = asColorLike(color);\r\n      context.fill();\r\n    }\r\n    if (renderOptions.strokeStyle) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineCap = renderOptions.lineCap;\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @return {HTMLCanvasElement} Canvas containing the icon\r\n   */\r\n  createHitDetectionCanvas_(renderOptions) {\r\n    let context;\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n\r\n      // determine if fill is transparent (or pattern or gradient)\r\n      let opacity = 0;\r\n      if (typeof color === 'string') {\r\n        color = asArray(color);\r\n      }\r\n      if (color === null) {\r\n        opacity = 1;\r\n      } else if (Array.isArray(color)) {\r\n        opacity = color.length === 4 ? color[3] : 1;\r\n      }\r\n      if (opacity === 0) {\r\n        // if a transparent fill style is set, create an extra hit-detection image\r\n        // with a default fill style\r\n        context = createCanvasContext2D(renderOptions.size, renderOptions.size);\r\n        this.drawHitDetectionCanvas_(renderOptions, context);\r\n      }\r\n    }\r\n    return context ? context.canvas : this.getImage(1);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context The context to draw in.\r\n   */\r\n  createPath_(context) {\r\n    let points = this.points_;\r\n    const radius = this.radius_;\r\n    if (points === Infinity) {\r\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\r\n    } else {\r\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\r\n      if (this.radius2_ !== undefined) {\r\n        points *= 2;\r\n      }\r\n      const startAngle = this.angle_ - Math.PI / 2;\r\n      const step = (2 * Math.PI) / points;\r\n      for (let i = 0; i < points; i++) {\r\n        const angle0 = startAngle + i * step;\r\n        const radiusC = i % 2 === 0 ? radius : radius2;\r\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\r\n      }\r\n      context.closePath();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The context.\r\n   */\r\n  drawHitDetectionCanvas_(renderOptions, context) {\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    context.fillStyle = defaultFillStyle;\r\n    context.fill();\r\n    if (renderOptions.strokeStyle) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n}\r\n\r\nexport default RegularShape;\r\n", "/**\r\n * @module ol/style/Circle\r\n */\r\n\r\nimport RegularShape from './RegularShape.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {Array<number>} [displacement=[0,0]] displacement\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\r\n * @property {number} [rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\r\nclass CircleStyle extends RegularShape {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {radius: 5};\r\n\r\n    super({\r\n      points: Infinity,\r\n      fill: options.fill,\r\n      radius: options.radius,\r\n      stroke: options.stroke,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      rotateWithView:\r\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      declutterMode: options.declutterMode,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {CircleStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new CircleStyle({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      radius: this.getRadius(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */\r\n  setRadius(radius) {\r\n    this.radius_ = radius;\r\n    this.render();\r\n  }\r\n}\r\n\r\nexport default CircleStyle;\r\n", "/**\r\n * @module ol/style/Style\r\n */\r\n\r\nimport CircleStyle from './Circle.js';\r\nimport Fill from './Fill.js';\r\nimport Stroke from './Stroke.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\r\n * vector layer can be styled. If the function returns `undefined`, the\r\n * feature will not be rendered.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\r\n */\r\n\r\n/**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */\r\n\r\n/**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\r\n * in hit detection rendering.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)',\r\n *  });\r\n *  const stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25,\r\n *  });\r\n *  const styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5,\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke,\r\n *    }),\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const styles = {};\r\n *  const white = [255, 255, 255, 1];\r\n *  const blue = [0, 153, 255, 1];\r\n *  const width = 3;\r\n *  styles['Polygon'] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5],\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiPolygon'] =\r\n *      styles['Polygon'];\r\n *  styles['LineString'] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2,\r\n *      }),\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width,\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiLineString'] = styles['LineString'];\r\n *\r\n *  styles['Circle'] = styles['Polygon'].concat(\r\n *    styles['LineString']\r\n *  );\r\n *\r\n *  styles['Point'] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue,\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2,\r\n *        }),\r\n *      }),\r\n *      zIndex: Infinity,\r\n *    }),\r\n *  ];\r\n *  styles['MultiPoint'] =\r\n *      styles['Point'];\r\n *  styles['GeometryCollection'] =\r\n *      styles['Polygon'].concat(\r\n *          styles['LineString'],\r\n *          styles['Point']\r\n *      );\r\n * ```\r\n *\r\n * @api\r\n */\r\nclass Style {\r\n  /**\r\n   * @param {Options} [options] Style options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n     */\r\n    this.geometry_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */\r\n    this.geometryFunction_ = defaultGeometryFunction;\r\n\r\n    if (options.geometry !== undefined) {\r\n      this.setGeometry(options.geometry);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Image.js\").default|null}\r\n     */\r\n    this.image_ = options.image !== undefined ? options.image : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.hitDetectionRenderer_ =\r\n      options.hitDetectionRenderer !== undefined\r\n        ? options.hitDetectionRenderer\r\n        : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default|null}\r\n     */\r\n    this.text_ = options.text !== undefined ? options.text : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zIndex_ = options.zIndex;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    let geometry = this.getGeometry();\r\n    if (geometry && typeof geometry === 'object') {\r\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        geometry\r\n      ).clone();\r\n    }\r\n    return new Style({\r\n      geometry: geometry ?? undefined,\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      image: this.getImage() ? this.getImage().clone() : undefined,\r\n      renderer: this.getRenderer() ?? undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      text: this.getText() ? this.getText().clone() : undefined,\r\n      zIndex: this.getZIndex(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getRenderer() {\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setRenderer(renderer) {\r\n    this.renderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style used\r\n   * in hit detection.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setHitDetectionRenderer(renderer) {\r\n    this.hitDetectionRenderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getHitDetectionRenderer() {\r\n    return this.hitDetectionRenderer_;\r\n  }\r\n\r\n  /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this.geometry_;\r\n  }\r\n\r\n  /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */\r\n  getGeometryFunction() {\r\n    return this.geometryFunction_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default|null} Image style.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default|null} Text style.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */\r\n  getZIndex() {\r\n    return this.zIndex_;\r\n  }\r\n\r\n  /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */\r\n  setGeometry(geometry) {\r\n    if (typeof geometry === 'function') {\r\n      this.geometryFunction_ = geometry;\r\n    } else if (typeof geometry === 'string') {\r\n      this.geometryFunction_ = function (feature) {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n          feature.get(geometry)\r\n        );\r\n      };\r\n    } else if (!geometry) {\r\n      this.geometryFunction_ = defaultGeometryFunction;\r\n    } else if (geometry !== undefined) {\r\n      this.geometryFunction_ = function () {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\r\n      };\r\n    }\r\n    this.geometry_ = geometry;\r\n  }\r\n\r\n  /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */\r\n  setZIndex(zIndex) {\r\n    this.zIndex_ = zIndex;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a style function.  Functions passed through\r\n * unchanged.  Arrays of Style or single style objects wrapped in a\r\n * new style function.\r\n * @param {StyleFunction|Array<Style>|Style} obj\r\n *     A style function, a single style, or an array of styles.\r\n * @return {StyleFunction} A style function.\r\n */\r\nexport function toFunction(obj) {\r\n  let styleFunction;\r\n\r\n  if (typeof obj === 'function') {\r\n    styleFunction = obj;\r\n  } else {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(obj)) {\r\n      styles = obj;\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (obj).getZIndex) === 'function',\r\n        'Expected an `Style` or an array of `Style`'\r\n      );\r\n      const style = /** @type {Style} */ (obj);\r\n      styles = [style];\r\n    }\r\n    styleFunction = function () {\r\n      return styles;\r\n    };\r\n  }\r\n  return styleFunction;\r\n}\r\n\r\n/**\r\n * @type {Array<Style>|null}\r\n */\r\nlet defaultStyles = null;\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<Style>} Style.\r\n */\r\nexport function createDefaultStyle(feature, resolution) {\r\n  // We don't use an immediately-invoked function\r\n  // and a closure so we don't get an error at script evaluation time in\r\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\r\n  // canvas.getContext('2d') at construction time, which will cause an.error\r\n  // in such browsers.)\r\n  if (!defaultStyles) {\r\n    const fill = new Fill({\r\n      color: 'rgba(255,255,255,0.4)',\r\n    });\r\n    const stroke = new Stroke({\r\n      color: '#3399CC',\r\n      width: 1.25,\r\n    });\r\n    defaultStyles = [\r\n      new Style({\r\n        image: new CircleStyle({\r\n          fill: fill,\r\n          stroke: stroke,\r\n          radius: 5,\r\n        }),\r\n        fill: fill,\r\n        stroke: stroke,\r\n      }),\r\n    ];\r\n  }\r\n  return defaultStyles;\r\n}\r\n\r\n/**\r\n * Default styles for editing features.\r\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\r\n */\r\nexport function createEditingStyle() {\r\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\r\n  const styles = {};\r\n  const white = [255, 255, 255, 1];\r\n  const blue = [0, 153, 255, 1];\r\n  const width = 3;\r\n  styles['Polygon'] = [\r\n    new Style({\r\n      fill: new Fill({\r\n        color: [255, 255, 255, 0.5],\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiPolygon'] = styles['Polygon'];\r\n\r\n  styles['LineString'] = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: white,\r\n        width: width + 2,\r\n      }),\r\n    }),\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: blue,\r\n        width: width,\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiLineString'] = styles['LineString'];\r\n\r\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\r\n\r\n  styles['Point'] = [\r\n    new Style({\r\n      image: new CircleStyle({\r\n        radius: width * 2,\r\n        fill: new Fill({\r\n          color: blue,\r\n        }),\r\n        stroke: new Stroke({\r\n          color: white,\r\n          width: width / 2,\r\n        }),\r\n      }),\r\n      zIndex: Infinity,\r\n    }),\r\n  ];\r\n  styles['MultiPoint'] = styles['Point'];\r\n\r\n  styles['GeometryCollection'] = styles['Polygon'].concat(\r\n    styles['LineString'],\r\n    styles['Point']\r\n  );\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */\r\nfunction defaultGeometryFunction(feature) {\r\n  return feature.getGeometry();\r\n}\r\n\r\nexport default Style;\r\n", "/**\r\n * @module ol/style/Text\r\n */\r\nimport Fill from './Fill.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {'point' | 'line'} TextPlacement\r\n * Default text placement is `'point'`. Note that\r\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\r\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\r\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\r\n */\r\n\r\n/**\r\n * @typedef {'left' | 'center' | 'right'} TextJustify\r\n */\r\n\r\n/**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */\r\nconst DEFAULT_FILL_COLOR = '#333';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS `font` value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {TextPlacement} [placement='point'] Text placement.\r\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\r\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\r\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\r\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\r\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\r\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\r\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\r\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {TextJustify} [justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\r\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */\r\nclass Text {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.font_ = options.font;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>|undefined}\r\n     */\r\n    this.text_ = options.text;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextAlign|undefined}\r\n     */\r\n    this.textAlign_ = options.textAlign;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextJustify|undefined}\r\n     */\r\n    this.justify_ = options.justify;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.repeat_ = options.repeat;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextBaseline|undefined}\r\n     */\r\n    this.textBaseline_ = options.textBaseline;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ =\r\n      options.fill !== undefined\r\n        ? options.fill\r\n        : new Fill({color: DEFAULT_FILL_COLOR});\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxAngle_ =\r\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextPlacement}\r\n     */\r\n    this.placement_ =\r\n      options.placement !== undefined ? options.placement : 'point';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overflow_ = !!options.overflow;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.backgroundFill_ = options.backgroundFill\r\n      ? options.backgroundFill\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.backgroundStroke_ = options.backgroundStroke\r\n      ? options.backgroundStroke\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.padding_ = options.padding === undefined ? null : options.padding;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new Text({\r\n      font: this.getFont(),\r\n      placement: this.getPlacement(),\r\n      repeat: this.getRepeat(),\r\n      maxAngle: this.getMaxAngle(),\r\n      overflow: this.getOverflow(),\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      text: this.getText(),\r\n      textAlign: this.getTextAlign(),\r\n      justify: this.getJustify(),\r\n      textBaseline: this.getTextBaseline(),\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      offsetX: this.getOffsetX(),\r\n      offsetY: this.getOffsetY(),\r\n      backgroundFill: this.getBackgroundFill()\r\n        ? this.getBackgroundFill().clone()\r\n        : undefined,\r\n      backgroundStroke: this.getBackgroundStroke()\r\n        ? this.getBackgroundStroke().clone()\r\n        : undefined,\r\n      padding: this.getPadding() || undefined,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */\r\n  getOverflow() {\r\n    return this.overflow_;\r\n  }\r\n\r\n  /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */\r\n  getFont() {\r\n    return this.font_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */\r\n  getMaxAngle() {\r\n    return this.maxAngle_;\r\n  }\r\n\r\n  /**\r\n   * Get the label placement.\r\n   * @return {TextPlacement} Text placement.\r\n   * @api\r\n   */\r\n  getPlacement() {\r\n    return this.placement_;\r\n  }\r\n\r\n  /**\r\n   * Get the repeat interval of the text.\r\n   * @return {number|undefined} Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  getRepeat() {\r\n    return this.repeat_;\r\n  }\r\n\r\n  /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */\r\n  getOffsetX() {\r\n    return this.offsetX_;\r\n  }\r\n\r\n  /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */\r\n  getOffsetY() {\r\n    return this.offsetY_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the text scale.\r\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the text to be rendered.\r\n   * @return {string|Array<string>|undefined} Text.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Get the text alignment.\r\n   * @return {CanvasTextAlign|undefined} Text align.\r\n   * @api\r\n   */\r\n  getTextAlign() {\r\n    return this.textAlign_;\r\n  }\r\n\r\n  /**\r\n   * Get the justification.\r\n   * @return {TextJustify|undefined} Justification.\r\n   * @api\r\n   */\r\n  getJustify() {\r\n    return this.justify_;\r\n  }\r\n\r\n  /**\r\n   * Get the text baseline.\r\n   * @return {CanvasTextBaseline|undefined} Text baseline.\r\n   * @api\r\n   */\r\n  getTextBaseline() {\r\n    return this.textBaseline_;\r\n  }\r\n\r\n  /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getBackgroundFill() {\r\n    return this.backgroundFill_;\r\n  }\r\n\r\n  /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getBackgroundStroke() {\r\n    return this.backgroundStroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>|null} Padding.\r\n   * @api\r\n   */\r\n  getPadding() {\r\n    return this.padding_;\r\n  }\r\n\r\n  /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */\r\n  setOverflow(overflow) {\r\n    this.overflow_ = overflow;\r\n  }\r\n\r\n  /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */\r\n  setFont(font) {\r\n    this.font_ = font;\r\n  }\r\n\r\n  /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */\r\n  setMaxAngle(maxAngle) {\r\n    this.maxAngle_ = maxAngle;\r\n  }\r\n\r\n  /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */\r\n  setOffsetX(offsetX) {\r\n    this.offsetX_ = offsetX;\r\n  }\r\n\r\n  /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */\r\n  setOffsetY(offsetY) {\r\n    this.offsetY_ = offsetY;\r\n  }\r\n\r\n  /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {TextPlacement} placement Placement.\r\n   * @api\r\n   */\r\n  setPlacement(placement) {\r\n    this.placement_ = placement;\r\n  }\r\n\r\n  /**\r\n   * Set the repeat interval of the text.\r\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  setRepeat(repeat) {\r\n    this.repeat_ = repeat;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\r\n  }\r\n\r\n  /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|Array<string>|undefined} text Text.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\r\n   * @api\r\n   */\r\n  setTextAlign(textAlign) {\r\n    this.textAlign_ = textAlign;\r\n  }\r\n\r\n  /**\r\n   * Set the justification.\r\n   *\r\n   * @param {TextJustify|undefined} justify Justification.\r\n   * @api\r\n   */\r\n  setJustify(justify) {\r\n    this.justify_ = justify;\r\n  }\r\n\r\n  /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */\r\n  setTextBaseline(textBaseline) {\r\n    this.textBaseline_ = textBaseline;\r\n  }\r\n\r\n  /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setBackgroundFill(fill) {\r\n    this.backgroundFill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setBackgroundStroke(stroke) {\r\n    this.backgroundStroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {Array<number>|null} padding Padding.\r\n   * @api\r\n   */\r\n  setPadding(padding) {\r\n    this.padding_ = padding;\r\n  }\r\n}\r\n\r\nexport default Text;\r\n", "/**\r\n * @module ol/format/KML\r\n */\r\nimport Feature from '../Feature.js';\r\nimport Fill from '../style/Fill.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport Icon from '../style/Icon.js';\r\nimport ImageState from '../ImageState.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport Stroke from '../style/Stroke.js';\r\nimport Style from '../style/Style.js';\r\nimport Text from '../style/Text.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  getAllTextContent,\r\n  isDocument,\r\n  makeArrayExtender,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeObjectPropertySetter,\r\n  makeReplacer,\r\n  makeSequence,\r\n  makeSimpleNodeFactory,\r\n  makeStructureNS,\r\n  parse,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {asArray} from '../color.js';\r\nimport {extend} from '../array.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  readBoolean,\r\n  readDecimal,\r\n  readString,\r\n  writeBooleanTextNode,\r\n  writeCDATASection,\r\n  writeDecimalTextNode,\r\n  writeStringTextNode,\r\n} from './xsd.js';\r\nimport {toRadians} from '../math.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {Object} Vec2\r\n * @property {number} x X coordinate.\r\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} xunits Units of x.\r\n * @property {number} y Y coordinate.\r\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} yunits Units of Y.\r\n * @property {import(\"../style/Icon.js\").IconOrigin} [origin] Origin.\r\n */\r\n\r\n/**\r\n * @typedef {Object} GxTrackObject\r\n * @property {Array<Array<number>>} coordinates Coordinates.\r\n * @property {Array<number>} whens Whens.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [\r\n  null,\r\n  'http://earth.google.com/kml/2.0',\r\n  'http://earth.google.com/kml/2.1',\r\n  'http://earth.google.com/kml/2.2',\r\n  'http://www.opengis.net/kml/2.2',\r\n];\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst SCHEMA_LOCATION =\r\n  'http://www.opengis.net/kml/2.2 ' +\r\n  'https://developers.google.com/kml/schema/kml22gx.xsd';\r\n\r\n/**\r\n * @type {Object<string, import(\"../style/Icon.js\").IconAnchorUnits>}\r\n */\r\nconst ICON_ANCHOR_UNITS_MAP = {\r\n  'fraction': 'fraction',\r\n  'pixels': 'pixels',\r\n  'insetPixels': 'pixels',\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PLACEMARK_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'ExtendedData': extendedDataParser,\r\n    'Region': regionParser,\r\n    'MultiGeometry': makeObjectPropertySetter(readMultiGeometry, 'geometry'),\r\n    'LineString': makeObjectPropertySetter(readLineString, 'geometry'),\r\n    'LinearRing': makeObjectPropertySetter(readLinearRing, 'geometry'),\r\n    'Point': makeObjectPropertySetter(readPoint, 'geometry'),\r\n    'Polygon': makeObjectPropertySetter(readPolygon, 'geometry'),\r\n    'Style': makeObjectPropertySetter(readStyle),\r\n    'StyleMap': placemarkStyleMapParser,\r\n    'address': makeObjectPropertySetter(readString),\r\n    'description': makeObjectPropertySetter(readString),\r\n    'name': makeObjectPropertySetter(readString),\r\n    'open': makeObjectPropertySetter(readBoolean),\r\n    'phoneNumber': makeObjectPropertySetter(readString),\r\n    'styleUrl': makeObjectPropertySetter(readStyleURL),\r\n    'visibility': makeObjectPropertySetter(readBoolean),\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'MultiTrack': makeObjectPropertySetter(readGxMultiTrack, 'geometry'),\r\n    'Track': makeObjectPropertySetter(readGxTrack, 'geometry'),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst NETWORK_LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ExtendedData': extendedDataParser,\r\n  'Region': regionParser,\r\n  'Link': linkParser,\r\n  'address': makeObjectPropertySetter(readString),\r\n  'description': makeObjectPropertySetter(readString),\r\n  'name': makeObjectPropertySetter(readString),\r\n  'open': makeObjectPropertySetter(readBoolean),\r\n  'phoneNumber': makeObjectPropertySetter(readString),\r\n  'visibility': makeObjectPropertySetter(readBoolean),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'href': makeObjectPropertySetter(readURI),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CAMERA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  Altitude: makeObjectPropertySetter(readDecimal),\r\n  Longitude: makeObjectPropertySetter(readDecimal),\r\n  Latitude: makeObjectPropertySetter(readDecimal),\r\n  Tilt: makeObjectPropertySetter(readDecimal),\r\n  AltitudeMode: makeObjectPropertySetter(readString),\r\n  Heading: makeObjectPropertySetter(readDecimal),\r\n  Roll: makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst REGION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LatLonAltBox': latLonAltBoxParser,\r\n  'Lod': lodParser,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst KML_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['Document', 'Placemark']);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst KML_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Document': makeChildAppender(writeDocument),\r\n  'Placemark': makeChildAppender(writePlacemark),\r\n});\r\n\r\n/**\r\n * @type {import(\"../color.js\").Color}\r\n */\r\nlet DEFAULT_COLOR;\r\n\r\n/**\r\n * @type {Fill|null}\r\n */\r\nlet DEFAULT_FILL_STYLE = null;\r\n\r\n/**\r\n * Get the default fill style (or null if not yet set).\r\n * @return {Fill|null} The default fill style.\r\n */\r\nexport function getDefaultFillStyle() {\r\n  return DEFAULT_FILL_STYLE;\r\n}\r\n\r\n/**\r\n * @type {import(\"../size.js\").Size}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_ANCHOR;\r\n\r\n/**\r\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n\r\n/**\r\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n\r\n/**\r\n * @type {import(\"../size.js\").Size}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_SIZE;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_SRC;\r\n\r\n/**\r\n * @type {import(\"../style/Image.js\").default|null}\r\n */\r\nlet DEFAULT_IMAGE_STYLE = null;\r\n\r\n/**\r\n * Get the default image style (or null if not yet set).\r\n * @return {import(\"../style/Image.js\").default|null} The default image style.\r\n */\r\nexport function getDefaultImageStyle() {\r\n  return DEFAULT_IMAGE_STYLE;\r\n}\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet DEFAULT_NO_IMAGE_STYLE;\r\n\r\n/**\r\n * @type {Stroke|null}\r\n */\r\nlet DEFAULT_STROKE_STYLE = null;\r\n\r\n/**\r\n * Get the default stroke style (or null if not yet set).\r\n * @return {Stroke|null} The default stroke style.\r\n */\r\nexport function getDefaultStrokeStyle() {\r\n  return DEFAULT_STROKE_STYLE;\r\n}\r\n\r\n/**\r\n * @type {Stroke}\r\n */\r\nlet DEFAULT_TEXT_STROKE_STYLE;\r\n\r\n/**\r\n * @type {Text|null}\r\n */\r\nlet DEFAULT_TEXT_STYLE = null;\r\n\r\n/**\r\n * Get the default text style (or null if not yet set).\r\n * @return {Text|null} The default text style.\r\n */\r\nexport function getDefaultTextStyle() {\r\n  return DEFAULT_TEXT_STYLE;\r\n}\r\n\r\n/**\r\n * @type {Style|null}\r\n */\r\nlet DEFAULT_STYLE = null;\r\n\r\n/**\r\n * Get the default style (or null if not yet set).\r\n * @return {Style|null} The default style.\r\n */\r\nexport function getDefaultStyle() {\r\n  return DEFAULT_STYLE;\r\n}\r\n\r\n/**\r\n * @type {Array<Style>|null}\r\n */\r\nlet DEFAULT_STYLE_ARRAY = null;\r\n\r\n/**\r\n * Get the default style array (or null if not yet set).\r\n * @return {Array<Style>|null} The default style.\r\n */\r\nexport function getDefaultStyleArray() {\r\n  return DEFAULT_STYLE_ARRAY;\r\n}\r\n\r\n/**\r\n * Function that returns the scale needed to normalize an icon image to 32 pixels.\r\n * @param {import(\"../size.js\").Size} size Image size.\r\n * @return {number} Scale.\r\n */\r\nfunction scaleForSize(size) {\r\n  return 32 / Math.min(size[0], size[1]);\r\n}\r\n\r\nfunction createStyleDefaults() {\r\n  DEFAULT_COLOR = [255, 255, 255, 1];\r\n\r\n  DEFAULT_FILL_STYLE = new Fill({\r\n    color: DEFAULT_COLOR,\r\n  });\r\n\r\n  DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2];\r\n\r\n  DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = 'pixels';\r\n\r\n  DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = 'pixels';\r\n\r\n  DEFAULT_IMAGE_STYLE_SIZE = [64, 64];\r\n\r\n  DEFAULT_IMAGE_STYLE_SRC =\r\n    'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';\r\n\r\n  DEFAULT_IMAGE_STYLE = new Icon({\r\n    anchor: DEFAULT_IMAGE_STYLE_ANCHOR,\r\n    anchorOrigin: 'bottom-left',\r\n    anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,\r\n    anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,\r\n    crossOrigin: 'anonymous',\r\n    rotation: 0,\r\n    scale: scaleForSize(DEFAULT_IMAGE_STYLE_SIZE),\r\n    size: DEFAULT_IMAGE_STYLE_SIZE,\r\n    src: DEFAULT_IMAGE_STYLE_SRC,\r\n  });\r\n\r\n  DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';\r\n\r\n  DEFAULT_STROKE_STYLE = new Stroke({\r\n    color: DEFAULT_COLOR,\r\n    width: 1,\r\n  });\r\n\r\n  DEFAULT_TEXT_STROKE_STYLE = new Stroke({\r\n    color: [51, 51, 51, 1],\r\n    width: 2,\r\n  });\r\n\r\n  DEFAULT_TEXT_STYLE = new Text({\r\n    font: 'bold 16px Helvetica',\r\n    fill: DEFAULT_FILL_STYLE,\r\n    stroke: DEFAULT_TEXT_STROKE_STYLE,\r\n    scale: 0.8,\r\n  });\r\n\r\n  DEFAULT_STYLE = new Style({\r\n    fill: DEFAULT_FILL_STYLE,\r\n    image: DEFAULT_IMAGE_STYLE,\r\n    text: DEFAULT_TEXT_STYLE,\r\n    stroke: DEFAULT_STROKE_STYLE,\r\n    zIndex: 0,\r\n  });\r\n\r\n  DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];\r\n}\r\n\r\n/**\r\n * @type {HTMLTextAreaElement}\r\n */\r\nlet TEXTAREA;\r\n\r\n/**\r\n * A function that takes a url `{string}` and returns a url `{string}`.\r\n * Might be used to change an icon path or to substitute a\r\n * data url obtained from a KMZ array buffer.\r\n *\r\n * @typedef {function(string):string} IconUrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * Function that returns a url unchanged.\r\n * @param {string} href Input url.\r\n * @return {string} Output url.\r\n */\r\nfunction defaultIconUrlFunction(href) {\r\n  return href;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [extractStyles=true] Extract styles from the KML.\r\n * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.\r\n * @property {Array<Style>} [defaultStyle] Default style. The\r\n * default default style is the same as Google Earth.\r\n * @property {boolean} [writeStyles=true] Write styles into KML.\r\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * @property {IconUrlFunction} [iconUrlFunction] Function that takes a url string and returns a url string.\r\n * Might be used to change an icon path or to substitute a data url obtained from a KMZ array buffer.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the KML format.\r\n *\r\n * {@link module:ol/format/KML~KML#readFeature} will read the first feature from\r\n * a KML source.\r\n *\r\n * MultiGeometries are converted into GeometryCollections if they are a mix of\r\n * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are\r\n * all of the same type.\r\n *\r\n * @api\r\n */\r\nclass KML extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    if (!DEFAULT_STYLE_ARRAY) {\r\n      createStyleDefaults();\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Style>}\r\n     */\r\n    this.defaultStyle_ = options.defaultStyle\r\n      ? options.defaultStyle\r\n      : DEFAULT_STYLE_ARRAY;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.extractStyles_ =\r\n      options.extractStyles !== undefined ? options.extractStyles : true;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.writeStyles_ =\r\n      options.writeStyles !== undefined ? options.writeStyles : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, (Array<Style>|string)>}\r\n     */\r\n    this.sharedStyles_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.showPointNames_ =\r\n      options.showPointNames !== undefined ? options.showPointNames : true;\r\n\r\n    /**\r\n     * @type {null|string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\r\n\r\n    /**\r\n     * @type {IconUrlFunction}\r\n     */\r\n    this.iconUrlFunction_ = options.iconUrlFunction\r\n      ? options.iconUrlFunction\r\n      : defaultIconUrlFunction;\r\n\r\n    this.supportedMediaTypes = ['application/vnd.google-earth.kml+xml'];\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   * @return {Array<Feature>|undefined} Features.\r\n   */\r\n  readDocumentOrFolder_(node, objectStack) {\r\n    // FIXME use scope somehow\r\n    const parsersNS = makeStructureNS(NAMESPACE_URIS, {\r\n      'Document': makeArrayExtender(this.readDocumentOrFolder_, this),\r\n      'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),\r\n      'Placemark': makeArrayPusher(this.readPlacemark_, this),\r\n      'Style': this.readSharedStyle_.bind(this),\r\n      'StyleMap': this.readSharedStyleMap_.bind(this),\r\n    });\r\n    /** @type {Array<Feature>} */\r\n    // @ts-ignore\r\n    const features = pushParseAndPop([], parsersNS, node, objectStack, this);\r\n    if (features) {\r\n      return features;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   * @return {Feature|undefined} Feature.\r\n   */\r\n  readPlacemark_(node, objectStack) {\r\n    const object = pushParseAndPop(\r\n      {'geometry': null},\r\n      PLACEMARK_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (!object) {\r\n      return undefined;\r\n    }\r\n    const feature = new Feature();\r\n    const id = node.getAttribute('id');\r\n    if (id !== null) {\r\n      feature.setId(id);\r\n    }\r\n    const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n      objectStack[0]\r\n    );\r\n\r\n    const geometry = object['geometry'];\r\n    if (geometry) {\r\n      transformGeometryWithOptions(geometry, false, options);\r\n    }\r\n    feature.setGeometry(geometry);\r\n    delete object['geometry'];\r\n\r\n    if (this.extractStyles_) {\r\n      const style = object['Style'];\r\n      const styleUrl = object['styleUrl'];\r\n      const styleFunction = createFeatureStyleFunction(\r\n        style,\r\n        styleUrl,\r\n        this.defaultStyle_,\r\n        this.sharedStyles_,\r\n        this.showPointNames_\r\n      );\r\n      feature.setStyle(styleFunction);\r\n    }\r\n    delete object['Style'];\r\n    // we do not remove the styleUrl property from the object, so it\r\n    // gets stored on feature when setProperties is called\r\n\r\n    feature.setProperties(object, true);\r\n\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   */\r\n  readSharedStyle_(node, objectStack) {\r\n    const id = node.getAttribute('id');\r\n    if (id !== null) {\r\n      const style = readStyle.call(this, node, objectStack);\r\n      if (style) {\r\n        let styleUri;\r\n        let baseURI = node.baseURI;\r\n        if (!baseURI || baseURI == 'about:blank') {\r\n          baseURI = window.location.href;\r\n        }\r\n        if (baseURI) {\r\n          const url = new URL('#' + id, baseURI);\r\n          styleUri = url.href;\r\n        } else {\r\n          styleUri = '#' + id;\r\n        }\r\n        this.sharedStyles_[styleUri] = style;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   */\r\n  readSharedStyleMap_(node, objectStack) {\r\n    const id = node.getAttribute('id');\r\n    if (id === null) {\r\n      return;\r\n    }\r\n    const styleMapValue = readStyleMapValue.call(this, node, objectStack);\r\n    if (!styleMapValue) {\r\n      return;\r\n    }\r\n    let styleUri;\r\n    let baseURI = node.baseURI;\r\n    if (!baseURI || baseURI == 'about:blank') {\r\n      baseURI = window.location.href;\r\n    }\r\n    if (baseURI) {\r\n      const url = new URL('#' + id, baseURI);\r\n      styleUri = url.href;\r\n    } else {\r\n      styleUri = '#' + id;\r\n    }\r\n    this.sharedStyles_[styleUri] = styleMapValue;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return null;\r\n    }\r\n    const feature = this.readPlacemark_(node, [\r\n      this.getReadOptions(node, options),\r\n    ]);\r\n    if (feature) {\r\n      return feature;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return [];\r\n    }\r\n    let features;\r\n    const localName = node.localName;\r\n    if (localName == 'Document' || localName == 'Folder') {\r\n      features = this.readDocumentOrFolder_(node, [\r\n        this.getReadOptions(node, options),\r\n      ]);\r\n      if (features) {\r\n        return features;\r\n      }\r\n      return [];\r\n    }\r\n    if (localName == 'Placemark') {\r\n      const feature = this.readPlacemark_(node, [\r\n        this.getReadOptions(node, options),\r\n      ]);\r\n      if (feature) {\r\n        return [feature];\r\n      }\r\n      return [];\r\n    }\r\n    if (localName == 'kml') {\r\n      features = [];\r\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n        const fs = this.readFeaturesFromNode(n, options);\r\n        if (fs) {\r\n          extend(features, fs);\r\n        }\r\n      }\r\n      return features;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Read the name of the KML.\r\n   *\r\n   * @param {Document|Element|string} source Source.\r\n   * @return {string|undefined} Name.\r\n   * @api\r\n   */\r\n  readName(source) {\r\n    if (!source) {\r\n      return undefined;\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readNameFromDocument(doc);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readNameFromDocument(/** @type {Document} */ (source));\r\n    }\r\n    return this.readNameFromNode(/** @type {Element} */ (source));\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {string|undefined} Name.\r\n   */\r\n  readNameFromDocument(doc) {\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        const name = this.readNameFromNode(/** @type {Element} */ (n));\r\n        if (name) {\r\n          return name;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {string|undefined} Name.\r\n   */\r\n  readNameFromNode(node) {\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'name') {\r\n        return readString(n);\r\n      }\r\n    }\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      const localName = n.localName;\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        (localName == 'Document' ||\r\n          localName == 'Folder' ||\r\n          localName == 'Placemark' ||\r\n          localName == 'kml')\r\n      ) {\r\n        const name = this.readNameFromNode(n);\r\n        if (name) {\r\n          return name;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Read the network links of the KML.\r\n   *\r\n   * @param {Document|Element|string} source Source.\r\n   * @return {Array<Object>} Network links.\r\n   * @api\r\n   */\r\n  readNetworkLinks(source) {\r\n    const networkLinks = [];\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      extend(networkLinks, this.readNetworkLinksFromDocument(doc));\r\n    } else if (isDocument(source)) {\r\n      extend(\r\n        networkLinks,\r\n        this.readNetworkLinksFromDocument(/** @type {Document} */ (source))\r\n      );\r\n    } else {\r\n      extend(\r\n        networkLinks,\r\n        this.readNetworkLinksFromNode(/** @type {Element} */ (source))\r\n      );\r\n    }\r\n    return networkLinks;\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {Array<Object>} Network links.\r\n   */\r\n  readNetworkLinksFromDocument(doc) {\r\n    const networkLinks = [];\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        extend(\r\n          networkLinks,\r\n          this.readNetworkLinksFromNode(/** @type {Element} */ (n))\r\n        );\r\n      }\r\n    }\r\n    return networkLinks;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Array<Object>} Network links.\r\n   */\r\n  readNetworkLinksFromNode(node) {\r\n    const networkLinks = [];\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        n.localName == 'NetworkLink'\r\n      ) {\r\n        const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);\r\n        networkLinks.push(obj);\r\n      }\r\n    }\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      const localName = n.localName;\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\r\n      ) {\r\n        extend(networkLinks, this.readNetworkLinksFromNode(n));\r\n      }\r\n    }\r\n    return networkLinks;\r\n  }\r\n\r\n  /**\r\n   * Read the regions of the KML.\r\n   *\r\n   * @param {Document|Element|string} source Source.\r\n   * @return {Array<Object>} Regions.\r\n   * @api\r\n   */\r\n  readRegion(source) {\r\n    const regions = [];\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      extend(regions, this.readRegionFromDocument(doc));\r\n    } else if (isDocument(source)) {\r\n      extend(\r\n        regions,\r\n        this.readRegionFromDocument(/** @type {Document} */ (source))\r\n      );\r\n    } else {\r\n      extend(regions, this.readRegionFromNode(/** @type {Element} */ (source)));\r\n    }\r\n    return regions;\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {Array<Object>} Region.\r\n   */\r\n  readRegionFromDocument(doc) {\r\n    const regions = [];\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        extend(regions, this.readRegionFromNode(/** @type {Element} */ (n)));\r\n      }\r\n    }\r\n    return regions;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Array<Object>} Region.\r\n   * @api\r\n   */\r\n  readRegionFromNode(node) {\r\n    const regions = [];\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'Region') {\r\n        const obj = pushParseAndPop({}, REGION_PARSERS, n, []);\r\n        regions.push(obj);\r\n      }\r\n    }\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      const localName = n.localName;\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\r\n      ) {\r\n        extend(regions, this.readRegionFromNode(n));\r\n      }\r\n    }\r\n    return regions;\r\n  }\r\n\r\n  /**\r\n   * @typedef {Object} KMLCamera Specifies the observer's viewpoint and associated view parameters.\r\n   * @property {number} [Latitude] Latitude of the camera.\r\n   * @property {number} [Longitude] Longitude of the camera.\r\n   * @property {number} [Altitude] Altitude of the camera.\r\n   * @property {string} [AltitudeMode] Floor-related altitude mode.\r\n   * @property {number} [Heading] Horizontal camera rotation.\r\n   * @property {number} [Tilt] Lateral camera rotation.\r\n   * @property {number} [Roll] Vertical camera rotation.\r\n   */\r\n\r\n  /**\r\n   * Read the cameras of the KML.\r\n   *\r\n   * @param {Document|Element|string} source Source.\r\n   * @return {Array<KMLCamera>} Cameras.\r\n   * @api\r\n   */\r\n  readCamera(source) {\r\n    const cameras = [];\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      extend(cameras, this.readCameraFromDocument(doc));\r\n    } else if (isDocument(source)) {\r\n      extend(\r\n        cameras,\r\n        this.readCameraFromDocument(/** @type {Document} */ (source))\r\n      );\r\n    } else {\r\n      extend(cameras, this.readCameraFromNode(/** @type {Element} */ (source)));\r\n    }\r\n    return cameras;\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {Array<KMLCamera>} Cameras.\r\n   */\r\n  readCameraFromDocument(doc) {\r\n    const cameras = [];\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType === Node.ELEMENT_NODE) {\r\n        extend(cameras, this.readCameraFromNode(/** @type {Element} */ (n)));\r\n      }\r\n    }\r\n    return cameras;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Array<KMLCamera>} Cameras.\r\n   * @api\r\n   */\r\n  readCameraFromNode(node) {\r\n    const cameras = [];\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName === 'Camera') {\r\n        const obj = pushParseAndPop({}, CAMERA_PARSERS, n, []);\r\n        cameras.push(obj);\r\n      }\r\n    }\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      const localName = n.localName;\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        (localName === 'Document' ||\r\n          localName === 'Folder' ||\r\n          localName === 'Placemark' ||\r\n          localName === 'kml')\r\n      ) {\r\n        extend(cameras, this.readCameraFromNode(n));\r\n      }\r\n    }\r\n    return cameras;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in the KML format as an XML node. GeometryCollections,\r\n   * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.\r\n   *\r\n   * @param {Array<Feature>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   * @api\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const kml = createElementNS(NAMESPACE_URIS[4], 'kml');\r\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\r\n    kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);\r\n    kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\r\n    kml.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      SCHEMA_LOCATION\r\n    );\r\n\r\n    const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {\r\n        node: kml,\r\n      };\r\n    /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */\r\n    const properties = {};\r\n    if (features.length > 1) {\r\n      properties['Document'] = features;\r\n    } else if (features.length == 1) {\r\n      properties['Placemark'] = features[0];\r\n    }\r\n    const orderedKeys = KML_SEQUENCE[kml.namespaceURI];\r\n    const values = makeSequence(properties, orderedKeys);\r\n    pushSerializeAndPop(\r\n      context,\r\n      KML_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      values,\r\n      [options],\r\n      orderedKeys,\r\n      this\r\n    );\r\n    return kml;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Style|undefined} foundStyle Style.\r\n * @param {string} name Name.\r\n * @return {Style} style Style.\r\n */\r\nfunction createNameStyleFunction(foundStyle, name) {\r\n  const textOffset = [0, 0];\r\n  /** @type {CanvasTextAlign} */\r\n  let textAlign = 'start';\r\n  const imageStyle = foundStyle.getImage();\r\n  if (imageStyle) {\r\n    const imageSize = imageStyle.getSize();\r\n    if (imageSize && imageSize.length == 2) {\r\n      const imageScale = imageStyle.getScaleArray();\r\n      const anchor = imageStyle.getAnchor();\r\n      // Offset the label to be centered to the right of the icon,\r\n      // if there is one.\r\n      textOffset[0] = imageScale[0] * (imageSize[0] - anchor[0]);\r\n      textOffset[1] = imageScale[1] * (imageSize[1] / 2 - anchor[1]);\r\n      textAlign = 'left';\r\n    }\r\n  }\r\n  let textStyle = foundStyle.getText();\r\n  if (textStyle) {\r\n    // clone the text style, customizing it with name, alignments and offset.\r\n    // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).\r\n    textStyle = textStyle.clone();\r\n    textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());\r\n    textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());\r\n    textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());\r\n    textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);\r\n  } else {\r\n    textStyle = DEFAULT_TEXT_STYLE.clone();\r\n  }\r\n  textStyle.setText(name);\r\n  textStyle.setOffsetX(textOffset[0]);\r\n  textStyle.setOffsetY(textOffset[1]);\r\n  textStyle.setTextAlign(textAlign);\r\n\r\n  const nameStyle = new Style({\r\n    image: imageStyle,\r\n    text: textStyle,\r\n  });\r\n  return nameStyle;\r\n}\r\n\r\n/**\r\n * @param {Array<Style>|undefined} style Style.\r\n * @param {string} styleUrl Style URL.\r\n * @param {Array<Style>} defaultStyle Default style.\r\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.\r\n * @param {boolean|undefined} showPointNames true to show names for point placemarks.\r\n * @return {import(\"../style/Style.js\").StyleFunction} Feature style function.\r\n */\r\nfunction createFeatureStyleFunction(\r\n  style,\r\n  styleUrl,\r\n  defaultStyle,\r\n  sharedStyles,\r\n  showPointNames\r\n) {\r\n  return (\r\n    /**\r\n     * @param {Feature} feature feature.\r\n     * @param {number} resolution Resolution.\r\n     * @return {Array<Style>|Style} Style.\r\n     */\r\n    function (feature, resolution) {\r\n      let drawName = showPointNames;\r\n      let name = '';\r\n      let multiGeometryPoints = [];\r\n      if (drawName) {\r\n        const geometry = feature.getGeometry();\r\n        if (geometry) {\r\n          if (geometry instanceof GeometryCollection) {\r\n            multiGeometryPoints = geometry\r\n              .getGeometriesArrayRecursive()\r\n              .filter(function (geometry) {\r\n                const type = geometry.getType();\r\n                return type === 'Point' || type === 'MultiPoint';\r\n              });\r\n            drawName = multiGeometryPoints.length > 0;\r\n          } else {\r\n            const type = geometry.getType();\r\n            drawName = type === 'Point' || type === 'MultiPoint';\r\n          }\r\n        }\r\n      }\r\n\r\n      if (drawName) {\r\n        name = /** @type {string} */ (feature.get('name'));\r\n        drawName = drawName && !!name;\r\n        // convert any html character codes\r\n        if (drawName && /&[^&]+;/.test(name)) {\r\n          if (!TEXTAREA) {\r\n            TEXTAREA = document.createElement('textarea');\r\n          }\r\n          TEXTAREA.innerHTML = name;\r\n          name = TEXTAREA.value;\r\n        }\r\n      }\r\n\r\n      let featureStyle = defaultStyle;\r\n      if (style) {\r\n        featureStyle = style;\r\n      } else if (styleUrl) {\r\n        featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);\r\n      }\r\n      if (drawName) {\r\n        const nameStyle = createNameStyleFunction(featureStyle[0], name);\r\n        if (multiGeometryPoints.length > 0) {\r\n          // in multigeometries restrict the name style to points and create a\r\n          // style without image or text for geometries requiring fill or stroke\r\n          // including any polygon specific style if there is one\r\n          nameStyle.setGeometry(new GeometryCollection(multiGeometryPoints));\r\n          const baseStyle = new Style({\r\n            geometry: featureStyle[0].getGeometry(),\r\n            image: null,\r\n            fill: featureStyle[0].getFill(),\r\n            stroke: featureStyle[0].getStroke(),\r\n            text: null,\r\n          });\r\n          return [nameStyle, baseStyle].concat(featureStyle.slice(1));\r\n        }\r\n        return nameStyle;\r\n      }\r\n      return featureStyle;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<Style>|string|undefined} styleValue Style value.\r\n * @param {Array<Style>} defaultStyle Default style.\r\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles\r\n * Shared styles.\r\n * @return {Array<Style>} Style.\r\n */\r\nfunction findStyle(styleValue, defaultStyle, sharedStyles) {\r\n  if (Array.isArray(styleValue)) {\r\n    return styleValue;\r\n  }\r\n  if (typeof styleValue === 'string') {\r\n    return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);\r\n  }\r\n  return defaultStyle;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {import(\"../color.js\").Color|undefined} Color.\r\n */\r\nfunction readColor(node) {\r\n  const s = getAllTextContent(node, false);\r\n  // The KML specification states that colors should not include a leading `#`\r\n  // but we tolerate them.\r\n  const m = /^\\s*#?\\s*([0-9A-Fa-f]{8})\\s*$/.exec(s);\r\n  if (m) {\r\n    const hexColor = m[1];\r\n    return [\r\n      parseInt(hexColor.substr(6, 2), 16),\r\n      parseInt(hexColor.substr(4, 2), 16),\r\n      parseInt(hexColor.substr(2, 2), 16),\r\n      parseInt(hexColor.substr(0, 2), 16) / 255,\r\n    ];\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {Array<number>|undefined} Flat coordinates.\r\n */\r\nexport function readFlatCoordinates(node) {\r\n  let s = getAllTextContent(node, false);\r\n  const flatCoordinates = [];\r\n  // The KML specification states that coordinate tuples should not include\r\n  // spaces, but we tolerate them.\r\n  s = s.replace(/\\s*,\\s*/g, ',');\r\n  const re =\r\n    /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?),([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|,|$)(?:([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|$))?\\s*/i;\r\n  let m;\r\n  while ((m = re.exec(s))) {\r\n    const x = parseFloat(m[1]);\r\n    const y = parseFloat(m[2]);\r\n    const z = m[3] ? parseFloat(m[3]) : 0;\r\n    flatCoordinates.push(x, y, z);\r\n    s = s.substr(m[0].length);\r\n  }\r\n  if (s !== '') {\r\n    return undefined;\r\n  }\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {string} URI.\r\n */\r\nfunction readURI(node) {\r\n  const s = getAllTextContent(node, false).trim();\r\n  let baseURI = node.baseURI;\r\n  if (!baseURI || baseURI == 'about:blank') {\r\n    baseURI = window.location.href;\r\n  }\r\n  if (baseURI) {\r\n    const url = new URL(s, baseURI);\r\n    return url.href;\r\n  }\r\n  return s;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {string} URI.\r\n */\r\nfunction readStyleURL(node) {\r\n  // KML files in the wild occasionally forget the leading\r\n  // `#` on styleUrlsdefined in the same document.\r\n  const s = getAllTextContent(node, false)\r\n    .trim()\r\n    .replace(/^(?!.*#)/, '#');\r\n  let baseURI = node.baseURI;\r\n  if (!baseURI || baseURI == 'about:blank') {\r\n    baseURI = window.location.href;\r\n  }\r\n  if (baseURI) {\r\n    const url = new URL(s, baseURI);\r\n    return url.href;\r\n  }\r\n  return s;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @return {Vec2} Vec2.\r\n */\r\nfunction readVec2(node) {\r\n  const xunits = node.getAttribute('xunits');\r\n  const yunits = node.getAttribute('yunits');\r\n  /** @type {import('../style/Icon.js').IconOrigin} */\r\n  let origin;\r\n  if (xunits !== 'insetPixels') {\r\n    if (yunits !== 'insetPixels') {\r\n      origin = 'bottom-left';\r\n    } else {\r\n      origin = 'top-left';\r\n    }\r\n  } else {\r\n    if (yunits !== 'insetPixels') {\r\n      origin = 'bottom-right';\r\n    } else {\r\n      origin = 'top-right';\r\n    }\r\n  }\r\n  return {\r\n    x: parseFloat(node.getAttribute('x')),\r\n    xunits: ICON_ANCHOR_UNITS_MAP[xunits],\r\n    y: parseFloat(node.getAttribute('y')),\r\n    yunits: ICON_ANCHOR_UNITS_MAP[yunits],\r\n    origin: origin,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} Scale.\r\n */\r\nfunction readScale(node) {\r\n  return readDecimal(node);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_MAP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Pair': pairDataParser,\r\n});\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<Style>|string|undefined} StyleMap.\r\n */\r\nfunction readStyleMapValue(node, objectStack) {\r\n  return pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Icon': makeObjectPropertySetter(readIcon),\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'heading': makeObjectPropertySetter(readDecimal),\r\n  'hotSpot': makeObjectPropertySetter(readVec2),\r\n  'scale': makeObjectPropertySetter(readScale),\r\n});\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction iconStyleParser(node, objectStack) {\r\n  // FIXME refreshMode\r\n  // FIXME refreshInterval\r\n  // FIXME viewRefreshTime\r\n  // FIXME viewBoundScale\r\n  // FIXME viewFormat\r\n  // FIXME httpQuery\r\n  const object = pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = /** @type {Object} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n  const IconObject = 'Icon' in object ? object['Icon'] : {};\r\n  const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;\r\n  let src;\r\n  const href = /** @type {string|undefined} */ (IconObject['href']);\r\n  if (href) {\r\n    src = href;\r\n  } else if (drawIcon) {\r\n    src = DEFAULT_IMAGE_STYLE_SRC;\r\n  }\r\n  let anchor, anchorXUnits, anchorYUnits;\r\n  /** @type {import('../style/Icon.js').IconOrigin|undefined} */\r\n  let anchorOrigin = 'bottom-left';\r\n  const hotSpot = /** @type {Vec2|undefined} */ (object['hotSpot']);\r\n  if (hotSpot) {\r\n    anchor = [hotSpot.x, hotSpot.y];\r\n    anchorXUnits = hotSpot.xunits;\r\n    anchorYUnits = hotSpot.yunits;\r\n    anchorOrigin = hotSpot.origin;\r\n  } else if (/^https?:\\/\\/maps\\.(?:google|gstatic)\\.com\\//.test(src)) {\r\n    // Google hotspots from https://kml4earth.appspot.com/icons.html#notes\r\n    if (src.includes('pushpin')) {\r\n      anchor = DEFAULT_IMAGE_STYLE_ANCHOR;\r\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n    } else if (src.includes('arrow-reverse')) {\r\n      anchor = [54, 42];\r\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n    } else if (src.includes('paddle')) {\r\n      anchor = [32, 1];\r\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n    }\r\n  }\r\n\r\n  let offset;\r\n  const x = /** @type {number|undefined} */ (IconObject['x']);\r\n  const y = /** @type {number|undefined} */ (IconObject['y']);\r\n  if (x !== undefined && y !== undefined) {\r\n    offset = [x, y];\r\n  }\r\n\r\n  let size;\r\n  const w = /** @type {number|undefined} */ (IconObject['w']);\r\n  const h = /** @type {number|undefined} */ (IconObject['h']);\r\n  if (w !== undefined && h !== undefined) {\r\n    size = [w, h];\r\n  }\r\n\r\n  let rotation;\r\n  const heading = /** @type {number} */ (object['heading']);\r\n  if (heading !== undefined) {\r\n    rotation = toRadians(heading);\r\n  }\r\n\r\n  const scale = /** @type {number|undefined} */ (object['scale']);\r\n\r\n  const color = /** @type {Array<number>|undefined} */ (object['color']);\r\n\r\n  if (drawIcon) {\r\n    if (src == DEFAULT_IMAGE_STYLE_SRC) {\r\n      size = DEFAULT_IMAGE_STYLE_SIZE;\r\n    }\r\n\r\n    const imageStyle = new Icon({\r\n      anchor: anchor,\r\n      anchorOrigin: anchorOrigin,\r\n      anchorXUnits: anchorXUnits,\r\n      anchorYUnits: anchorYUnits,\r\n      crossOrigin: this.crossOrigin_,\r\n      offset: offset,\r\n      offsetOrigin: 'bottom-left',\r\n      rotation: rotation,\r\n      scale: scale,\r\n      size: size,\r\n      src: this.iconUrlFunction_(src),\r\n      color: color,\r\n    });\r\n\r\n    const imageScale = imageStyle.getScaleArray()[0];\r\n    const imageSize = imageStyle.getSize();\r\n    if (imageSize === null) {\r\n      const imageState = imageStyle.getImageState();\r\n      if (imageState === ImageState.IDLE || imageState === ImageState.LOADING) {\r\n        const listener = function () {\r\n          const imageState = imageStyle.getImageState();\r\n          if (\r\n            !(\r\n              imageState === ImageState.IDLE ||\r\n              imageState === ImageState.LOADING\r\n            )\r\n          ) {\r\n            const imageSize = imageStyle.getSize();\r\n            if (imageSize && imageSize.length == 2) {\r\n              const resizeScale = scaleForSize(imageSize);\r\n              imageStyle.setScale(imageScale * resizeScale);\r\n            }\r\n            imageStyle.unlistenImageChange(listener);\r\n          }\r\n        };\r\n        imageStyle.listenImageChange(listener);\r\n        if (imageState === ImageState.IDLE) {\r\n          imageStyle.load();\r\n        }\r\n      }\r\n    } else if (imageSize.length == 2) {\r\n      const resizeScale = scaleForSize(imageSize);\r\n      imageStyle.setScale(imageScale * resizeScale);\r\n    }\r\n    styleObject['imageStyle'] = imageStyle;\r\n  } else {\r\n    // handle the case when we explicitly want to draw no icon.\r\n    styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LABEL_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'scale': makeObjectPropertySetter(readScale),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction labelStyleParser(node, objectStack) {\r\n  // FIXME colorMode\r\n  const object = pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = objectStack[objectStack.length - 1];\r\n  const textStyle = new Text({\r\n    fill: new Fill({\r\n      color:\r\n        /** @type {import(\"../color.js\").Color} */\r\n        ('color' in object ? object['color'] : DEFAULT_COLOR),\r\n    }),\r\n    scale: /** @type {number|undefined} */ (object['scale']),\r\n  });\r\n  styleObject['textStyle'] = textStyle;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LINE_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'width': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction lineStyleParser(node, objectStack) {\r\n  // FIXME colorMode\r\n  // FIXME gx:outerColor\r\n  // FIXME gx:outerWidth\r\n  // FIXME gx:physicalWidth\r\n  // FIXME gx:labelVisibility\r\n  const object = pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = objectStack[objectStack.length - 1];\r\n  const strokeStyle = new Stroke({\r\n    color:\r\n      /** @type {import(\"../color.js\").Color} */\r\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\r\n    width: /** @type {number} */ ('width' in object ? object['width'] : 1),\r\n  });\r\n  styleObject['strokeStyle'] = strokeStyle;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst POLY_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'fill': makeObjectPropertySetter(readBoolean),\r\n  'outline': makeObjectPropertySetter(readBoolean),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction polyStyleParser(node, objectStack) {\r\n  // FIXME colorMode\r\n  const object = pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = objectStack[objectStack.length - 1];\r\n  const fillStyle = new Fill({\r\n    color:\r\n      /** @type {import(\"../color.js\").Color} */\r\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\r\n  });\r\n  styleObject['fillStyle'] = fillStyle;\r\n  const fill = /** @type {boolean|undefined} */ (object['fill']);\r\n  if (fill !== undefined) {\r\n    styleObject['fill'] = fill;\r\n  }\r\n  const outline = /** @type {boolean|undefined} */ (object['outline']);\r\n  if (outline !== undefined) {\r\n    styleObject['outline'] = outline;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst FLAT_LINEAR_RING_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'coordinates': makeReplacer(readFlatCoordinates),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<number>} LinearRing flat coordinates.\r\n */\r\nfunction readFlatLinearRing(node, objectStack) {\r\n  return pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction gxCoordParser(node, objectStack) {\r\n  const gxTrackObject =\r\n    /** @type {GxTrackObject} */\r\n    (objectStack[objectStack.length - 1]);\r\n  const coordinates = gxTrackObject.coordinates;\r\n  const s = getAllTextContent(node, false);\r\n  const re =\r\n    /^\\s*([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s*$/i;\r\n  const m = re.exec(s);\r\n  if (m) {\r\n    const x = parseFloat(m[1]);\r\n    const y = parseFloat(m[2]);\r\n    const z = parseFloat(m[3]);\r\n    coordinates.push([x, y, z]);\r\n  } else {\r\n    coordinates.push([]);\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(GX_NAMESPACE_URIS, {\r\n  'Track': makeArrayPusher(readGxTrack),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {MultiLineString|undefined} MultiLineString.\r\n */\r\nfunction readGxMultiTrack(node, objectStack) {\r\n  const lineStrings = pushParseAndPop(\r\n    [],\r\n    GX_MULTITRACK_GEOMETRY_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!lineStrings) {\r\n    return undefined;\r\n  }\r\n  return new MultiLineString(lineStrings);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GX_TRACK_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'when': whenParser,\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'coord': gxCoordParser,\r\n  })\r\n);\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {LineString|undefined} LineString.\r\n */\r\nfunction readGxTrack(node, objectStack) {\r\n  const gxTrackObject = pushParseAndPop(\r\n    /** @type {GxTrackObject} */ ({\r\n      coordinates: [],\r\n      whens: [],\r\n    }),\r\n    GX_TRACK_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!gxTrackObject) {\r\n    return undefined;\r\n  }\r\n  const flatCoordinates = [];\r\n  const coordinates = gxTrackObject.coordinates;\r\n  const whens = gxTrackObject.whens;\r\n  for (\r\n    let i = 0, ii = Math.min(coordinates.length, whens.length);\r\n    i < ii;\r\n    ++i\r\n  ) {\r\n    if (coordinates[i].length == 3) {\r\n      flatCoordinates.push(\r\n        coordinates[i][0],\r\n        coordinates[i][1],\r\n        coordinates[i][2],\r\n        whens[i]\r\n      );\r\n    }\r\n  }\r\n  return new LineString(flatCoordinates, 'XYZM');\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'href': makeObjectPropertySetter(readURI),\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'x': makeObjectPropertySetter(readDecimal),\r\n    'y': makeObjectPropertySetter(readDecimal),\r\n    'w': makeObjectPropertySetter(readDecimal),\r\n    'h': makeObjectPropertySetter(readDecimal),\r\n  })\r\n);\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object} Icon object.\r\n */\r\nfunction readIcon(node, objectStack) {\r\n  const iconObject = pushParseAndPop({}, ICON_PARSERS, node, objectStack);\r\n  if (iconObject) {\r\n    return iconObject;\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'coordinates': makeReplacer(readFlatCoordinates),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nfunction readFlatCoordinatesFromNode(node, objectStack) {\r\n  return pushParseAndPop(\r\n    null,\r\n    GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'extrude': makeObjectPropertySetter(readBoolean),\r\n  'tessellate': makeObjectPropertySetter(readBoolean),\r\n  'altitudeMode': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {LineString|undefined} LineString.\r\n */\r\nfunction readLineString(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    {},\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\r\n  if (flatCoordinates) {\r\n    const lineString = new LineString(flatCoordinates, 'XYZ');\r\n    lineString.setProperties(properties, true);\r\n    return lineString;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Polygon|undefined} Polygon.\r\n */\r\nfunction readLinearRing(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    {},\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\r\n  if (flatCoordinates) {\r\n    const polygon = new Polygon(flatCoordinates, 'XYZ', [\r\n      flatCoordinates.length,\r\n    ]);\r\n    polygon.setProperties(properties, true);\r\n    return polygon;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst MULTI_GEOMETRY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LineString': makeArrayPusher(readLineString),\r\n  'LinearRing': makeArrayPusher(readLinearRing),\r\n  'MultiGeometry': makeArrayPusher(readMultiGeometry),\r\n  'Point': makeArrayPusher(readPoint),\r\n  'Polygon': makeArrayPusher(readPolygon),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nfunction readMultiGeometry(node, objectStack) {\r\n  const geometries = pushParseAndPop(\r\n    [],\r\n    MULTI_GEOMETRY_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!geometries) {\r\n    return null;\r\n  }\r\n  if (geometries.length === 0) {\r\n    return new GeometryCollection(geometries);\r\n  }\r\n  let multiGeometry;\r\n  let homogeneous = true;\r\n  const type = geometries[0].getType();\r\n  let geometry;\r\n  for (let i = 1, ii = geometries.length; i < ii; ++i) {\r\n    geometry = geometries[i];\r\n    if (geometry.getType() != type) {\r\n      homogeneous = false;\r\n      break;\r\n    }\r\n  }\r\n  if (homogeneous) {\r\n    let layout;\r\n    let flatCoordinates;\r\n    if (type == 'Point') {\r\n      const point = geometries[0];\r\n      layout = point.getLayout();\r\n      flatCoordinates = point.getFlatCoordinates();\r\n      for (let i = 1, ii = geometries.length; i < ii; ++i) {\r\n        geometry = geometries[i];\r\n        extend(flatCoordinates, geometry.getFlatCoordinates());\r\n      }\r\n      multiGeometry = new MultiPoint(flatCoordinates, layout);\r\n      setCommonGeometryProperties(multiGeometry, geometries);\r\n    } else if (type == 'LineString') {\r\n      multiGeometry = new MultiLineString(geometries);\r\n      setCommonGeometryProperties(multiGeometry, geometries);\r\n    } else if (type == 'Polygon') {\r\n      multiGeometry = new MultiPolygon(geometries);\r\n      setCommonGeometryProperties(multiGeometry, geometries);\r\n    } else if (type == 'GeometryCollection') {\r\n      multiGeometry = new GeometryCollection(geometries);\r\n    } else {\r\n      throw new Error('Unknown geometry type found');\r\n    }\r\n  } else {\r\n    multiGeometry = new GeometryCollection(geometries);\r\n  }\r\n  return /** @type {import(\"../geom/Geometry.js\").default} */ (multiGeometry);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Point|undefined} Point.\r\n */\r\nfunction readPoint(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    {},\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\r\n  if (flatCoordinates) {\r\n    const point = new Point(flatCoordinates, 'XYZ');\r\n    point.setProperties(properties, true);\r\n    return point;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'innerBoundaryIs': innerBoundaryIsParser,\r\n  'outerBoundaryIs': outerBoundaryIsParser,\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Polygon|undefined} Polygon.\r\n */\r\nfunction readPolygon(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    /** @type {Object<string,*>} */ ({}),\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatLinearRings = pushParseAndPop(\r\n    [null],\r\n    FLAT_LINEAR_RINGS_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (flatLinearRings && flatLinearRings[0]) {\r\n    const flatCoordinates = flatLinearRings[0];\r\n    const ends = [flatCoordinates.length];\r\n    for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {\r\n      extend(flatCoordinates, flatLinearRings[i]);\r\n      ends.push(flatCoordinates.length);\r\n    }\r\n    const polygon = new Polygon(flatCoordinates, 'XYZ', ends);\r\n    polygon.setProperties(properties, true);\r\n    return polygon;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'IconStyle': iconStyleParser,\r\n  'LabelStyle': labelStyleParser,\r\n  'LineStyle': lineStyleParser,\r\n  'PolyStyle': polyStyleParser,\r\n});\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<Style>} Style.\r\n */\r\nfunction readStyle(node, objectStack) {\r\n  const styleObject = pushParseAndPop(\r\n    {},\r\n    STYLE_PARSERS,\r\n    node,\r\n    objectStack,\r\n    this\r\n  );\r\n  if (!styleObject) {\r\n    return null;\r\n  }\r\n  let fillStyle =\r\n    /** @type {Fill} */\r\n    (\r\n      'fillStyle' in styleObject ? styleObject['fillStyle'] : DEFAULT_FILL_STYLE\r\n    );\r\n  const fill = /** @type {boolean|undefined} */ (styleObject['fill']);\r\n  if (fill !== undefined && !fill) {\r\n    fillStyle = null;\r\n  }\r\n  let imageStyle;\r\n  if ('imageStyle' in styleObject) {\r\n    if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {\r\n      imageStyle = /** @type {import(\"../style/Image.js\").default} */ (\r\n        styleObject['imageStyle']\r\n      );\r\n    }\r\n  } else {\r\n    imageStyle = DEFAULT_IMAGE_STYLE;\r\n  }\r\n  const textStyle =\r\n    /** @type {Text} */\r\n    (\r\n      'textStyle' in styleObject ? styleObject['textStyle'] : DEFAULT_TEXT_STYLE\r\n    );\r\n  const strokeStyle =\r\n    /** @type {Stroke} */\r\n    (\r\n      'strokeStyle' in styleObject\r\n        ? styleObject['strokeStyle']\r\n        : DEFAULT_STROKE_STYLE\r\n    );\r\n  const outline = /** @type {boolean|undefined} */ (styleObject['outline']);\r\n  if (outline !== undefined && !outline) {\r\n    // if the polystyle specifies no outline two styles are needed,\r\n    // one for non-polygon geometries where linestrings require a stroke\r\n    // and one for polygons where there should be no stroke\r\n    return [\r\n      new Style({\r\n        geometry: function (feature) {\r\n          const geometry = feature.getGeometry();\r\n          const type = geometry.getType();\r\n          if (type === 'GeometryCollection') {\r\n            const collection =\r\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\r\n                geometry\r\n              );\r\n            return new GeometryCollection(\r\n              collection\r\n                .getGeometriesArrayRecursive()\r\n                .filter(function (geometry) {\r\n                  const type = geometry.getType();\r\n                  return type !== 'Polygon' && type !== 'MultiPolygon';\r\n                })\r\n            );\r\n          }\r\n          if (type !== 'Polygon' && type !== 'MultiPolygon') {\r\n            return geometry;\r\n          }\r\n        },\r\n        fill: fillStyle,\r\n        image: imageStyle,\r\n        stroke: strokeStyle,\r\n        text: textStyle,\r\n        zIndex: undefined, // FIXME\r\n      }),\r\n      new Style({\r\n        geometry: function (feature) {\r\n          const geometry = feature.getGeometry();\r\n          const type = geometry.getType();\r\n          if (type === 'GeometryCollection') {\r\n            const collection =\r\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\r\n                geometry\r\n              );\r\n            return new GeometryCollection(\r\n              collection\r\n                .getGeometriesArrayRecursive()\r\n                .filter(function (geometry) {\r\n                  const type = geometry.getType();\r\n                  return type === 'Polygon' || type === 'MultiPolygon';\r\n                })\r\n            );\r\n          }\r\n          if (type === 'Polygon' || type === 'MultiPolygon') {\r\n            return geometry;\r\n          }\r\n        },\r\n        fill: fillStyle,\r\n        stroke: null,\r\n        zIndex: undefined, // FIXME\r\n      }),\r\n    ];\r\n  }\r\n  return [\r\n    new Style({\r\n      fill: fillStyle,\r\n      image: imageStyle,\r\n      stroke: strokeStyle,\r\n      text: textStyle,\r\n      zIndex: undefined, // FIXME\r\n    }),\r\n  ];\r\n}\r\n\r\n/**\r\n * Reads an array of geometries and creates arrays for common geometry\r\n * properties. Then sets them to the multi geometry.\r\n * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.\r\n * @param {Array<import(\"../geom/Geometry.js\").default>} geometries List of geometries.\r\n */\r\nfunction setCommonGeometryProperties(multiGeometry, geometries) {\r\n  const ii = geometries.length;\r\n  const extrudes = new Array(geometries.length);\r\n  const tessellates = new Array(geometries.length);\r\n  const altitudeModes = new Array(geometries.length);\r\n  let hasExtrude, hasTessellate, hasAltitudeMode;\r\n  hasExtrude = false;\r\n  hasTessellate = false;\r\n  hasAltitudeMode = false;\r\n  for (let i = 0; i < ii; ++i) {\r\n    const geometry = geometries[i];\r\n    extrudes[i] = geometry.get('extrude');\r\n    tessellates[i] = geometry.get('tessellate');\r\n    altitudeModes[i] = geometry.get('altitudeMode');\r\n    hasExtrude = hasExtrude || extrudes[i] !== undefined;\r\n    hasTessellate = hasTessellate || tessellates[i] !== undefined;\r\n    hasAltitudeMode = hasAltitudeMode || altitudeModes[i];\r\n  }\r\n  if (hasExtrude) {\r\n    multiGeometry.set('extrude', extrudes);\r\n  }\r\n  if (hasTessellate) {\r\n    multiGeometry.set('tessellate', tessellates);\r\n  }\r\n  if (hasAltitudeMode) {\r\n    multiGeometry.set('altitudeMode', altitudeModes);\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'displayName': makeObjectPropertySetter(readString),\r\n  'value': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction dataParser(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  parseNode(DATA_PARSERS, node, objectStack);\r\n  const featureObject = /** @type {Object} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n  if (name && featureObject.displayName) {\r\n    featureObject[name] = {\r\n      value: featureObject.value,\r\n      displayName: featureObject.displayName,\r\n      toString: function () {\r\n        return featureObject.value;\r\n      },\r\n    };\r\n  } else if (name !== null) {\r\n    featureObject[name] = featureObject.value;\r\n  } else if (featureObject.displayName !== null) {\r\n    featureObject[featureObject.displayName] = featureObject.value;\r\n  }\r\n  delete featureObject['value'];\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EXTENDED_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Data': dataParser,\r\n  'SchemaData': schemaDataParser,\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction extendedDataParser(node, objectStack) {\r\n  parseNode(EXTENDED_DATA_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction regionParser(node, objectStack) {\r\n  parseNode(REGION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PAIR_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Style': makeObjectPropertySetter(readStyle),\r\n  'key': makeObjectPropertySetter(readString),\r\n  'styleUrl': makeObjectPropertySetter(readStyleURL),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction pairDataParser(node, objectStack) {\r\n  const pairObject = pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);\r\n  if (!pairObject) {\r\n    return;\r\n  }\r\n  const key = /** @type {string|undefined} */ (pairObject['key']);\r\n  if (key && key == 'normal') {\r\n    const styleUrl = /** @type {string|undefined} */ (pairObject['styleUrl']);\r\n    if (styleUrl) {\r\n      objectStack[objectStack.length - 1] = styleUrl;\r\n    }\r\n    const style = /** @type {Style} */ (pairObject['Style']);\r\n    if (style) {\r\n      objectStack[objectStack.length - 1] = style;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction placemarkStyleMapParser(node, objectStack) {\r\n  const styleMapValue = readStyleMapValue.call(this, node, objectStack);\r\n  if (!styleMapValue) {\r\n    return;\r\n  }\r\n  const placemarkObject = objectStack[objectStack.length - 1];\r\n  if (Array.isArray(styleMapValue)) {\r\n    placemarkObject['Style'] = styleMapValue;\r\n  } else if (typeof styleMapValue === 'string') {\r\n    placemarkObject['styleUrl'] = styleMapValue;\r\n  } else {\r\n    throw new Error('`styleMapValue` has an unknown type');\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SCHEMA_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'SimpleData': simpleDataParser,\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction schemaDataParser(node, objectStack) {\r\n  parseNode(SCHEMA_DATA_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction simpleDataParser(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  if (name !== null) {\r\n    const data = readString(node);\r\n    const featureObject = /** @type {Object} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    featureObject[name] = data;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LAT_LON_ALT_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'altitudeMode': makeObjectPropertySetter(readString),\r\n  'minAltitude': makeObjectPropertySetter(readDecimal),\r\n  'maxAltitude': makeObjectPropertySetter(readDecimal),\r\n  'north': makeObjectPropertySetter(readDecimal),\r\n  'south': makeObjectPropertySetter(readDecimal),\r\n  'east': makeObjectPropertySetter(readDecimal),\r\n  'west': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction latLonAltBoxParser(node, objectStack) {\r\n  const object = pushParseAndPop(\r\n    {},\r\n    LAT_LON_ALT_BOX_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const regionObject = /** @type {Object} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n  const extent = [\r\n    parseFloat(object['west']),\r\n    parseFloat(object['south']),\r\n    parseFloat(object['east']),\r\n    parseFloat(object['north']),\r\n  ];\r\n  regionObject['extent'] = extent;\r\n  regionObject['altitudeMode'] = object['altitudeMode'];\r\n  regionObject['minAltitude'] = parseFloat(object['minAltitude']);\r\n  regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'minLodPixels': makeObjectPropertySetter(readDecimal),\r\n  'maxLodPixels': makeObjectPropertySetter(readDecimal),\r\n  'minFadeExtent': makeObjectPropertySetter(readDecimal),\r\n  'maxFadeExtent': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction lodParser(node, objectStack) {\r\n  const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);\r\n  lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);\r\n  lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);\r\n  lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst INNER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  // KML spec only allows one LinearRing  per innerBoundaryIs, but Google Earth\r\n  // allows multiple, so we parse multiple here too.\r\n  'LinearRing': makeArrayPusher(readFlatLinearRing),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction innerBoundaryIsParser(node, objectStack) {\r\n  const innerBoundaryFlatLinearRings = pushParseAndPop(\r\n    /** @type {Array<Array<number>>} */ ([]),\r\n    INNER_BOUNDARY_IS_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (innerBoundaryFlatLinearRings.length > 0) {\r\n    const flatLinearRings =\r\n      /** @type {Array<Array<number>>} */\r\n      (objectStack[objectStack.length - 1]);\r\n    flatLinearRings.push(...innerBoundaryFlatLinearRings);\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LinearRing': makeReplacer(readFlatLinearRing),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction outerBoundaryIsParser(node, objectStack) {\r\n  /** @type {Array<number>|undefined} */\r\n  const flatLinearRing = pushParseAndPop(\r\n    undefined,\r\n    OUTER_BOUNDARY_IS_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (flatLinearRing) {\r\n    const flatLinearRings =\r\n      /** @type {Array<Array<number>>} */\r\n      (objectStack[objectStack.length - 1]);\r\n    flatLinearRings[0] = flatLinearRing;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction linkParser(node, objectStack) {\r\n  parseNode(LINK_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction whenParser(node, objectStack) {\r\n  const gxTrackObject =\r\n    /** @type {GxTrackObject} */\r\n    (objectStack[objectStack.length - 1]);\r\n  const whens = gxTrackObject.whens;\r\n  const s = getAllTextContent(node, false);\r\n  const when = Date.parse(s);\r\n  whens.push(isNaN(when) ? 0 : when);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the color to.\r\n * @param {import(\"../color.js\").Color|string} color Color.\r\n */\r\nfunction writeColorTextNode(node, color) {\r\n  const rgba = asArray(color);\r\n  const opacity = rgba.length == 4 ? rgba[3] : 1;\r\n  /** @type {Array<string|number>} */\r\n  const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];\r\n  for (let i = 0; i < 4; ++i) {\r\n    const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);\r\n    abgr[i] = hex.length == 1 ? '0' + hex : hex;\r\n  }\r\n  writeStringTextNode(node, abgr.join(''));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the coordinates to.\r\n * @param {Array<number>} coordinates Coordinates.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeCoordinatesTextNode(node, coordinates, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n\r\n  const layout = context['layout'];\r\n  const stride = context['stride'];\r\n\r\n  let dimension;\r\n  if (layout == 'XY' || layout == 'XYM') {\r\n    dimension = 2;\r\n  } else if (layout == 'XYZ' || layout == 'XYZM') {\r\n    dimension = 3;\r\n  } else {\r\n    throw new Error('Invalid geometry layout');\r\n  }\r\n\r\n  const ii = coordinates.length;\r\n  let text = '';\r\n  if (ii > 0) {\r\n    text += coordinates[0];\r\n    for (let d = 1; d < dimension; ++d) {\r\n      text += ',' + coordinates[d];\r\n    }\r\n    for (let i = stride; i < ii; i += stride) {\r\n      text += ' ' + coordinates[i];\r\n      for (let d = 1; d < dimension; ++d) {\r\n        text += ',' + coordinates[i + d];\r\n      }\r\n    }\r\n  }\r\n  writeStringTextNode(node, text);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Data': makeChildAppender(writeDataNode),\r\n  'value': makeChildAppender(writeDataNodeValue),\r\n  'displayName': makeChildAppender(writeDataNodeName),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {{name: *, value: *}} pair Name value pair.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeDataNode(node, pair, objectStack) {\r\n  node.setAttribute('name', pair.name);\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const value = pair.value;\r\n\r\n  if (typeof value == 'object') {\r\n    if (value !== null && value.displayName) {\r\n      pushSerializeAndPop(\r\n        context,\r\n        EXTENDEDDATA_NODE_SERIALIZERS,\r\n        OBJECT_PROPERTY_NODE_FACTORY,\r\n        [value.displayName],\r\n        objectStack,\r\n        ['displayName']\r\n      );\r\n    }\r\n\r\n    if (value !== null && value.value) {\r\n      pushSerializeAndPop(\r\n        context,\r\n        EXTENDEDDATA_NODE_SERIALIZERS,\r\n        OBJECT_PROPERTY_NODE_FACTORY,\r\n        [value.value],\r\n        objectStack,\r\n        ['value']\r\n      );\r\n    }\r\n  } else {\r\n    pushSerializeAndPop(\r\n      context,\r\n      EXTENDEDDATA_NODE_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      [value],\r\n      objectStack,\r\n      ['value']\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the name to.\r\n * @param {string} name DisplayName.\r\n */\r\nfunction writeDataNodeName(node, name) {\r\n  writeCDATASection(node, name);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a CDATA Section with the value to.\r\n * @param {string} value Value.\r\n */\r\nfunction writeDataNodeValue(node, value) {\r\n  writeStringTextNode(node, value);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst DOCUMENT_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Placemark': makeChildAppender(writePlacemark),\r\n});\r\n\r\n/**\r\n * @const\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nconst DOCUMENT_NODE_FACTORY = function (value, objectStack, nodeName) {\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  return createElementNS(parentNode.namespaceURI, 'Placemark');\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<Feature>} features Features.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @this {KML}\r\n */\r\nfunction writeDocument(node, features, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  pushSerializeAndPop(\r\n    context,\r\n    DOCUMENT_SERIALIZERS,\r\n    DOCUMENT_NODE_FACTORY,\r\n    features,\r\n    objectStack,\r\n    undefined,\r\n    this\r\n  );\r\n}\r\n\r\n/**\r\n * A factory for creating Data nodes.\r\n * @const\r\n * @type {function(*, Array<*>): (Node|undefined)}\r\n */\r\nconst DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeExtendedData(node, namesAndValues, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const names = namesAndValues.names;\r\n  const values = namesAndValues.values;\r\n  const length = names.length;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    pushSerializeAndPop(\r\n      context,\r\n      EXTENDEDDATA_NODE_SERIALIZERS,\r\n      DATA_NODE_FACTORY,\r\n      [{name: names[i], value: values[i]}],\r\n      objectStack\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_SEQUENCE = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  ['href'],\r\n  makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h'])\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_SERIALIZERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'href': makeChildAppender(writeStringTextNode),\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'x': makeChildAppender(writeDecimalTextNode),\r\n    'y': makeChildAppender(writeDecimalTextNode),\r\n    'w': makeChildAppender(writeDecimalTextNode),\r\n    'h': makeChildAppender(writeDecimalTextNode),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nconst GX_NODE_FACTORY = function (value, objectStack, nodeName) {\r\n  return createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + nodeName);\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Object} icon Icon object.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeIcon(node, icon, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];\r\n  let values = makeSequence(icon, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    ICON_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n  orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];\r\n  values = makeSequence(icon, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    ICON_SERIALIZERS,\r\n    GX_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'scale',\r\n  'heading',\r\n  'Icon',\r\n  'color',\r\n  'hotSpot',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Icon': makeChildAppender(writeIcon),\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'heading': makeChildAppender(writeDecimalTextNode),\r\n  'hotSpot': makeChildAppender(writeVec2),\r\n  'scale': makeChildAppender(writeScaleTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../style/Icon.js\").default} style Icon style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeIconStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const /** @type {Object<string, any>} */ properties = {};\r\n  const src = style.getSrc();\r\n  const size = style.getSize();\r\n  const iconImageSize = style.getImageSize();\r\n  const iconProperties = {\r\n    'href': src,\r\n  };\r\n\r\n  if (size) {\r\n    iconProperties['w'] = size[0];\r\n    iconProperties['h'] = size[1];\r\n    const anchor = style.getAnchor(); // top-left\r\n    const origin = style.getOrigin(); // top-left\r\n\r\n    if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {\r\n      iconProperties['x'] = origin[0];\r\n      iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);\r\n    }\r\n\r\n    if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {\r\n      const /** @type {Vec2} */ hotSpot = {\r\n          x: anchor[0],\r\n          xunits: 'pixels',\r\n          y: size[1] - anchor[1],\r\n          yunits: 'pixels',\r\n        };\r\n      properties['hotSpot'] = hotSpot;\r\n    }\r\n  }\r\n\r\n  properties['Icon'] = iconProperties;\r\n\r\n  let scale = style.getScaleArray()[0];\r\n  let imageSize = size;\r\n  if (imageSize === null) {\r\n    imageSize = DEFAULT_IMAGE_STYLE_SIZE;\r\n  }\r\n  if (imageSize.length == 2) {\r\n    const resizeScale = scaleForSize(imageSize);\r\n    scale = scale / resizeScale;\r\n  }\r\n  if (scale !== 1) {\r\n    properties['scale'] = scale;\r\n  }\r\n\r\n  const rotation = style.getRotation();\r\n  if (rotation !== 0) {\r\n    properties['heading'] = rotation; // 0-360\r\n  }\r\n\r\n  const color = style.getColor();\r\n  if (color) {\r\n    properties['color'] = color;\r\n  }\r\n\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    ICON_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst LABEL_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'color',\r\n  'scale',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst LABEL_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'scale': makeChildAppender(writeScaleTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Text} style style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeLabelStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const properties = {};\r\n  const fill = style.getFill();\r\n  if (fill) {\r\n    properties['color'] = fill.getColor();\r\n  }\r\n  const scale = style.getScale();\r\n  if (scale && scale !== 1) {\r\n    properties['scale'] = scale;\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    LABEL_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst LINE_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'width']);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst LINE_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'width': makeChildAppender(writeDecimalTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Stroke} style style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeLineStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const properties = {\r\n    'color': style.getColor(),\r\n    'width': Number(style.getWidth()) || 1,\r\n  };\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    LINE_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst GEOMETRY_TYPE_TO_NODENAME = {\r\n  'Point': 'Point',\r\n  'LineString': 'LineString',\r\n  'LinearRing': 'LinearRing',\r\n  'Polygon': 'Polygon',\r\n  'MultiPoint': 'MultiGeometry',\r\n  'MultiLineString': 'MultiGeometry',\r\n  'MultiPolygon': 'MultiGeometry',\r\n  'GeometryCollection': 'MultiGeometry',\r\n};\r\n\r\n/**\r\n * @const\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nconst GEOMETRY_NODE_FACTORY = function (value, objectStack, nodeName) {\r\n  if (value) {\r\n    const parentNode = objectStack[objectStack.length - 1].node;\r\n    return createElementNS(\r\n      parentNode.namespaceURI,\r\n      GEOMETRY_TYPE_TO_NODENAME[\r\n        /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType()\r\n      ]\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * A factory for creating Point nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');\r\n\r\n/**\r\n * A factory for creating LineString nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');\r\n\r\n/**\r\n * A factory for creating LinearRing nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');\r\n\r\n/**\r\n * A factory for creating Polygon nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LineString': makeChildAppender(writePrimitiveGeometry),\r\n  'Point': makeChildAppender(writePrimitiveGeometry),\r\n  'Polygon': makeChildAppender(writePolygon),\r\n  'GeometryCollection': makeChildAppender(writeMultiGeometry),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeMultiGeometry(node, geometry, objectStack) {\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const context = {node: node};\r\n  const type = geometry.getType();\r\n  /** @type {Array<import(\"../geom/Geometry.js\").default>} */\r\n  let geometries = [];\r\n  /** @type {function(*, Array<*>, string=): (Node|undefined)} */\r\n  let factory;\r\n  if (type === 'GeometryCollection') {\r\n    /** @type {GeometryCollection} */ (geometry)\r\n      .getGeometriesArrayRecursive()\r\n      .forEach(function (geometry) {\r\n        const type = geometry.getType();\r\n        if (type === 'MultiPoint') {\r\n          geometries = geometries.concat(\r\n            /** @type {MultiPoint} */ (geometry).getPoints()\r\n          );\r\n        } else if (type === 'MultiLineString') {\r\n          geometries = geometries.concat(\r\n            /** @type {MultiLineString} */ (geometry).getLineStrings()\r\n          );\r\n        } else if (type === 'MultiPolygon') {\r\n          geometries = geometries.concat(\r\n            /** @type {MultiPolygon} */ (geometry).getPolygons()\r\n          );\r\n        } else if (\r\n          type === 'Point' ||\r\n          type === 'LineString' ||\r\n          type === 'Polygon'\r\n        ) {\r\n          geometries.push(geometry);\r\n        } else {\r\n          throw new Error('Unknown geometry type');\r\n        }\r\n      });\r\n    factory = GEOMETRY_NODE_FACTORY;\r\n  } else if (type === 'MultiPoint') {\r\n    geometries = /** @type {MultiPoint} */ (geometry).getPoints();\r\n    factory = POINT_NODE_FACTORY;\r\n  } else if (type === 'MultiLineString') {\r\n    geometries = /** @type {MultiLineString} */ (geometry).getLineStrings();\r\n    factory = LINE_STRING_NODE_FACTORY;\r\n  } else if (type === 'MultiPolygon') {\r\n    geometries = /** @type {MultiPolygon} */ (geometry).getPolygons();\r\n    factory = POLYGON_NODE_FACTORY;\r\n  } else {\r\n    throw new Error('Unknown geometry type');\r\n  }\r\n  pushSerializeAndPop(\r\n    context,\r\n    MULTI_GEOMETRY_SERIALIZERS,\r\n    factory,\r\n    geometries,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst BOUNDARY_IS_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../geom/LinearRing.js\").default} linearRing Linear ring.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeBoundaryIs(node, linearRing, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  pushSerializeAndPop(\r\n    context,\r\n    BOUNDARY_IS_SERIALIZERS,\r\n    LINEAR_RING_NODE_FACTORY,\r\n    [linearRing],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst PLACEMARK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ExtendedData': makeChildAppender(writeExtendedData),\r\n  'MultiGeometry': makeChildAppender(writeMultiGeometry),\r\n  'LineString': makeChildAppender(writePrimitiveGeometry),\r\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\r\n  'Point': makeChildAppender(writePrimitiveGeometry),\r\n  'Polygon': makeChildAppender(writePolygon),\r\n  'Style': makeChildAppender(writeStyle),\r\n  'address': makeChildAppender(writeStringTextNode),\r\n  'description': makeChildAppender(writeStringTextNode),\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'open': makeChildAppender(writeBooleanTextNode),\r\n  'phoneNumber': makeChildAppender(writeStringTextNode),\r\n  'styleUrl': makeChildAppender(writeStringTextNode),\r\n  'visibility': makeChildAppender(writeBooleanTextNode),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst PLACEMARK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'name',\r\n  'open',\r\n  'visibility',\r\n  'address',\r\n  'phoneNumber',\r\n  'description',\r\n  'styleUrl',\r\n  'Style',\r\n]);\r\n\r\n/**\r\n * A factory for creating ExtendedData nodes.\r\n * @const\r\n * @type {function(*, Array<*>): (Node|undefined)}\r\n */\r\nconst EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');\r\n\r\n/**\r\n * FIXME currently we do serialize arbitrary/custom feature properties\r\n * (ExtendedData).\r\n * @param {Element} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @this {KML}\r\n */\r\nfunction writePlacemark(node, feature, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n\r\n  // set id\r\n  if (feature.getId()) {\r\n    node.setAttribute('id', /** @type {string} */ (feature.getId()));\r\n  }\r\n\r\n  // serialize properties (properties unknown to KML are not serialized)\r\n  const properties = feature.getProperties();\r\n\r\n  // don't export these to ExtendedData\r\n  const filter = {\r\n    'address': 1,\r\n    'description': 1,\r\n    'name': 1,\r\n    'open': 1,\r\n    'phoneNumber': 1,\r\n    'styleUrl': 1,\r\n    'visibility': 1,\r\n  };\r\n  filter[feature.getGeometryName()] = 1;\r\n  const keys = Object.keys(properties || {})\r\n    .sort()\r\n    .filter(function (v) {\r\n      return !filter[v];\r\n    });\r\n\r\n  const styleFunction = feature.getStyleFunction();\r\n  if (styleFunction) {\r\n    // FIXME the styles returned by the style function are supposed to be\r\n    // resolution-independent here\r\n    const styles = styleFunction(feature, 0);\r\n    if (styles) {\r\n      const styleArray = Array.isArray(styles) ? styles : [styles];\r\n      let pointStyles = styleArray;\r\n      if (feature.getGeometry()) {\r\n        pointStyles = styleArray.filter(function (style) {\r\n          const geometry = style.getGeometryFunction()(feature);\r\n          if (geometry) {\r\n            const type = geometry.getType();\r\n            if (type === 'GeometryCollection') {\r\n              return /** @type {GeometryCollection} */ (geometry)\r\n                .getGeometriesArrayRecursive()\r\n                .filter(function (geometry) {\r\n                  const type = geometry.getType();\r\n                  return type === 'Point' || type === 'MultiPoint';\r\n                }).length;\r\n            }\r\n            return type === 'Point' || type === 'MultiPoint';\r\n          }\r\n        });\r\n        ('Point');\r\n      }\r\n      if (this.writeStyles_) {\r\n        let lineStyles = styleArray;\r\n        let polyStyles = styleArray;\r\n        if (feature.getGeometry()) {\r\n          lineStyles = styleArray.filter(function (style) {\r\n            const geometry = style.getGeometryFunction()(feature);\r\n            if (geometry) {\r\n              const type = geometry.getType();\r\n              if (type === 'GeometryCollection') {\r\n                return /** @type {GeometryCollection} */ (geometry)\r\n                  .getGeometriesArrayRecursive()\r\n                  .filter(function (geometry) {\r\n                    const type = geometry.getType();\r\n                    return type === 'LineString' || type === 'MultiLineString';\r\n                  }).length;\r\n              }\r\n              return type === 'LineString' || type === 'MultiLineString';\r\n            }\r\n          });\r\n          polyStyles = styleArray.filter(function (style) {\r\n            const geometry = style.getGeometryFunction()(feature);\r\n            if (geometry) {\r\n              const type = geometry.getType();\r\n              if (type === 'GeometryCollection') {\r\n                return /** @type {GeometryCollection} */ (geometry)\r\n                  .getGeometriesArrayRecursive()\r\n                  .filter(function (geometry) {\r\n                    const type = geometry.getType();\r\n                    return type === 'Polygon' || type === 'MultiPolygon';\r\n                  }).length;\r\n              }\r\n              return type === 'Polygon' || type === 'MultiPolygon';\r\n            }\r\n          });\r\n        }\r\n        properties['Style'] = {\r\n          pointStyles: pointStyles,\r\n          lineStyles: lineStyles,\r\n          polyStyles: polyStyles,\r\n        };\r\n      }\r\n      if (pointStyles.length && properties['name'] === undefined) {\r\n        const textStyle = pointStyles[0].getText();\r\n        if (textStyle) {\r\n          properties['name'] = textStyle.getText();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    PLACEMARK_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n\r\n  if (keys.length > 0) {\r\n    const sequence = makeSequence(properties, keys);\r\n    const namesAndValues = {names: keys, values: sequence};\r\n    pushSerializeAndPop(\r\n      context,\r\n      PLACEMARK_SERIALIZERS,\r\n      EXTENDEDDATA_NODE_FACTORY,\r\n      [namesAndValues],\r\n      objectStack\r\n    );\r\n  }\r\n\r\n  // serialize geometry\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  let geometry = feature.getGeometry();\r\n  if (geometry) {\r\n    geometry = transformGeometryWithOptions(geometry, true, options);\r\n  }\r\n  pushSerializeAndPop(\r\n    context,\r\n    PLACEMARK_SERIALIZERS,\r\n    GEOMETRY_NODE_FACTORY,\r\n    [geometry],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'extrude',\r\n  'tessellate',\r\n  'altitudeMode',\r\n  'coordinates',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'extrude': makeChildAppender(writeBooleanTextNode),\r\n  'tessellate': makeChildAppender(writeBooleanTextNode),\r\n  'altitudeMode': makeChildAppender(writeStringTextNode),\r\n  'coordinates': makeChildAppender(writeCoordinatesTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writePrimitiveGeometry(node, geometry, objectStack) {\r\n  const flatCoordinates = geometry.getFlatCoordinates();\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  context['layout'] = geometry.getLayout();\r\n  context['stride'] = geometry.getStride();\r\n\r\n  // serialize properties (properties unknown to KML are not serialized)\r\n  const properties = geometry.getProperties();\r\n  properties.coordinates = flatCoordinates;\r\n\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    PRIMITIVE_GEOMETRY_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst POLY_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'color',\r\n  'fill',\r\n  'outline',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst POLYGON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'outerBoundaryIs': makeChildAppender(writeBoundaryIs),\r\n  'innerBoundaryIs': makeChildAppender(writeBoundaryIs),\r\n});\r\n\r\n/**\r\n * A factory for creating innerBoundaryIs nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');\r\n\r\n/**\r\n * A factory for creating outerBoundaryIs nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Polygon} polygon Polygon.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writePolygon(node, polygon, objectStack) {\r\n  const linearRings = polygon.getLinearRings();\r\n  const outerRing = linearRings.shift();\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  // inner rings\r\n  pushSerializeAndPop(\r\n    context,\r\n    POLYGON_SERIALIZERS,\r\n    INNER_BOUNDARY_NODE_FACTORY,\r\n    linearRings,\r\n    objectStack\r\n  );\r\n  // outer ring\r\n  pushSerializeAndPop(\r\n    context,\r\n    POLYGON_SERIALIZERS,\r\n    OUTER_BOUNDARY_NODE_FACTORY,\r\n    [outerRing],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst POLY_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'fill': makeChildAppender(writeBooleanTextNode),\r\n  'outline': makeChildAppender(writeBooleanTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Style} style Style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writePolyStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const fill = style.getFill();\r\n  const stroke = style.getStroke();\r\n  const properties = {\r\n    'color': fill ? fill.getColor() : undefined,\r\n    'fill': fill ? undefined : false,\r\n    'outline': stroke ? undefined : false,\r\n  };\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    POLY_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the scale to.\r\n * @param {number|undefined} scale Scale.\r\n */\r\nfunction writeScaleTextNode(node, scale) {\r\n  // the Math is to remove any excess decimals created by float arithmetic\r\n  writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'IconStyle',\r\n  'LabelStyle',\r\n  'LineStyle',\r\n  'PolyStyle',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'IconStyle': makeChildAppender(writeIconStyle),\r\n  'LabelStyle': makeChildAppender(writeLabelStyle),\r\n  'LineStyle': makeChildAppender(writeLineStyle),\r\n  'PolyStyle': makeChildAppender(writePolyStyle),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Object<string, Array<Style>>} styles Styles.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeStyle(node, styles, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const properties = {};\r\n  if (styles.pointStyles.length) {\r\n    const textStyle = styles.pointStyles[0].getText();\r\n    if (textStyle) {\r\n      properties['LabelStyle'] = textStyle;\r\n    }\r\n    const imageStyle = styles.pointStyles[0].getImage();\r\n    if (\r\n      imageStyle &&\r\n      typeof (/** @type {?} */ (imageStyle).getSrc) === 'function'\r\n    ) {\r\n      properties['IconStyle'] = imageStyle;\r\n    }\r\n  }\r\n  if (styles.lineStyles.length) {\r\n    const strokeStyle = styles.lineStyles[0].getStroke();\r\n    if (strokeStyle) {\r\n      properties['LineStyle'] = strokeStyle;\r\n    }\r\n  }\r\n  if (styles.polyStyles.length) {\r\n    const strokeStyle = styles.polyStyles[0].getStroke();\r\n    if (strokeStyle && !properties['LineStyle']) {\r\n      properties['LineStyle'] = strokeStyle;\r\n    }\r\n    properties['PolyStyle'] = styles.polyStyles[0];\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node to append a TextNode with the Vec2 to.\r\n * @param {Vec2} vec2 Vec2.\r\n */\r\nfunction writeVec2(node, vec2) {\r\n  node.setAttribute('x', String(vec2.x));\r\n  node.setAttribute('y', String(vec2.y));\r\n  node.setAttribute('xunits', vec2.xunits);\r\n  node.setAttribute('yunits', vec2.yunits);\r\n}\r\n\r\nexport default KML;\r\n", "/**\r\n * @module ol/format/MVT\r\n */\r\n//FIXME Implement projection handling\r\n\r\nimport FeatureFormat, {transformGeometryWithOptions} from './Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport PBF from 'pbf';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport Projection from '../proj/Projection.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport {get} from '../proj.js';\r\nimport {inflateEnds} from '../geom/flat/orient.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Class for features returned by\r\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\r\n * support at the cost of decreased rendering performance. The default is\r\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\r\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\r\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\r\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\r\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\r\n * layers.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading data in the Mapbox MVT format.\r\n *\r\n * @param {Options} [options] Options.\r\n * @api\r\n */\r\nclass MVT extends FeatureFormat {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {Projection}\r\n     */\r\n    this.dataProjection = new Projection({\r\n      code: '',\r\n      units: 'tile-pixels',\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Feature.js\").FeatureClass}\r\n     */\r\n    this.featureClass_ = options.featureClass\r\n      ? options.featureClass\r\n      : RenderFeature;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.layerName_ = options.layerName ? options.layerName : 'layer';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>|null}\r\n     */\r\n    this.layers_ = options.layers ? options.layers : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.idProperty_ = options.idProperty;\r\n\r\n    this.supportedMediaTypes = [\r\n      'application/vnd.mapbox-vector-tile',\r\n      'application/x-protobuf',\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\r\n   * property.\r\n   * @param {PBF} pbf PBF.\r\n   * @param {Object} feature Raw feature.\r\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\r\n   * @param {Array<number>} ends Array to store ends in.\r\n   * @private\r\n   */\r\n  readRawGeometry_(pbf, feature, flatCoordinates, ends) {\r\n    pbf.pos = feature.geometry;\r\n\r\n    const end = pbf.readVarint() + pbf.pos;\r\n    let cmd = 1;\r\n    let length = 0;\r\n    let x = 0;\r\n    let y = 0;\r\n    let coordsLen = 0;\r\n    let currentEnd = 0;\r\n\r\n    while (pbf.pos < end) {\r\n      if (!length) {\r\n        const cmdLen = pbf.readVarint();\r\n        cmd = cmdLen & 0x7;\r\n        length = cmdLen >> 3;\r\n      }\r\n\r\n      length--;\r\n\r\n      if (cmd === 1 || cmd === 2) {\r\n        x += pbf.readSVarint();\r\n        y += pbf.readSVarint();\r\n\r\n        if (cmd === 1) {\r\n          // moveTo\r\n          if (coordsLen > currentEnd) {\r\n            ends.push(coordsLen);\r\n            currentEnd = coordsLen;\r\n          }\r\n        }\r\n\r\n        flatCoordinates.push(x, y);\r\n        coordsLen += 2;\r\n      } else if (cmd === 7) {\r\n        if (coordsLen > currentEnd) {\r\n          // close polygon\r\n          flatCoordinates.push(\r\n            flatCoordinates[currentEnd],\r\n            flatCoordinates[currentEnd + 1]\r\n          );\r\n          coordsLen += 2;\r\n        }\r\n      } else {\r\n        throw new Error('Invalid command found in the PBF');\r\n      }\r\n    }\r\n\r\n    if (coordsLen > currentEnd) {\r\n      ends.push(coordsLen);\r\n      currentEnd = coordsLen;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PBF} pbf PBF\r\n   * @param {Object} rawFeature Raw Mapbox feature.\r\n   * @param {import(\"./Feature.js\").ReadOptions} options Read options.\r\n   * @return {import(\"../Feature.js\").FeatureLike|null} Feature.\r\n   */\r\n  createFeature_(pbf, rawFeature, options) {\r\n    const type = rawFeature.type;\r\n    if (type === 0) {\r\n      return null;\r\n    }\r\n\r\n    let feature;\r\n    const values = rawFeature.properties;\r\n\r\n    let id;\r\n    if (!this.idProperty_) {\r\n      id = rawFeature.id;\r\n    } else {\r\n      id = values[this.idProperty_];\r\n      delete values[this.idProperty_];\r\n    }\r\n\r\n    values[this.layerName_] = rawFeature.layer.name;\r\n\r\n    const flatCoordinates = /** @type {Array<number>} */ ([]);\r\n    const ends = /** @type {Array<number>} */ ([]);\r\n    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\r\n\r\n    const geometryType = getGeometryType(type, ends.length);\r\n\r\n    if (this.featureClass_ === RenderFeature) {\r\n      feature = new this.featureClass_(\r\n        geometryType,\r\n        flatCoordinates,\r\n        ends,\r\n        2,\r\n        values,\r\n        id\r\n      );\r\n      feature.transform(options.dataProjection);\r\n    } else {\r\n      let geom;\r\n      if (geometryType == 'Polygon') {\r\n        const endss = inflateEnds(flatCoordinates, ends);\r\n        geom =\r\n          endss.length > 1\r\n            ? new MultiPolygon(flatCoordinates, 'XY', endss)\r\n            : new Polygon(flatCoordinates, 'XY', ends);\r\n      } else {\r\n        geom =\r\n          geometryType === 'Point'\r\n            ? new Point(flatCoordinates, 'XY')\r\n            : geometryType === 'LineString'\r\n            ? new LineString(flatCoordinates, 'XY')\r\n            : geometryType === 'MultiPoint'\r\n            ? new MultiPoint(flatCoordinates, 'XY')\r\n            : geometryType === 'MultiLineString'\r\n            ? new MultiLineString(flatCoordinates, 'XY', ends)\r\n            : null;\r\n      }\r\n      const ctor = /** @type {typeof import(\"../Feature.js\").default} */ (\r\n        this.featureClass_\r\n      );\r\n      feature = new ctor();\r\n      if (this.geometryName_) {\r\n        feature.setGeometryName(this.geometryName_);\r\n      }\r\n      const geometry = transformGeometryWithOptions(geom, false, options);\r\n      feature.setGeometry(geometry);\r\n      if (id !== undefined) {\r\n        feature.setId(id);\r\n      }\r\n      feature.setProperties(values, true);\r\n    }\r\n\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return 'arraybuffer';\r\n  }\r\n\r\n  /**\r\n   * Read all features.\r\n   *\r\n   * @param {ArrayBuffer} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    const layers = this.layers_;\r\n    options = this.adaptOptions(options);\r\n    const dataProjection = get(options.dataProjection);\r\n    dataProjection.setWorldExtent(options.extent);\r\n    options.dataProjection = dataProjection;\r\n\r\n    const pbf = new PBF(/** @type {ArrayBuffer} */ (source));\r\n    const pbfLayers = pbf.readFields(layersPBFReader, {});\r\n    const features = [];\r\n    for (const name in pbfLayers) {\r\n      if (layers && !layers.includes(name)) {\r\n        continue;\r\n      }\r\n      const pbfLayer = pbfLayers[name];\r\n\r\n      const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\r\n      dataProjection.setExtent(extent);\r\n\r\n      for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {\r\n        const rawFeature = readRawFeature(pbf, pbfLayer, i);\r\n        const feature = this.createFeature_(pbf, rawFeature, options);\r\n        if (feature !== null) {\r\n          features.push(feature);\r\n        }\r\n      }\r\n    }\r\n\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Read the projection from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * Sets the layers that features will be read from.\r\n   * @param {Array<string>} layers Layers.\r\n   * @api\r\n   */\r\n  setLayers(layers) {\r\n    this.layers_ = layers;\r\n  }\r\n}\r\n\r\n/**\r\n * Reader callback for parsing layers.\r\n * @param {number} tag The tag.\r\n * @param {Object} layers The layers object.\r\n * @param {PBF} pbf The PBF.\r\n */\r\nfunction layersPBFReader(tag, layers, pbf) {\r\n  if (tag === 3) {\r\n    const layer = {\r\n      keys: [],\r\n      values: [],\r\n      features: [],\r\n    };\r\n    const end = pbf.readVarint() + pbf.pos;\r\n    pbf.readFields(layerPBFReader, layer, end);\r\n    layer.length = layer.features.length;\r\n    if (layer.length) {\r\n      layers[layer.name] = layer;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Reader callback for parsing layer.\r\n * @param {number} tag The tag.\r\n * @param {Object} layer The layer object.\r\n * @param {PBF} pbf The PBF.\r\n */\r\nfunction layerPBFReader(tag, layer, pbf) {\r\n  if (tag === 15) {\r\n    layer.version = pbf.readVarint();\r\n  } else if (tag === 1) {\r\n    layer.name = pbf.readString();\r\n  } else if (tag === 5) {\r\n    layer.extent = pbf.readVarint();\r\n  } else if (tag === 2) {\r\n    layer.features.push(pbf.pos);\r\n  } else if (tag === 3) {\r\n    layer.keys.push(pbf.readString());\r\n  } else if (tag === 4) {\r\n    let value = null;\r\n    const end = pbf.readVarint() + pbf.pos;\r\n    while (pbf.pos < end) {\r\n      tag = pbf.readVarint() >> 3;\r\n      value =\r\n        tag === 1\r\n          ? pbf.readString()\r\n          : tag === 2\r\n          ? pbf.readFloat()\r\n          : tag === 3\r\n          ? pbf.readDouble()\r\n          : tag === 4\r\n          ? pbf.readVarint64()\r\n          : tag === 5\r\n          ? pbf.readVarint()\r\n          : tag === 6\r\n          ? pbf.readSVarint()\r\n          : tag === 7\r\n          ? pbf.readBoolean()\r\n          : null;\r\n    }\r\n    layer.values.push(value);\r\n  }\r\n}\r\n\r\n/**\r\n * Reader callback for parsing feature.\r\n * @param {number} tag The tag.\r\n * @param {Object} feature The feature object.\r\n * @param {PBF} pbf The PBF.\r\n */\r\nfunction featurePBFReader(tag, feature, pbf) {\r\n  if (tag == 1) {\r\n    feature.id = pbf.readVarint();\r\n  } else if (tag == 2) {\r\n    const end = pbf.readVarint() + pbf.pos;\r\n    while (pbf.pos < end) {\r\n      const key = feature.layer.keys[pbf.readVarint()];\r\n      const value = feature.layer.values[pbf.readVarint()];\r\n      feature.properties[key] = value;\r\n    }\r\n  } else if (tag == 3) {\r\n    feature.type = pbf.readVarint();\r\n  } else if (tag == 4) {\r\n    feature.geometry = pbf.pos;\r\n  }\r\n}\r\n\r\n/**\r\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\r\n * @param {PBF} pbf PBF.\r\n * @param {Object} layer Raw layer.\r\n * @param {number} i Index of the feature in the raw layer's `features` array.\r\n * @return {Object} Raw feature.\r\n */\r\nfunction readRawFeature(pbf, layer, i) {\r\n  pbf.pos = layer.features[i];\r\n  const end = pbf.readVarint() + pbf.pos;\r\n\r\n  const feature = {\r\n    layer: layer,\r\n    type: 0,\r\n    properties: {},\r\n  };\r\n  pbf.readFields(featurePBFReader, feature, end);\r\n  return feature;\r\n}\r\n\r\n/**\r\n * @param {number} type The raw feature's geometry type\r\n * @param {number} numEnds Number of ends of the flat coordinates of the\r\n * geometry.\r\n * @return {import(\"../render/Feature.js\").Type} The geometry type.\r\n */\r\nfunction getGeometryType(type, numEnds) {\r\n  /** @type {import(\"../render/Feature.js\").Type} */\r\n  let geometryType;\r\n  if (type === 1) {\r\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\r\n  } else if (type === 2) {\r\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\r\n  } else if (type === 3) {\r\n    geometryType = 'Polygon';\r\n    // MultiPolygon not relevant for rendering - winding order determines\r\n    // outer rings of polygons.\r\n  }\r\n  return geometryType;\r\n}\r\n\r\nexport default MVT;\r\n", "/**\r\n * @module ol/format/XML\r\n */\r\nimport {abstract} from '../util.js';\r\nimport {isDocument, parse} from '../xml.js';\r\n\r\n/**\r\n * @classdesc\r\n * Generic format for reading non-feature XML data\r\n *\r\n * @abstract\r\n */\r\nclass XML {\r\n  /**\r\n   * Read the source document.\r\n   *\r\n   * @param {Document|Element|string} source The XML source.\r\n   * @return {Object|null} An object representing the source.\r\n   * @api\r\n   */\r\n  read(source) {\r\n    if (!source) {\r\n      return null;\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFromDocument(doc);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readFromDocument(/** @type {Document} */ (source));\r\n    }\r\n    return this.readFromNode(/** @type {Element} */ (source));\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {Object|null} Object\r\n   */\r\n  readFromDocument(doc) {\r\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readFromNode(/** @type {Element} */ (n));\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Element} node Node.\r\n   * @return {Object|null} Object\r\n   */\r\n  readFromNode(node) {\r\n    abstract();\r\n  }\r\n}\r\n\r\nexport default XML;\r\n", "/**\r\n * @module ol/format/xlink\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @return {string|null} href.\r\n */\r\nexport function readHref(node) {\r\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\r\n}\r\n", "/**\r\n * @module ol/format/OWS\r\n */\r\nimport XML from './XML.js';\r\nimport {\r\n  makeObjectPropertyPusher,\r\n  makeObjectPropertySetter,\r\n  makeStructureNS,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {readHref} from './xlink.js';\r\nimport {readString} from './xsd.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),\r\n  'ServiceProvider': makeObjectPropertySetter(readServiceProvider),\r\n  'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata),\r\n});\r\n\r\nclass OWS extends XML {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Object|null} Object\r\n   */\r\n  readFromNode(node) {\r\n    const owsObject = pushParseAndPop({}, PARSERS, node, []);\r\n    return owsObject ? owsObject : null;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'DeliveryPoint': makeObjectPropertySetter(readString),\r\n  'City': makeObjectPropertySetter(readString),\r\n  'AdministrativeArea': makeObjectPropertySetter(readString),\r\n  'PostalCode': makeObjectPropertySetter(readString),\r\n  'Country': makeObjectPropertySetter(readString),\r\n  'ElectronicMailAddress': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ALLOWED_VALUES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Value': makeObjectPropertyPusher(readValue),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONSTRAINT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'AllowedValues': makeObjectPropertySetter(readAllowedValues),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_INFO_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Phone': makeObjectPropertySetter(readPhone),\r\n  'Address': makeObjectPropertySetter(readAddress),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DCP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'HTTP': makeObjectPropertySetter(readHttp),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Get': makeObjectPropertyPusher(readGet),\r\n  'Post': undefined, // TODO\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OPERATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'DCP': makeObjectPropertySetter(readDcp),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OPERATIONS_METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Operation': readOperation,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PHONE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Voice': makeObjectPropertySetter(readString),\r\n  'Facsimile': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst REQUEST_METHOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Constraint': makeObjectPropertyPusher(readConstraint),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_CONTACT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'IndividualName': makeObjectPropertySetter(readString),\r\n  'PositionName': makeObjectPropertySetter(readString),\r\n  'ContactInfo': makeObjectPropertySetter(readContactInfo),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_IDENTIFICATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'AccessConstraints': makeObjectPropertySetter(readString),\r\n  'Fees': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'ServiceTypeVersion': makeObjectPropertySetter(readString),\r\n  'ServiceType': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_PROVIDER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ProviderName': makeObjectPropertySetter(readString),\r\n  'ProviderSite': makeObjectPropertySetter(readHref),\r\n  'ServiceContact': makeObjectPropertySetter(readServiceContact),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The address.\r\n */\r\nfunction readAddress(node, objectStack) {\r\n  return pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The values.\r\n */\r\nfunction readAllowedValues(node, objectStack) {\r\n  return pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The constraint.\r\n */\r\nfunction readConstraint(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  if (!name) {\r\n    return undefined;\r\n  }\r\n  return pushParseAndPop({'name': name}, CONSTRAINT_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The contact info.\r\n */\r\nfunction readContactInfo(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The DCP.\r\n */\r\nfunction readDcp(node, objectStack) {\r\n  return pushParseAndPop({}, DCP_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The GET object.\r\n */\r\nfunction readGet(node, objectStack) {\r\n  const href = readHref(node);\r\n  if (!href) {\r\n    return undefined;\r\n  }\r\n  return pushParseAndPop(\r\n    {'href': href},\r\n    REQUEST_METHOD_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The HTTP object.\r\n */\r\nfunction readHttp(node, objectStack) {\r\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The operation.\r\n */\r\nfunction readOperation(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  const value = pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);\r\n  if (!value) {\r\n    return undefined;\r\n  }\r\n  const object = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  object[name] = value;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The operations metadata.\r\n */\r\nfunction readOperationsMetadata(node, objectStack) {\r\n  return pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The phone.\r\n */\r\nfunction readPhone(node, objectStack) {\r\n  return pushParseAndPop({}, PHONE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The service identification.\r\n */\r\nfunction readServiceIdentification(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The service contact.\r\n */\r\nfunction readServiceContact(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The service provider.\r\n */\r\nfunction readServiceProvider(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {string|undefined} The value.\r\n */\r\nfunction readValue(node, objectStack) {\r\n  return readString(node);\r\n}\r\n\r\nexport default OWS;\r\n", "/**\r\n * @module ol/geom/flat/flip\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [dest] Destination.\r\n * @param {number} [destOffset] Destination offset.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function flipXY(flatCoordinates, offset, end, stride, dest, destOffset) {\r\n  if (dest !== undefined) {\r\n    dest = dest;\r\n    destOffset = destOffset !== undefined ? destOffset : 0;\r\n  } else {\r\n    dest = [];\r\n    destOffset = 0;\r\n  }\r\n  let j = offset;\r\n  while (j < end) {\r\n    const x = flatCoordinates[j++];\r\n    dest[destOffset++] = flatCoordinates[j++];\r\n    dest[destOffset++] = x;\r\n    for (let k = 2; k < stride; ++k) {\r\n      dest[destOffset++] = flatCoordinates[j++];\r\n    }\r\n  }\r\n  dest.length = destOffset;\r\n  return dest;\r\n}\r\n", "/**\r\n * @module ol/format/Polyline\r\n */\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport TextFeature from './TextFeature.js';\r\nimport {flipXY} from '../geom/flat/flip.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\r\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\r\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\r\n * feature geometries created by the format reader.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the Encoded\r\n * Polyline Algorithm Format.\r\n *\r\n * When reading features, the coordinates are assumed to be in two dimensions\r\n * and in [latitude, longitude] order.\r\n *\r\n * As Polyline sources contain a single feature,\r\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\r\n * feature in an array.\r\n *\r\n * @api\r\n */\r\nclass Polyline extends TextFeature {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.factor_ = options.factor ? options.factor : 1e5;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\r\n     */\r\n    this.geometryLayout_ = options.geometryLayout\r\n      ? options.geometryLayout\r\n      : 'XY';\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    const geometry = this.readGeometryFromText(text, options);\r\n    return new Feature(geometry);\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    const feature = this.readFeatureFromText(text, options);\r\n    return [feature];\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    const stride = getStrideForLayout(this.geometryLayout_);\r\n    const flatCoordinates = decodeDeltas(text, stride, this.factor_);\r\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\r\n    const coordinates = inflateCoordinates(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride\r\n    );\r\n    const lineString = new LineString(coordinates, this.geometryLayout_);\r\n\r\n    return transformGeometryWithOptions(\r\n      lineString,\r\n      false,\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default<LineString>} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      return this.writeGeometryText(geometry, options);\r\n    }\r\n    throw new Error('Expected `feature` to have a geometry');\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../Feature.js\").default<LineString>>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    return this.writeFeatureText(features[0], options);\r\n  }\r\n\r\n  /**\r\n   * @param {LineString} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    geometry =\r\n      /** @type {LineString} */\r\n      (\r\n        transformGeometryWithOptions(geometry, true, this.adaptOptions(options))\r\n      );\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\r\n    return encodeDeltas(flatCoordinates, stride, this.factor_);\r\n  }\r\n}\r\n\r\n/**\r\n * Encode a list of n-dimensional points and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of n-dimensional points.\r\n * @param {number} stride The number of dimension of the points in the list.\r\n * @param {number} [factor] The factor by which the numbers will be\r\n *     multiplied. The remaining decimal places will get rounded away.\r\n *     Default is `1e5`.\r\n * @return {string} The encoded string.\r\n * @api\r\n */\r\nexport function encodeDeltas(numbers, stride, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  let d;\r\n\r\n  const lastNumbers = new Array(stride);\r\n  for (d = 0; d < stride; ++d) {\r\n    lastNumbers[d] = 0;\r\n  }\r\n\r\n  for (let i = 0, ii = numbers.length; i < ii; ) {\r\n    for (d = 0; d < stride; ++d, ++i) {\r\n      const num = numbers[i];\r\n      const delta = num - lastNumbers[d];\r\n      lastNumbers[d] = num;\r\n\r\n      numbers[i] = delta;\r\n    }\r\n  }\r\n\r\n  return encodeFloats(numbers, factor);\r\n}\r\n\r\n/**\r\n * Decode a list of n-dimensional points from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @param {number} stride The number of dimension of the points in the\r\n *     encoded string.\r\n * @param {number} [factor] The factor by which the resulting numbers will\r\n *     be divided. Default is `1e5`.\r\n * @return {Array<number>} A list of n-dimensional points.\r\n * @api\r\n */\r\nexport function decodeDeltas(encoded, stride, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  let d;\r\n\r\n  /** @type {Array<number>} */\r\n  const lastNumbers = new Array(stride);\r\n  for (d = 0; d < stride; ++d) {\r\n    lastNumbers[d] = 0;\r\n  }\r\n\r\n  const numbers = decodeFloats(encoded, factor);\r\n\r\n  for (let i = 0, ii = numbers.length; i < ii; ) {\r\n    for (d = 0; d < stride; ++d, ++i) {\r\n      lastNumbers[d] += numbers[i];\r\n\r\n      numbers[i] = lastNumbers[d];\r\n    }\r\n  }\r\n\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of floating point numbers and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of floating point numbers.\r\n * @param {number} [factor] The factor by which the numbers will be\r\n *     multiplied. The remaining decimal places will get rounded away.\r\n *     Default is `1e5`.\r\n * @return {string} The encoded string.\r\n * @api\r\n */\r\nexport function encodeFloats(numbers, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    numbers[i] = Math.round(numbers[i] * factor);\r\n  }\r\n\r\n  return encodeSignedIntegers(numbers);\r\n}\r\n\r\n/**\r\n * Decode a list of floating point numbers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @param {number} [factor] The factor by which the result will be divided.\r\n *     Default is `1e5`.\r\n * @return {Array<number>} A list of floating point numbers.\r\n * @api\r\n */\r\nexport function decodeFloats(encoded, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  const numbers = decodeSignedIntegers(encoded);\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    numbers[i] /= factor;\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of signed integers and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of signed integers.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeSignedIntegers(numbers) {\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    const num = numbers[i];\r\n    numbers[i] = num < 0 ? ~(num << 1) : num << 1;\r\n  }\r\n  return encodeUnsignedIntegers(numbers);\r\n}\r\n\r\n/**\r\n * Decode a list of signed integers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @return {Array<number>} A list of signed integers.\r\n */\r\nexport function decodeSignedIntegers(encoded) {\r\n  const numbers = decodeUnsignedIntegers(encoded);\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    const num = numbers[i];\r\n    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of unsigned integers and return an encoded string\r\n *\r\n * @param {Array<number>} numbers A list of unsigned integers.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeUnsignedIntegers(numbers) {\r\n  let encoded = '';\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    encoded += encodeUnsignedInteger(numbers[i]);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * Decode a list of unsigned integers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @return {Array<number>} A list of unsigned integers.\r\n */\r\nexport function decodeUnsignedIntegers(encoded) {\r\n  const numbers = [];\r\n  let current = 0;\r\n  let shift = 0;\r\n  for (let i = 0, ii = encoded.length; i < ii; ++i) {\r\n    const b = encoded.charCodeAt(i) - 63;\r\n    current |= (b & 0x1f) << shift;\r\n    if (b < 0x20) {\r\n      numbers.push(current);\r\n      current = 0;\r\n      shift = 0;\r\n    } else {\r\n      shift += 5;\r\n    }\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode one single unsigned integer and return an encoded string\r\n *\r\n * @param {number} num Unsigned integer that should be encoded.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeUnsignedInteger(num) {\r\n  let value,\r\n    encoded = '';\r\n  while (num >= 0x20) {\r\n    value = (0x20 | (num & 0x1f)) + 63;\r\n    encoded += String.fromCharCode(value);\r\n    num >>= 5;\r\n  }\r\n  value = num + 63;\r\n  encoded += String.fromCharCode(value);\r\n  return encoded;\r\n}\r\n\r\nexport default Polyline;\r\n", "/**\r\n * @module ol/format/TopoJSON\r\n */\r\nimport Feature from '../Feature.js';\r\nimport JSONFeature from './JSONFeature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {import(\"topojson-specification\").Topology} TopoJSONTopology\r\n * @typedef {import(\"topojson-specification\").GeometryCollection} TopoJSONGeometryCollection\r\n * @typedef {import(\"topojson-specification\").GeometryObject} TopoJSONGeometry\r\n * @typedef {import(\"topojson-specification\").Point} TopoJSONPoint\r\n * @typedef {import(\"topojson-specification\").MultiPoint} TopoJSONMultiPoint\r\n * @typedef {import(\"topojson-specification\").LineString} TopoJSONLineString\r\n * @typedef {import(\"topojson-specification\").MultiLineString} TopoJSONMultiLineString\r\n * @typedef {import(\"topojson-specification\").Polygon} TopoJSONPolygon\r\n * @typedef {import(\"topojson-specification\").MultiPolygon} TopoJSONMultiPolygon\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {string} [layerName] Set the name of the TopoJSON topology\r\n * `objects`'s children as feature property with the specified name. This means\r\n * that when set to `'layer'`, a topology like\r\n * ```\r\n * {\r\n *   \"type\": \"Topology\",\r\n *   \"objects\": {\r\n *     \"example\": {\r\n *       \"type\": \"GeometryCollection\",\r\n *       \"geometries\": []\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * will result in features that have a property `'layer'` set to `'example'`.\r\n * When not set, no property will be added to features.\r\n * @property {Array<string>} [layers] Names of the TopoJSON topology's\r\n * `objects`'s children to read features from.  If not provided, features will\r\n * be read from all children.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading data in the TopoJSON format.\r\n *\r\n * @api\r\n */\r\nclass TopoJSON extends JSONFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.layerName_ = options.layerName;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<string>}\r\n     */\r\n    this.layers_ = options.layers ? options.layers : null;\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection(\r\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    if (object.type == 'Topology') {\r\n      const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);\r\n      let transform,\r\n        scale = null,\r\n        translate = null;\r\n      if (topoJSONTopology['transform']) {\r\n        transform = topoJSONTopology['transform'];\r\n        scale = transform['scale'];\r\n        translate = transform['translate'];\r\n      }\r\n      const arcs = topoJSONTopology['arcs'];\r\n      if (transform) {\r\n        transformArcs(arcs, scale, translate);\r\n      }\r\n      /** @type {Array<Feature>} */\r\n      const features = [];\r\n      const topoJSONFeatures = topoJSONTopology['objects'];\r\n      const property = this.layerName_;\r\n      let feature;\r\n      for (const objectName in topoJSONFeatures) {\r\n        if (this.layers_ && !this.layers_.includes(objectName)) {\r\n          continue;\r\n        }\r\n        if (topoJSONFeatures[objectName].type === 'GeometryCollection') {\r\n          feature = /** @type {TopoJSONGeometryCollection} */ (\r\n            topoJSONFeatures[objectName]\r\n          );\r\n          features.push.apply(\r\n            features,\r\n            readFeaturesFromGeometryCollection(\r\n              feature,\r\n              arcs,\r\n              scale,\r\n              translate,\r\n              property,\r\n              objectName,\r\n              options\r\n            )\r\n          );\r\n        } else {\r\n          feature = /** @type {TopoJSONGeometry} */ (\r\n            topoJSONFeatures[objectName]\r\n          );\r\n          features.push(\r\n            readFeatureFromGeometry(\r\n              feature,\r\n              arcs,\r\n              scale,\r\n              translate,\r\n              property,\r\n              objectName,\r\n              options\r\n            )\r\n          );\r\n        }\r\n      }\r\n      return features;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    return this.dataProjection;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import(\"../geom/Geometry.js\").default>}\r\n */\r\nconst GEOMETRY_READERS = {\r\n  'Point': readPointGeometry,\r\n  'LineString': readLineStringGeometry,\r\n  'Polygon': readPolygonGeometry,\r\n  'MultiPoint': readMultiPointGeometry,\r\n  'MultiLineString': readMultiLineStringGeometry,\r\n  'MultiPolygon': readMultiPolygonGeometry,\r\n};\r\n\r\n/**\r\n * Concatenate arcs into a coordinate array.\r\n * @param {Array<number>} indices Indices of arcs to concatenate.  Negative\r\n *     values indicate arcs need to be reversed.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs (already\r\n *     transformed).\r\n * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates array.\r\n */\r\nfunction concatenateArcs(indices, arcs) {\r\n  /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\r\n  const coordinates = [];\r\n  let index;\r\n  for (let i = 0, ii = indices.length; i < ii; ++i) {\r\n    index = indices[i];\r\n    if (i > 0) {\r\n      // splicing together arcs, discard last point\r\n      coordinates.pop();\r\n    }\r\n    if (index >= 0) {\r\n      // forward arc\r\n      const arc = arcs[index];\r\n      for (let j = 0, jj = arc.length; j < jj; ++j) {\r\n        coordinates.push(arc[j].slice(0));\r\n      }\r\n    } else {\r\n      // reverse arc\r\n      const arc = arcs[~index];\r\n      for (let j = arc.length - 1; j >= 0; --j) {\r\n        coordinates.push(arc[j].slice(0));\r\n      }\r\n    }\r\n  }\r\n  return coordinates;\r\n}\r\n\r\n/**\r\n * Create a point from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONPoint} object TopoJSON object.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @return {Point} Geometry.\r\n */\r\nfunction readPointGeometry(object, scale, translate) {\r\n  const coordinates = object['coordinates'];\r\n  if (scale && translate) {\r\n    transformVertex(coordinates, scale, translate);\r\n  }\r\n  return new Point(coordinates);\r\n}\r\n\r\n/**\r\n * Create a multi-point from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONMultiPoint} object TopoJSON object.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @return {MultiPoint} Geometry.\r\n */\r\nfunction readMultiPointGeometry(object, scale, translate) {\r\n  const coordinates = object['coordinates'];\r\n  if (scale && translate) {\r\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n      transformVertex(coordinates[i], scale, translate);\r\n    }\r\n  }\r\n  return new MultiPoint(coordinates);\r\n}\r\n\r\n/**\r\n * Create a linestring from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONLineString} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {LineString} Geometry.\r\n */\r\nfunction readLineStringGeometry(object, arcs) {\r\n  const coordinates = concatenateArcs(object['arcs'], arcs);\r\n  return new LineString(coordinates);\r\n}\r\n\r\n/**\r\n * Create a multi-linestring from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONMultiLineString} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {MultiLineString} Geometry.\r\n */\r\nfunction readMultiLineStringGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\r\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\r\n  }\r\n  return new MultiLineString(coordinates);\r\n}\r\n\r\n/**\r\n * Create a polygon from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONPolygon} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {Polygon} Geometry.\r\n */\r\nfunction readPolygonGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\r\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\r\n  }\r\n  return new Polygon(coordinates);\r\n}\r\n\r\n/**\r\n * Create a multi-polygon from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONMultiPolygon} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {MultiPolygon} Geometry.\r\n */\r\nfunction readMultiPolygonGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\r\n    // for each polygon\r\n    const polyArray = object['arcs'][i];\r\n    const ringCoords = [];\r\n    for (let j = 0, jj = polyArray.length; j < jj; ++j) {\r\n      // for each ring\r\n      ringCoords[j] = concatenateArcs(polyArray[j], arcs);\r\n    }\r\n    coordinates[i] = ringCoords;\r\n  }\r\n  return new MultiPolygon(coordinates);\r\n}\r\n\r\n/**\r\n * Create features from a TopoJSON GeometryCollection object.\r\n *\r\n * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry\r\n *     object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\r\n *     object to.\r\n * @param {string} name Name of the `Topology`'s child object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {Array<Feature>} Array of features.\r\n */\r\nfunction readFeaturesFromGeometryCollection(\r\n  collection,\r\n  arcs,\r\n  scale,\r\n  translate,\r\n  property,\r\n  name,\r\n  options\r\n) {\r\n  const geometries = collection['geometries'];\r\n  const features = [];\r\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n    features[i] = readFeatureFromGeometry(\r\n      geometries[i],\r\n      arcs,\r\n      scale,\r\n      translate,\r\n      property,\r\n      name,\r\n      options\r\n    );\r\n  }\r\n  return features;\r\n}\r\n\r\n/**\r\n * Create a feature from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON geometry object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\r\n *     object to.\r\n * @param {string} name Name of the `Topology`'s child object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {Feature} Feature.\r\n */\r\nfunction readFeatureFromGeometry(\r\n  object,\r\n  arcs,\r\n  scale,\r\n  translate,\r\n  property,\r\n  name,\r\n  options\r\n) {\r\n  let geometry = null;\r\n  const type = object.type;\r\n  if (type) {\r\n    const geometryReader = GEOMETRY_READERS[type];\r\n    if (type === 'Point' || type === 'MultiPoint') {\r\n      geometry = geometryReader(object, scale, translate);\r\n    } else {\r\n      geometry = geometryReader(object, arcs);\r\n    }\r\n    geometry = transformGeometryWithOptions(geometry, false, options);\r\n  }\r\n  const feature = new Feature({geometry: geometry});\r\n  if (object.id !== undefined) {\r\n    feature.setId(object.id);\r\n  }\r\n  let properties = object.properties;\r\n  if (property) {\r\n    if (!properties) {\r\n      properties = {};\r\n    }\r\n    properties[property] = name;\r\n  }\r\n  if (properties) {\r\n    feature.setProperties(properties, true);\r\n  }\r\n  return feature;\r\n}\r\n\r\n/**\r\n * Apply a linear transform to array of arcs.  The provided array of arcs is\r\n * modified in place.\r\n *\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n */\r\nfunction transformArcs(arcs, scale, translate) {\r\n  for (let i = 0, ii = arcs.length; i < ii; ++i) {\r\n    transformArc(arcs[i], scale, translate);\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a linear transform to an arc.  The provided arc is modified in place.\r\n *\r\n * @param {Array<import(\"../coordinate.js\").Coordinate>} arc Arc.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n */\r\nfunction transformArc(arc, scale, translate) {\r\n  let x = 0;\r\n  let y = 0;\r\n  for (let i = 0, ii = arc.length; i < ii; ++i) {\r\n    const vertex = arc[i];\r\n    x += vertex[0];\r\n    y += vertex[1];\r\n    vertex[0] = x;\r\n    vertex[1] = y;\r\n    transformVertex(vertex, scale, translate);\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a linear transform to a vertex.  The provided vertex is modified in\r\n * place.\r\n *\r\n * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n */\r\nfunction transformVertex(vertex, scale, translate) {\r\n  vertex[0] = vertex[0] * scale[0] + translate[0];\r\n  vertex[1] = vertex[1] * scale[1] + translate[1];\r\n}\r\n\r\nexport default TopoJSON;\r\n", "/**\r\n * @module ol/format/GML32\r\n */\r\nimport GML2 from './GML2.js';\r\nimport GML3 from './GML3.js';\r\nimport GMLBase from './GMLBase.js';\r\nimport {\r\n  makeArrayExtender,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeReplacer,\r\n} from '../xml.js';\r\nimport {writeStringTextNode} from '../format/xsd.js';\r\n\r\n/**\r\n * @classdesc Feature format for reading and writing data in the GML format\r\n *            version 3.2.1.\r\n * @api\r\n */\r\nclass GML32 extends GML3 {\r\n  /**\r\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(options);\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeGeometryElement(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    objectStack[objectStack.length - 1] = Object.assign(\r\n      {multiCurve: true, multiSurface: true},\r\n      context\r\n    );\r\n    super.writeGeometryElement(node, geometry, objectStack);\r\n  }\r\n}\r\n\r\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\r\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\r\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'interior': GML3.prototype.interiorParser,\r\n    'exterior': GML3.prototype.exteriorParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\r\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\r\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\r\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\r\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\r\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\r\n    'Surface': makeReplacer(GML32.prototype.readSurface),\r\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\r\n    'Curve': makeReplacer(GML32.prototype.readCurve),\r\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\r\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTICURVE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTISURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.CURVEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.SURFACEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.SURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'patches': makeReplacer(GML3.prototype.readPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.CURVE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'segments': makeReplacer(GML3.prototype.readSegment),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.ENVELOPE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.PATCHES_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.SEGMENTS_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LineStringSegment': makeArrayExtender(\r\n      GML3.prototype.readLineStringSegment\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTIPOINT_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTILINESTRING_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lineStringMember': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n    'lineStringMembers': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTIPOLYGON_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.POINTMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.POLYGONMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.RING_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\r\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.RING_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\r\n    'interior': makeChildAppender(GML3.prototype.writeRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.ENVELOPE_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lowerCorner': makeChildAppender(writeStringTextNode),\r\n    'upperCorner': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'surfaceMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n    'polygonMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lineStringMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n    'curveMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.GEOMETRY_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\r\n    'Point': makeChildAppender(GML32.prototype.writePoint),\r\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\r\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiLineString': makeChildAppender(\r\n      GML3.prototype.writeMultiCurveOrLineString\r\n    ),\r\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\r\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiPolygon': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiSurface': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\r\n  },\r\n};\r\n\r\nexport default GML32;\r\n", "/**\r\n * @module ol/format/filter/Filter\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\r\n * Base class for WFS GetFeature filters.\r\n *\r\n * @abstract\r\n */\r\nclass Filter {\r\n  /**\r\n   * @param {!string} tagName The XML tag name for this filter.\r\n   */\r\n  constructor(tagName) {\r\n    /**\r\n     * @private\r\n     * @type {!string}\r\n     */\r\n    this.tagName_ = tagName;\r\n  }\r\n\r\n  /**\r\n   * The XML tag name for a filter.\r\n   * @return {!string} Name.\r\n   */\r\n  getTagName() {\r\n    return this.tagName_;\r\n  }\r\n}\r\n\r\nexport default Filter;\r\n", "/**\r\n * @module ol/format/filter/LogicalNary\r\n */\r\nimport Filter from './Filter.js';\r\nimport {assert} from '../../asserts.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\r\n * Base class for WFS GetFeature n-ary logical filters.\r\n *\r\n * @abstract\r\n */\r\nclass LogicalNary extends Filter {\r\n  /**\r\n   * @param {!string} tagName The XML tag name for this filter.\r\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\r\n   */\r\n  constructor(tagName, conditions) {\r\n    super(tagName);\r\n\r\n    /**\r\n     * @type {Array<import(\"./Filter.js\").default>}\r\n     */\r\n    this.conditions = conditions;\r\n    assert(this.conditions.length >= 2, 'At least 2 conditions are required');\r\n  }\r\n}\r\n\r\nexport default LogicalNary;\r\n", "/**\r\n * @module ol/format/filter/And\r\n */\r\nimport LogicalNary from './LogicalNary.js';\r\n\r\n/**\r\n * @classdesc\r\n * Represents a logical `<And>` operator between two or more filter conditions.\r\n *\r\n * @abstract\r\n */\r\nclass And extends LogicalNary {\r\n  /**\r\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\r\n   */\r\n  constructor(conditions) {\r\n    super('And', Array.prototype.slice.call(arguments));\r\n  }\r\n}\r\n\r\nexport default And;\r\n", "/**\r\n * @module ol/format/filter/Bbox\r\n */\r\nimport Filter from './Filter.js';\r\n\r\n/**\r\n * @classdesc\r\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\r\n * intersects a fixed bounding box\r\n *\r\n * @api\r\n */\r\nclass Bbox extends Filter {\r\n  /**\r\n   * @param {!string} geometryName Geometry name to use.\r\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {string} [srsName] SRS name. No srsName attribute will be set\r\n   * on geometries when this is not provided.\r\n   */\r\n  constructor(geometryName, extent, srsName) {\r\n    super('BBOX');\r\n\r\n    /**\r\n     * @type {!string}\r\n     */\r\n    this.geometryName = geometryName;\r\n\r\n    /**\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.extent = extent;\r\n    if (extent.length !== 4) {\r\n      throw new Error(\r\n        'Expected an extent with four values ([minX, minY, maxX, maxY])'\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @type {string|undefined}\r\n     */\r\n    this.srsName = srsName;\r\n  }\r\n}\r\n\r\nexport default Bbox;\r\n", "/**\r\n * @module ol/format/filter\r\n */\r\nimport And from './filter/And.js';\r\nimport Bbox from './filter/Bbox.js';\r\nimport Contains from './filter/Contains.js';\r\nimport DWithin from './filter/DWithin.js';\r\nimport Disjoint from './filter/Disjoint.js';\r\nimport During from './filter/During.js';\r\nimport EqualTo from './filter/EqualTo.js';\r\nimport GreaterThan from './filter/GreaterThan.js';\r\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\r\nimport Intersects from './filter/Intersects.js';\r\nimport IsBetween from './filter/IsBetween.js';\r\nimport IsLike from './filter/IsLike.js';\r\nimport IsNull from './filter/IsNull.js';\r\nimport LessThan from './filter/LessThan.js';\r\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\r\nimport Not from './filter/Not.js';\r\nimport NotEqualTo from './filter/NotEqualTo.js';\r\nimport Or from './filter/Or.js';\r\nimport ResourceId from './filter/ResourceId.js';\r\nimport Within from './filter/Within.js';\r\n\r\n/**\r\n * Create a logical `<And>` operator between two or more filter conditions.\r\n *\r\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\r\n * @return {!And} `<And>` operator.\r\n * @api\r\n */\r\nexport function and(conditions) {\r\n  const params = [null].concat(Array.prototype.slice.call(arguments));\r\n  return new (Function.prototype.bind.apply(And, params))();\r\n}\r\n\r\n/**\r\n * Create a logical `<Or>` operator between two or more filter conditions.\r\n *\r\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\r\n * @return {!Or} `<Or>` operator.\r\n * @api\r\n */\r\nexport function or(conditions) {\r\n  const params = [null].concat(Array.prototype.slice.call(arguments));\r\n  return new (Function.prototype.bind.apply(Or, params))();\r\n}\r\n\r\n/**\r\n * Represents a logical `<Not>` operator for a filter condition.\r\n *\r\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\r\n * @return {!Not} `<Not>` operator.\r\n * @api\r\n */\r\nexport function not(condition) {\r\n  return new Not(condition);\r\n}\r\n\r\n/**\r\n * Create a `<BBOX>` operator to test whether a geometry-valued property\r\n * intersects a fixed bounding box\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../extent.js\").Extent} extent Extent.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Bbox} `<BBOX>` operator.\r\n * @api\r\n */\r\nexport function bbox(geometryName, extent, srsName) {\r\n  return new Bbox(geometryName, extent, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Contains>` operator to test whether a geometry-valued property\r\n * contains a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Contains} `<Contains>` operator.\r\n * @api\r\n */\r\nexport function contains(geometryName, geometry, srsName) {\r\n  return new Contains(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Intersects>` operator to test whether a geometry-valued property\r\n * intersects a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Intersects} `<Intersects>` operator.\r\n * @api\r\n */\r\nexport function intersects(geometryName, geometry, srsName) {\r\n  return new Intersects(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\r\n * is disjoint to a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Disjoint} `<Disjoint>` operator.\r\n * @api\r\n */\r\nexport function disjoint(geometryName, geometry, srsName) {\r\n  return new Disjoint(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Within>` operator to test whether a geometry-valued property\r\n * is within a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Within} `<Within>` operator.\r\n * @api\r\n */\r\nexport function within(geometryName, geometry, srsName) {\r\n  return new Within(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<DWithin>` operator to test whether a geometry-valued property\r\n * is within a distance to a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {!number} distance Distance.\r\n * @param {!string} unit Unit.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!DWithin} `<DWithin>` operator.\r\n * @api\r\n */\r\nexport function dwithin(geometryName, geometry, distance, unit, srsName) {\r\n  return new DWithin(geometryName, geometry, distance, unit, srsName);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!(string|number)} expression The value to compare.\r\n * @param {boolean} [matchCase] Case-sensitive?\r\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\r\n * @api\r\n */\r\nexport function equalTo(propertyName, expression, matchCase) {\r\n  return new EqualTo(propertyName, expression, matchCase);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!(string|number)} expression The value to compare.\r\n * @param {boolean} [matchCase] Case-sensitive?\r\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\r\n * @api\r\n */\r\nexport function notEqualTo(propertyName, expression, matchCase) {\r\n  return new NotEqualTo(propertyName, expression, matchCase);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsLessThan>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\r\n * @api\r\n */\r\nexport function lessThan(propertyName, expression) {\r\n  return new LessThan(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\r\n * @api\r\n */\r\nexport function lessThanOrEqualTo(propertyName, expression) {\r\n  return new LessThanOrEqualTo(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\r\n * @api\r\n */\r\nexport function greaterThan(propertyName, expression) {\r\n  return new GreaterThan(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\r\n * @api\r\n */\r\nexport function greaterThanOrEqualTo(propertyName, expression) {\r\n  return new GreaterThanOrEqualTo(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\r\n * is null.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @return {!IsNull} `<PropertyIsNull>` operator.\r\n * @api\r\n */\r\nexport function isNull(propertyName) {\r\n  return new IsNull(propertyName);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\r\n * value lies within a range given by a lower and upper bound (inclusive).\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} lowerBoundary The lower bound of the range.\r\n * @param {!number} upperBoundary The upper bound of the range.\r\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\r\n * @api\r\n */\r\nexport function between(propertyName, lowerBoundary, upperBoundary) {\r\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\r\n}\r\n\r\n/**\r\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\r\n * value against a text pattern.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!string} pattern Text pattern.\r\n * @param {string} [wildCard] Pattern character which matches any sequence of\r\n *    zero or more string characters. Default is '*'.\r\n * @param {string} [singleChar] pattern character which matches any single\r\n *    string character. Default is '.'.\r\n * @param {string} [escapeChar] Escape character which can be used to escape\r\n *    the pattern characters. Default is '!'.\r\n * @param {boolean} [matchCase] Case-sensitive?\r\n * @return {!IsLike} `<PropertyIsLike>` operator.\r\n * @api\r\n */\r\nexport function like(\r\n  propertyName,\r\n  pattern,\r\n  wildCard,\r\n  singleChar,\r\n  escapeChar,\r\n  matchCase\r\n) {\r\n  return new IsLike(\r\n    propertyName,\r\n    pattern,\r\n    wildCard,\r\n    singleChar,\r\n    escapeChar,\r\n    matchCase\r\n  );\r\n}\r\n\r\n/**\r\n * Create a `<During>` temporal operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!string} begin The begin date in ISO-8601 format.\r\n * @param {!string} end The end date in ISO-8601 format.\r\n * @return {!During} `<During>` operator.\r\n * @api\r\n */\r\nexport function during(propertyName, begin, end) {\r\n  return new During(propertyName, begin, end);\r\n}\r\n\r\nexport function resourceId(rid) {\r\n  return new ResourceId(rid);\r\n}\r\n", "/**\r\n * @module ol/format/WFS\r\n */\r\nimport GML2 from './GML2.js';\r\nimport GML3 from './GML3.js';\r\nimport GML32 from './GML32.js';\r\nimport GMLBase, {GMLNS} from './GMLBase.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  isDocument,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeObjectPropertySetter,\r\n  makeSimpleNodeFactory,\r\n  parse,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\r\nimport {assert} from '../asserts.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  readNonNegativeIntegerString,\r\n  readPositiveInteger,\r\n  writeStringTextNode,\r\n} from './xsd.js';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst FEATURE_COLLECTION_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'boundedBy': makeObjectPropertySetter(\r\n      GMLBase.prototype.readExtentElement,\r\n      'bounds'\r\n    ),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst TRANSACTION_SUMMARY_PARSERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst TRANSACTION_RESPONSE_PARSERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'TransactionSummary': makeObjectPropertySetter(\r\n      readTransactionSummary,\r\n      'transactionSummary'\r\n    ),\r\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'TransactionSummary': makeObjectPropertySetter(\r\n      readTransactionSummary,\r\n      'transactionSummary'\r\n    ),\r\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nconst QUERY_SERIALIZERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'PropertyName': makeChildAppender(writeStringTextNode),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'PropertyName': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nconst TRANSACTION_SERIALIZERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'Insert': makeChildAppender(writeFeature),\r\n    'Update': makeChildAppender(writeUpdate),\r\n    'Delete': makeChildAppender(writeDelete),\r\n    'Property': makeChildAppender(writeProperty),\r\n    'Native': makeChildAppender(writeNative),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'Insert': makeChildAppender(writeFeature),\r\n    'Update': makeChildAppender(writeUpdate),\r\n    'Delete': makeChildAppender(writeDelete),\r\n    'Property': makeChildAppender(writeProperty),\r\n    'Native': makeChildAppender(writeNative),\r\n  },\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\r\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\r\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\r\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\r\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\r\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteGetFeatureOptions\r\n * @property {string} featureNS The namespace URI used for features.\r\n * @property {string} featurePrefix The prefix for the feature namespace.\r\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\r\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\r\n * ignored.).\r\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\r\n * geometries when this is not provided.\r\n * @property {string} [handle] Handle.\r\n * @property {string} [outputFormat] Output format.\r\n * @property {number} [maxFeatures] Maximum number of features to fetch.\r\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\r\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\r\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\r\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\r\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\r\n * @property {number} [count] Number of features to retrieve when paging. This is a\r\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\r\n * Web Feature Services have repurposed `maxfeatures` instead.\r\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\r\n * option must be set.\r\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\r\n * {@link module:ol/format/filter} for more information.\r\n * @property {string} [resultType] Indicates what response should be returned,\r\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FeatureType\r\n * @property {!string} name The feature type name.\r\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\r\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteTransactionOptions\r\n * @property {string} featureNS The namespace URI used for features.\r\n * @property {string} featurePrefix The prefix for the feature namespace.\r\n * @property {string} featureType The feature type name.\r\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\r\n * geometries when this is not provided.\r\n * @property {string} [handle] Handle.\r\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\r\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\r\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\r\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\r\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\r\n */\r\n\r\n/**\r\n * Number of features; bounds/extent.\r\n * @typedef {Object} FeatureCollectionMetadata\r\n * @property {number} numberOfFeatures NumberOfFeatures.\r\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\r\n */\r\n\r\n/**\r\n * Total deleted; total inserted; total updated; array of insert ids.\r\n * @typedef {Object} TransactionResponse\r\n * @property {number} totalDeleted TotalDeleted.\r\n * @property {number} totalInserted TotalInserted.\r\n * @property {number} totalUpdated TotalUpdated.\r\n * @property {Array<string>} insertIds InsertIds.\r\n */\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst FEATURE_PREFIX = 'feature';\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst OGCNS = {\r\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\r\n  '1.1.0': 'http://www.opengis.net/ogc',\r\n  '1.0.0': 'http://www.opengis.net/ogc',\r\n};\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst WFSNS = {\r\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\r\n  '1.1.0': 'http://www.opengis.net/wfs',\r\n  '1.0.0': 'http://www.opengis.net/wfs',\r\n};\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst FESNS = {\r\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\r\n  '1.1.0': 'http://www.opengis.net/fes',\r\n  '1.0.0': 'http://www.opengis.net/fes',\r\n};\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst SCHEMA_LOCATIONS = {\r\n  '2.0.0':\r\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\r\n  '1.1.0':\r\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\r\n  '1.0.0':\r\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\r\n};\r\n\r\n/**\r\n * @type {Object<string, object>}\r\n */\r\nconst GML_FORMATS = {\r\n  '2.0.0': GML32,\r\n  '1.1.0': GML3,\r\n  '1.0.0': GML2,\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst DEFAULT_VERSION = '1.1.0';\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the WFS format.\r\n * By default, supports WFS version 1.1.0. You can pass a GML format\r\n * as option to override the default.\r\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\r\n *\r\n * @api\r\n */\r\nclass WFS extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>|string|undefined}\r\n     */\r\n    this.featureType_ = options.featureType;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, string>|string|undefined}\r\n     */\r\n    this.featureNS_ = options.featureNS;\r\n\r\n    /**\r\n     * @private\r\n     * @type {GMLBase}\r\n     */\r\n    this.gmlFormat_ = options.gmlFormat\r\n      ? options.gmlFormat\r\n      : new GML_FORMATS[this.version_]();\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation_ = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : SCHEMA_LOCATIONS[this.version_];\r\n  }\r\n\r\n  /**\r\n   * @return {Array<string>|string|undefined} featureType\r\n   */\r\n  getFeatureType() {\r\n    return this.featureType_;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\r\n   */\r\n  setFeatureType(featureType) {\r\n    this.featureType_ = featureType;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    const context = {\r\n      node,\r\n    };\r\n    Object.assign(context, {\r\n      'featureType': this.featureType_,\r\n      'featureNS': this.featureNS_,\r\n    });\r\n\r\n    Object.assign(context, this.getReadOptions(node, options ? options : {}));\r\n    const objectStack = [context];\r\n    let featuresNS;\r\n    if (this.version_ === '2.0.0') {\r\n      featuresNS = FEATURE_COLLECTION_PARSERS;\r\n    } else {\r\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\r\n    }\r\n    let features = pushParseAndPop(\r\n      [],\r\n      featuresNS,\r\n      node,\r\n      objectStack,\r\n      this.gmlFormat_\r\n    );\r\n    if (!features) {\r\n      features = [];\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Read transaction response of the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {TransactionResponse|undefined} Transaction response.\r\n   * @api\r\n   */\r\n  readTransactionResponse(source) {\r\n    if (!source) {\r\n      return undefined;\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readTransactionResponseFromDocument(doc);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readTransactionResponseFromDocument(\r\n        /** @type {Document} */ (source)\r\n      );\r\n    }\r\n    return this.readTransactionResponseFromNode(\r\n      /** @type {Element} */ (source)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Read feature collection metadata of the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {FeatureCollectionMetadata|undefined}\r\n   *     FeatureCollection metadata.\r\n   * @api\r\n   */\r\n  readFeatureCollectionMetadata(source) {\r\n    if (!source) {\r\n      return undefined;\r\n    }\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeatureCollectionMetadataFromDocument(doc);\r\n    }\r\n    if (isDocument(source)) {\r\n      return this.readFeatureCollectionMetadataFromDocument(\r\n        /** @type {Document} */ (source)\r\n      );\r\n    }\r\n    return this.readFeatureCollectionMetadataFromNode(\r\n      /** @type {Element} */ (source)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {FeatureCollectionMetadata|undefined}\r\n   *     FeatureCollection metadata.\r\n   */\r\n  readFeatureCollectionMetadataFromDocument(doc) {\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readFeatureCollectionMetadataFromNode(\r\n          /** @type {Element} */ (n)\r\n        );\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {FeatureCollectionMetadata|undefined}\r\n   *     FeatureCollection metadata.\r\n   */\r\n  readFeatureCollectionMetadataFromNode(node) {\r\n    const result = {};\r\n    const value = readNonNegativeIntegerString(\r\n      node.getAttribute('numberOfFeatures')\r\n    );\r\n    result['numberOfFeatures'] = value;\r\n    return pushParseAndPop(\r\n      /** @type {FeatureCollectionMetadata} */ (result),\r\n      FEATURE_COLLECTION_PARSERS,\r\n      node,\r\n      [],\r\n      this.gmlFormat_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {TransactionResponse|undefined} Transaction response.\r\n   */\r\n  readTransactionResponseFromDocument(doc) {\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {TransactionResponse|undefined} Transaction response.\r\n   */\r\n  readTransactionResponseFromNode(node) {\r\n    return pushParseAndPop(\r\n      /** @type {TransactionResponse} */ ({}),\r\n      TRANSACTION_RESPONSE_PARSERS,\r\n      node,\r\n      []\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Encode format as WFS `GetFeature` and return the Node.\r\n   *\r\n   * @param {WriteGetFeatureOptions} options Options.\r\n   * @return {Node} Result.\r\n   * @api\r\n   */\r\n  writeGetFeature(options) {\r\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\r\n    node.setAttribute('service', 'WFS');\r\n    node.setAttribute('version', this.version_);\r\n    if (options.handle) {\r\n      node.setAttribute('handle', options.handle);\r\n    }\r\n    if (options.outputFormat) {\r\n      node.setAttribute('outputFormat', options.outputFormat);\r\n    }\r\n    if (options.maxFeatures !== undefined) {\r\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\r\n    }\r\n    if (options.resultType) {\r\n      node.setAttribute('resultType', options.resultType);\r\n    }\r\n    if (options.startIndex !== undefined) {\r\n      node.setAttribute('startIndex', String(options.startIndex));\r\n    }\r\n    if (options.count !== undefined) {\r\n      node.setAttribute('count', String(options.count));\r\n    }\r\n    if (options.viewParams !== undefined) {\r\n      node.setAttribute('viewParams', options.viewParams);\r\n    }\r\n    node.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      this.schemaLocation_\r\n    );\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    const context = {\r\n      node,\r\n    };\r\n    Object.assign(context, {\r\n      'version': this.version_,\r\n      'srsName': options.srsName,\r\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\r\n      'featurePrefix': options.featurePrefix,\r\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\r\n    });\r\n    assert(\r\n      Array.isArray(options.featureTypes),\r\n      '`options.featureTypes` must be an Array'\r\n    );\r\n    if (typeof options.featureTypes[0] === 'string') {\r\n      let filter = options.filter;\r\n      if (options.bbox) {\r\n        assert(\r\n          options.geometryName,\r\n          '`options.geometryName` must also be provided when `options.bbox` is set'\r\n        );\r\n        filter = this.combineBboxAndFilter(\r\n          options.geometryName,\r\n          options.bbox,\r\n          options.srsName,\r\n          filter\r\n        );\r\n      }\r\n      Object.assign(context, {\r\n        'geometryName': options.geometryName,\r\n        'filter': filter,\r\n      });\r\n      writeGetFeature(\r\n        node,\r\n        /** @type {!Array<string>} */ (options.featureTypes),\r\n        [context]\r\n      );\r\n    } else {\r\n      // Write one query node per element in featuresType.\r\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\r\n        const completeFilter = this.combineBboxAndFilter(\r\n          featureType.geometryName,\r\n          featureType.bbox,\r\n          options.srsName,\r\n          options.filter\r\n        );\r\n        Object.assign(context, {\r\n          'geometryName': featureType.geometryName,\r\n          'filter': completeFilter,\r\n        });\r\n        writeGetFeature(node, [featureType.name], [context]);\r\n      });\r\n    }\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Create a bbox filter and combine it with another optional filter.\r\n   *\r\n   * @param {!string} geometryName Geometry name to use.\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {string} [srsName] SRS name. No srsName attribute will be\r\n   *    set on geometries when this is not provided.\r\n   * @param {import(\"./filter/Filter.js\").default} [filter] Filter condition.\r\n   * @return {import(\"./filter/Filter.js\").default} The filter.\r\n   */\r\n  combineBboxAndFilter(geometryName, extent, srsName, filter) {\r\n    const bboxFilter = bboxFilterFn(geometryName, extent, srsName);\r\n    if (filter) {\r\n      // if bbox and filter are both set, combine the two into a single filter\r\n      return andFilterFn(filter, bboxFilter);\r\n    }\r\n    return bboxFilter;\r\n  }\r\n\r\n  /**\r\n   * Encode format as WFS `Transaction` and return the Node.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\r\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\r\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\r\n   * @param {WriteTransactionOptions} options Write options.\r\n   * @return {Node} Result.\r\n   * @api\r\n   */\r\n  writeTransaction(inserts, updates, deletes, options) {\r\n    const objectStack = [];\r\n    const version = options.version ? options.version : this.version_;\r\n    const node = createElementNS(WFSNS[version], 'Transaction');\r\n\r\n    node.setAttribute('service', 'WFS');\r\n    node.setAttribute('version', version);\r\n    let baseObj;\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    if (options) {\r\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\r\n      if (options.handle) {\r\n        node.setAttribute('handle', options.handle);\r\n      }\r\n    }\r\n    node.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      SCHEMA_LOCATIONS[version]\r\n    );\r\n\r\n    const request = createTransactionRequest(node, baseObj, version, options);\r\n    if (inserts) {\r\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\r\n    }\r\n    if (updates) {\r\n      serializeTransactionRequest('Update', updates, objectStack, request);\r\n    }\r\n    if (deletes) {\r\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\r\n    }\r\n    if (options.nativeElements) {\r\n      serializeTransactionRequest(\r\n        'Native',\r\n        options.nativeElements,\r\n        objectStack,\r\n        request\r\n      );\r\n    }\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromDocument(doc) {\r\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromNode(node) {\r\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\r\n      node = node.firstElementChild.firstElementChild;\r\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n        if (\r\n          !(\r\n            n.childNodes.length === 0 ||\r\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\r\n          )\r\n        ) {\r\n          const objectStack = [{}];\r\n          this.gmlFormat_.readGeometryElement(n, objectStack);\r\n          return getProjection(objectStack.pop().srsName);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {*} baseObj Base object.\r\n * @param {string} version Version.\r\n * @param {WriteTransactionOptions} options Options.\r\n * @return {Object} Request object.\r\n */\r\nfunction createTransactionRequest(node, baseObj, version, options) {\r\n  const featurePrefix = options.featurePrefix\r\n    ? options.featurePrefix\r\n    : FEATURE_PREFIX;\r\n  let gmlVersion;\r\n  if (version === '1.0.0') {\r\n    gmlVersion = 2;\r\n  } else if (version === '1.1.0') {\r\n    gmlVersion = 3;\r\n  } else if (version === '2.0.0') {\r\n    gmlVersion = 3.2;\r\n  }\r\n  const obj = Object.assign(\r\n    {node},\r\n    {\r\n      version,\r\n      'featureNS': options.featureNS,\r\n      'featureType': options.featureType,\r\n      'featurePrefix': featurePrefix,\r\n      'gmlVersion': gmlVersion,\r\n      'hasZ': options.hasZ,\r\n      'srsName': options.srsName,\r\n    },\r\n    baseObj\r\n  );\r\n  return obj;\r\n}\r\n\r\n/**\r\n * @param {string} type Request type.\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {Element} request Transaction Request.\r\n */\r\nfunction serializeTransactionRequest(type, features, objectStack, request) {\r\n  pushSerializeAndPop(\r\n    request,\r\n    TRANSACTION_SERIALIZERS,\r\n    makeSimpleNodeFactory(type),\r\n    features,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Transaction Summary.\r\n */\r\nfunction readTransactionSummary(node, objectStack) {\r\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst OGC_FID_PARSERS = {\r\n  'http://www.opengis.net/ogc': {\r\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\r\n      return node.getAttribute('fid');\r\n    }),\r\n  },\r\n  'http://www.opengis.net/ogc/1.1': {\r\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\r\n      return node.getAttribute('fid');\r\n    }),\r\n  },\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction fidParser(node, objectStack) {\r\n  parseNode(OGC_FID_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst INSERT_RESULTS_PARSERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'Feature': fidParser,\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'Feature': fidParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<string>|undefined} Insert results.\r\n */\r\nfunction readInsertResults(node, objectStack) {\r\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeFeature(node, feature, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const featureType = context['featureType'];\r\n  const featureNS = context['featureNS'];\r\n  const gmlVersion = context['gmlVersion'];\r\n  const child = createElementNS(featureNS, featureType);\r\n  node.appendChild(child);\r\n  if (gmlVersion === 2) {\r\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\r\n  } else if (gmlVersion === 3) {\r\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\r\n  } else {\r\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {number|string} fid Feature identifier.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeOgcFidFilter(node, fid, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const version = context['version'];\r\n  const ns = OGCNS[version];\r\n  const filter = createElementNS(ns, 'Filter');\r\n  const child = createElementNS(ns, 'FeatureId');\r\n  filter.appendChild(child);\r\n  child.setAttribute('fid', /** @type {string} */ (fid));\r\n  node.appendChild(filter);\r\n}\r\n\r\n/**\r\n * @param {string|undefined} featurePrefix The prefix of the feature.\r\n * @param {string} featureType The type of the feature.\r\n * @return {string} The value of the typeName property.\r\n */\r\nfunction getTypeName(featurePrefix, featureType) {\r\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\r\n  const prefix = featurePrefix + ':';\r\n  // The featureType already contains the prefix.\r\n  if (featureType.startsWith(prefix)) {\r\n    return featureType;\r\n  }\r\n  return prefix + featureType;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeDelete(node, feature, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  assert(feature.getId() !== undefined, 'Features must have an id set');\r\n  const featureType = context['featureType'];\r\n  const featurePrefix = context['featurePrefix'];\r\n  const featureNS = context['featureNS'];\r\n  const typeName = getTypeName(featurePrefix, featureType);\r\n  node.setAttribute('typeName', typeName);\r\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\r\n  const fid = feature.getId();\r\n  if (fid !== undefined) {\r\n    writeOgcFidFilter(node, fid, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeUpdate(node, feature, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  assert(feature.getId() !== undefined, 'Features must have an id set');\r\n  const version = context['version'];\r\n  const featureType = context['featureType'];\r\n  const featurePrefix = context['featurePrefix'];\r\n  const featureNS = context['featureNS'];\r\n  const typeName = getTypeName(featurePrefix, featureType);\r\n  const geometryName = feature.getGeometryName();\r\n  node.setAttribute('typeName', typeName);\r\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\r\n  const fid = feature.getId();\r\n  if (fid !== undefined) {\r\n    const keys = feature.getKeys();\r\n    const values = [];\r\n    for (let i = 0, ii = keys.length; i < ii; i++) {\r\n      const value = feature.get(keys[i]);\r\n      if (value !== undefined) {\r\n        let name = keys[i];\r\n        if (\r\n          value &&\r\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\r\n        ) {\r\n          name = geometryName;\r\n        }\r\n        values.push({name: name, value: value});\r\n      }\r\n    }\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\r\n        version,\r\n        'gmlVersion': context['gmlVersion'],\r\n        node,\r\n        'hasZ': context['hasZ'],\r\n        'srsName': context['srsName'],\r\n      }),\r\n      TRANSACTION_SERIALIZERS,\r\n      makeSimpleNodeFactory('Property'),\r\n      values,\r\n      objectStack\r\n    );\r\n    writeOgcFidFilter(node, fid, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Object} pair Property name and value.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeProperty(node, pair, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const version = context['version'];\r\n  const ns = WFSNS[version];\r\n  const tagName = version === '2.0.0' ? 'ValueReference' : 'Name';\r\n  const name = createElementNS(ns, tagName);\r\n  const gmlVersion = context['gmlVersion'];\r\n  node.appendChild(name);\r\n  writeStringTextNode(name, pair.name);\r\n  if (pair.value !== undefined && pair.value !== null) {\r\n    const value = createElementNS(ns, 'Value');\r\n    node.appendChild(value);\r\n    if (\r\n      pair.value &&\r\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\r\n        'function'\r\n    ) {\r\n      if (gmlVersion === 2) {\r\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\r\n      } else if (gmlVersion === 3) {\r\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\r\n      } else {\r\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\r\n      }\r\n    } else {\r\n      writeStringTextNode(value, pair.value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeNative(node, nativeElement, objectStack) {\r\n  if (nativeElement.vendorId) {\r\n    node.setAttribute('vendorId', nativeElement.vendorId);\r\n  }\r\n  if (nativeElement.safeToIgnore !== undefined) {\r\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\r\n  }\r\n  if (nativeElement.value !== undefined) {\r\n    writeStringTextNode(node, nativeElement.value);\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nconst GETFEATURE_SERIALIZERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'Query': makeChildAppender(writeQuery),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'Query': makeChildAppender(writeQuery),\r\n  },\r\n  'http://www.opengis.net/ogc': {\r\n    'During': makeChildAppender(writeDuringFilter),\r\n    'And': makeChildAppender(writeLogicalFilter),\r\n    'Or': makeChildAppender(writeLogicalFilter),\r\n    'Not': makeChildAppender(writeNotFilter),\r\n    'BBOX': makeChildAppender(writeBboxFilter),\r\n    'Contains': makeChildAppender(writeSpatialFilter),\r\n    'Intersects': makeChildAppender(writeSpatialFilter),\r\n    'Within': makeChildAppender(writeSpatialFilter),\r\n    'DWithin': makeChildAppender(writeDWithinFilter),\r\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\r\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\r\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\r\n  },\r\n  'http://www.opengis.net/fes/2.0': {\r\n    'During': makeChildAppender(writeDuringFilter),\r\n    'And': makeChildAppender(writeLogicalFilter),\r\n    'Or': makeChildAppender(writeLogicalFilter),\r\n    'Not': makeChildAppender(writeNotFilter),\r\n    'BBOX': makeChildAppender(writeBboxFilter),\r\n    'Contains': makeChildAppender(writeSpatialFilter),\r\n    'Disjoint': makeChildAppender(writeSpatialFilter),\r\n    'Intersects': makeChildAppender(writeSpatialFilter),\r\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\r\n    'Within': makeChildAppender(writeSpatialFilter),\r\n    'DWithin': makeChildAppender(writeDWithinFilter),\r\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\r\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\r\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\r\n  },\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {string} featureType Feature type.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeQuery(node, featureType, objectStack) {\r\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const version = context['version'];\r\n  const featurePrefix = context['featurePrefix'];\r\n  const featureNS = context['featureNS'];\r\n  const propertyNames = context['propertyNames'];\r\n  const srsName = context['srsName'];\r\n  let typeName;\r\n  // If feature prefix is not defined, we must not use the default prefix.\r\n  if (featurePrefix) {\r\n    typeName = getTypeName(featurePrefix, featureType);\r\n  } else {\r\n    typeName = featureType;\r\n  }\r\n  let typeNameAttr;\r\n  if (version === '2.0.0') {\r\n    typeNameAttr = 'typeNames';\r\n  } else {\r\n    typeNameAttr = 'typeName';\r\n  }\r\n  node.setAttribute(typeNameAttr, typeName);\r\n  if (srsName) {\r\n    node.setAttribute('srsName', srsName);\r\n  }\r\n  if (featureNS) {\r\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\r\n  }\r\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\r\n    Object.assign({}, context)\r\n  );\r\n  item.node = node;\r\n  pushSerializeAndPop(\r\n    item,\r\n    QUERY_SERIALIZERS,\r\n    makeSimpleNodeFactory('PropertyName'),\r\n    propertyNames,\r\n    objectStack\r\n  );\r\n  const filter = context['filter'];\r\n  if (filter) {\r\n    const child = createElementNS(getFilterNS(version), 'Filter');\r\n    node.appendChild(child);\r\n    writeFilterCondition(child, filter, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeFilterCondition(node, filter, objectStack) {\r\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const item = {node};\r\n  Object.assign(item, {context});\r\n  pushSerializeAndPop(\r\n    item,\r\n    GETFEATURE_SERIALIZERS,\r\n    makeSimpleNodeFactory(filter.getTagName()),\r\n    [filter],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeBboxFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  parent['srsName'] = filter.srsName;\r\n  const format = GML_FORMATS[version];\r\n\r\n  writePropertyName(version, node, filter.geometryName);\r\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Element.\r\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeResourceIdFilter(node, filter, objectStack) {\r\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeSpatialFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  parent['srsName'] = filter.srsName;\r\n  const format = GML_FORMATS[version];\r\n\r\n  writePropertyName(version, node, filter.geometryName);\r\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeDWithinFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  writeSpatialFilter(node, filter, objectStack);\r\n  const distance = createElementNS(getFilterNS(version), 'Distance');\r\n  writeStringTextNode(distance, filter.distance.toString());\r\n  if (version === '2.0.0') {\r\n    distance.setAttribute('uom', filter.unit);\r\n  } else {\r\n    distance.setAttribute('units', filter.unit);\r\n  }\r\n  node.appendChild(distance);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/During.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeDuringFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n\r\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\r\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\r\n\r\n  node.appendChild(timePeriod);\r\n\r\n  const begin = createElementNS(GMLNS, 'begin');\r\n  timePeriod.appendChild(begin);\r\n  writeTimeInstant(begin, filter.begin);\r\n\r\n  const end = createElementNS(GMLNS, 'end');\r\n  timePeriod.appendChild(end);\r\n  writeTimeInstant(end, filter.end);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeLogicalFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const item = {node};\r\n  Object.assign(item, {context});\r\n  const conditions = filter.conditions;\r\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\r\n    const condition = conditions[i];\r\n    pushSerializeAndPop(\r\n      item,\r\n      GETFEATURE_SERIALIZERS,\r\n      makeSimpleNodeFactory(condition.getTagName()),\r\n      [condition],\r\n      objectStack\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/Not.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeNotFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const item = {node};\r\n  Object.assign(item, {context});\r\n  const condition = filter.condition;\r\n  pushSerializeAndPop(\r\n    item,\r\n    GETFEATURE_SERIALIZERS,\r\n    makeSimpleNodeFactory(condition.getTagName()),\r\n    [condition],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeComparisonFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  if (filter.matchCase !== undefined) {\r\n    node.setAttribute('matchCase', filter.matchCase.toString());\r\n  }\r\n  writePropertyName(version, node, filter.propertyName);\r\n  writeLiteral(version, node, '' + filter.expression);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeIsNullFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  writePropertyName(version, node, filter.propertyName);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeIsBetweenFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  const ns = getFilterNS(version);\r\n\r\n  writePropertyName(version, node, filter.propertyName);\r\n\r\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\r\n  node.appendChild(lowerBoundary);\r\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\r\n\r\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\r\n  node.appendChild(upperBoundary);\r\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeIsLikeFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  node.setAttribute('wildCard', filter.wildCard);\r\n  node.setAttribute('singleChar', filter.singleChar);\r\n  node.setAttribute('escapeChar', filter.escapeChar);\r\n  if (filter.matchCase !== undefined) {\r\n    node.setAttribute('matchCase', filter.matchCase.toString());\r\n  }\r\n  writePropertyName(version, node, filter.propertyName);\r\n  writeLiteral(version, node, '' + filter.pattern);\r\n}\r\n\r\n/**\r\n * @param {string} ns Namespace.\r\n * @param {string} tagName Tag name.\r\n * @param {Node} node Node.\r\n * @param {string} value Value.\r\n */\r\nfunction writeExpression(ns, tagName, node, value) {\r\n  const property = createElementNS(ns, tagName);\r\n  writeStringTextNode(property, value);\r\n  node.appendChild(property);\r\n}\r\n\r\n/**\r\n * @param {string} version Version.\r\n * @param {Node} node Node.\r\n * @param {string} value PropertyName value.\r\n */\r\nfunction writeLiteral(version, node, value) {\r\n  writeExpression(getFilterNS(version), 'Literal', node, value);\r\n}\r\n\r\n/**\r\n * @param {string} version Version.\r\n * @param {Node} node Node.\r\n * @param {string} value PropertyName value.\r\n */\r\nfunction writePropertyName(version, node, value) {\r\n  if (version === '2.0.0') {\r\n    writeExpression(FESNS[version], 'ValueReference', node, value);\r\n  } else {\r\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {string} time PropertyName value.\r\n */\r\nfunction writeTimeInstant(node, time) {\r\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\r\n  node.appendChild(timeInstant);\r\n\r\n  const timePosition = createElementNS(GMLNS, 'timePosition');\r\n  timeInstant.appendChild(timePosition);\r\n  writeStringTextNode(timePosition, time);\r\n}\r\n\r\n/**\r\n * Encode filter as WFS `Filter` and return the Node.\r\n *\r\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\r\n * @param {string} version WFS version. If not provided defaults to '1.1.0'\r\n * @return {Node} Result.\r\n * @api\r\n */\r\nexport function writeFilter(filter, version) {\r\n  version = version || '1.1.0';\r\n  const child = createElementNS(getFilterNS(version), 'Filter');\r\n  const context = {\r\n    node: child,\r\n  };\r\n  Object.assign(context, {\r\n    'version': version,\r\n    'filter': filter,\r\n  });\r\n  writeFilterCondition(child, filter, [context]);\r\n  return child;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<string>} featureTypes Feature types.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeGetFeature(node, featureTypes, objectStack) {\r\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\r\n    Object.assign({}, context)\r\n  );\r\n  item.node = node;\r\n  pushSerializeAndPop(\r\n    item,\r\n    GETFEATURE_SERIALIZERS,\r\n    makeSimpleNodeFactory('Query'),\r\n    featureTypes,\r\n    objectStack\r\n  );\r\n}\r\n\r\nfunction getFilterNS(version) {\r\n  let ns;\r\n  if (version === '2.0.0') {\r\n    ns = FESNS[version];\r\n  } else {\r\n    ns = OGCNS[version];\r\n  }\r\n  return ns;\r\n}\r\n\r\nexport default WFS;\r\n", "/**\r\n * @module ol/format/WKB\r\n */\r\nimport Feature from '../Feature.js';\r\nimport FeatureFormat, {transformGeometryWithOptions} from './Feature.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\r\n\r\n// WKB spec: https://www.ogc.org/standards/sfa\r\n// EWKB spec: https://raw.githubusercontent.com/postgis/postgis/2.1.0/doc/ZMSgeoms.txt\r\n\r\n/**\r\n * @const\r\n * @enum {number}\r\n */\r\nconst WKBGeometryType = {\r\n  POINT: 1,\r\n  LINE_STRING: 2,\r\n  POLYGON: 3,\r\n  MULTI_POINT: 4,\r\n  MULTI_LINE_STRING: 5,\r\n  MULTI_POLYGON: 6,\r\n  GEOMETRY_COLLECTION: 7,\r\n\r\n  /*\r\n  CIRCULAR_STRING: 8,\r\n  COMPOUND_CURVE: 9,\r\n  CURVE_POLYGON: 10,\r\n\r\n  MULTI_CURVE: 11,\r\n  MULTI_SURFACE: 12,\r\n  CURVE: 13,\r\n  SURFACE: 14,\r\n  */\r\n\r\n  POLYHEDRAL_SURFACE: 15,\r\n  TIN: 16,\r\n  TRIANGLE: 17,\r\n};\r\n\r\nclass WkbReader {\r\n  /**\r\n   * @param {DataView} view source to read\r\n   */\r\n  constructor(view) {\r\n    /** @private */\r\n    this.view_ = view;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.pos_ = 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.initialized_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.isLittleEndian_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasZ_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasM_ = false;\r\n\r\n    /**\r\n     * @type {number|null}\r\n     * @private\r\n     */\r\n    this.srid_ = null;\r\n\r\n    /**\r\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\r\n     * @private\r\n     */\r\n    this.layout_ = 'XY';\r\n  }\r\n\r\n  /**\r\n   * @return {number} value\r\n   */\r\n  readUint8() {\r\n    return this.view_.getUint8(this.pos_++);\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\r\n   * @return {number} value\r\n   */\r\n  readUint32(isLittleEndian) {\r\n    return this.view_.getUint32(\r\n      (this.pos_ += 4) - 4,\r\n      isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\r\n   * @return {number} value\r\n   */\r\n  readDouble(isLittleEndian) {\r\n    return this.view_.getFloat64(\r\n      (this.pos_ += 8) - 8,\r\n      isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {import('../coordinate.js').Coordinate} coords for Point\r\n   */\r\n  readPoint() {\r\n    /** @type import('../coordinate.js').Coordinate */\r\n    const coords = [];\r\n\r\n    coords.push(this.readDouble());\r\n    coords.push(this.readDouble());\r\n    if (this.hasZ_) {\r\n      coords.push(this.readDouble());\r\n    }\r\n    if (this.hasM_) {\r\n      coords.push(this.readDouble());\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for LineString / LinearRing\r\n   */\r\n  readLineString() {\r\n    const numPoints = this.readUint32();\r\n\r\n    /** @type Array<import('../coordinate.js').Coordinate> */\r\n    const coords = [];\r\n    for (let i = 0; i < numPoints; i++) {\r\n      coords.push(this.readPoint());\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for Polygon like\r\n   */\r\n  readPolygon() {\r\n    const numRings = this.readUint32();\r\n\r\n    /** @type Array<Array<import('../coordinate.js').Coordinate>> */\r\n    const rings = [];\r\n    for (let i = 0; i < numRings; i++) {\r\n      rings.push(this.readLineString()); // as a LinearRing\r\n    }\r\n\r\n    return rings;\r\n  }\r\n\r\n  /**\r\n   * @param {number} [expectedTypeId] Expected WKB Type ID\r\n   * @return {number} WKB Type ID\r\n   */\r\n  readWkbHeader(expectedTypeId) {\r\n    const byteOrder = this.readUint8();\r\n    const isLittleEndian = byteOrder > 0;\r\n\r\n    const wkbType = this.readUint32(isLittleEndian);\r\n    const wkbTypeThousandth = Math.floor((wkbType & 0x0fffffff) / 1000);\r\n    const hasZ =\r\n      Boolean(wkbType & 0x80000000) ||\r\n      wkbTypeThousandth === 1 ||\r\n      wkbTypeThousandth === 3;\r\n    const hasM =\r\n      Boolean(wkbType & 0x40000000) ||\r\n      wkbTypeThousandth === 2 ||\r\n      wkbTypeThousandth === 3;\r\n    const hasSRID = Boolean(wkbType & 0x20000000);\r\n    const typeId = (wkbType & 0x0fffffff) % 1000; // Assume 1000 is an upper limit for type ID\r\n    const layout = /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */ (\r\n      ['XY', hasZ ? 'Z' : '', hasM ? 'M' : ''].join('')\r\n    );\r\n\r\n    const srid = hasSRID ? this.readUint32(isLittleEndian) : null;\r\n\r\n    if (expectedTypeId !== undefined && expectedTypeId !== typeId) {\r\n      throw new Error('Unexpected WKB geometry type ' + typeId);\r\n    }\r\n\r\n    if (this.initialized_) {\r\n      // sanity checks\r\n      if (this.isLittleEndian_ !== isLittleEndian) {\r\n        throw new Error('Inconsistent endian');\r\n      }\r\n      if (this.layout_ !== layout) {\r\n        throw new Error('Inconsistent geometry layout');\r\n      }\r\n      if (srid && this.srid_ !== srid) {\r\n        throw new Error('Inconsistent coordinate system (SRID)');\r\n      }\r\n    } else {\r\n      this.isLittleEndian_ = isLittleEndian;\r\n      this.hasZ_ = hasZ;\r\n      this.hasM_ = hasM;\r\n      this.layout_ = layout;\r\n      this.srid_ = srid;\r\n      this.initialized_ = true;\r\n    }\r\n\r\n    return typeId;\r\n  }\r\n\r\n  /**\r\n   * @param {number} typeId WKB Type ID\r\n   * @return {any} values read\r\n   */\r\n  readWkbPayload(typeId) {\r\n    switch (typeId) {\r\n      case WKBGeometryType.POINT:\r\n        return this.readPoint();\r\n\r\n      case WKBGeometryType.LINE_STRING:\r\n        return this.readLineString();\r\n\r\n      case WKBGeometryType.POLYGON:\r\n      case WKBGeometryType.TRIANGLE:\r\n        return this.readPolygon();\r\n\r\n      case WKBGeometryType.MULTI_POINT:\r\n        return this.readMultiPoint();\r\n\r\n      case WKBGeometryType.MULTI_LINE_STRING:\r\n        return this.readMultiLineString();\r\n\r\n      case WKBGeometryType.MULTI_POLYGON:\r\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\r\n      case WKBGeometryType.TIN:\r\n        return this.readMultiPolygon();\r\n\r\n      case WKBGeometryType.GEOMETRY_COLLECTION:\r\n        return this.readGeometryCollection();\r\n\r\n      default:\r\n        throw new Error(\r\n          'Unsupported WKB geometry type ' + typeId + ' is found'\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} expectedTypeId Expected WKB Type ID\r\n   * @return {any} values read\r\n   */\r\n  readWkbBlock(expectedTypeId) {\r\n    return this.readWkbPayload(this.readWkbHeader(expectedTypeId));\r\n  }\r\n\r\n  /**\r\n   * @param {Function} reader reader function for each item\r\n   * @param {number} [expectedTypeId] Expected WKB Type ID\r\n   * @return {any} values read\r\n   */\r\n  readWkbCollection(reader, expectedTypeId) {\r\n    const num = this.readUint32();\r\n\r\n    const items = [];\r\n    for (let i = 0; i < num; i++) {\r\n      const result = reader.call(this, expectedTypeId);\r\n      if (result) {\r\n        items.push(result);\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for MultiPoint\r\n   */\r\n  readMultiPoint() {\r\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POINT);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for MultiLineString like\r\n   */\r\n  readMultiLineString() {\r\n    return this.readWkbCollection(\r\n      this.readWkbBlock,\r\n      WKBGeometryType.LINE_STRING\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords for MultiPolygon like\r\n   */\r\n  readMultiPolygon() {\r\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POLYGON);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import('../geom/Geometry.js').default>} array of geometries\r\n   */\r\n  readGeometryCollection() {\r\n    return this.readWkbCollection(this.readGeometry);\r\n  }\r\n\r\n  /**\r\n   * @return {import('../geom/Geometry.js').default} geometry\r\n   */\r\n  readGeometry() {\r\n    const typeId = this.readWkbHeader();\r\n    const result = this.readWkbPayload(typeId);\r\n\r\n    switch (typeId) {\r\n      case WKBGeometryType.POINT:\r\n        return new Point(\r\n          /** @type {import('../coordinate.js').Coordinate} */ (result),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.LINE_STRING:\r\n        return new LineString(\r\n          /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.POLYGON:\r\n      case WKBGeometryType.TRIANGLE:\r\n        return new Polygon(\r\n          /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (\r\n            result\r\n          ),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.MULTI_POINT:\r\n        return new MultiPoint(\r\n          /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.MULTI_LINE_STRING:\r\n        return new MultiLineString(\r\n          /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (\r\n            result\r\n          ),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.MULTI_POLYGON:\r\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\r\n      case WKBGeometryType.TIN:\r\n        return new MultiPolygon(\r\n          /** @type {Array<Array<Array<import('../coordinate.js').Coordinate>>>} */ (\r\n            result\r\n          ),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.GEOMETRY_COLLECTION:\r\n        return new GeometryCollection(\r\n          /** @type {Array<import('../geom/Geometry.js').default>} */ (result)\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {number|null} SRID in the EWKB. `null` if not defined.\r\n   */\r\n  getSrid() {\r\n    return this.srid_;\r\n  }\r\n}\r\n\r\nclass WkbWriter {\r\n  /**\r\n   * @type {Object}\r\n   * @property {string} [layout] geometryLayout\r\n   * @property {boolean} [littleEndian=true] littleEndian\r\n   * @property {boolean} [ewkb=true] Whether writes in EWKB format\r\n   * @property {Object} [nodata] NoData value for each axes\r\n   * @param {Object} opts options\r\n   */\r\n  constructor(opts) {\r\n    opts = opts || {};\r\n\r\n    /** @type {string} */\r\n    this.layout_ = opts.layout;\r\n    this.isLittleEndian_ = opts.littleEndian !== false;\r\n\r\n    this.isEWKB_ = opts.ewkb !== false;\r\n\r\n    /** @type {Array<Array<number>>} */\r\n    this.writeQueue_ = [];\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @property {number} X NoData value for X\r\n     * @property {number} Y NoData value for Y\r\n     * @property {number} Z NoData value for Z\r\n     * @property {number} M NoData value for M\r\n     */\r\n    this.nodata_ = Object.assign({X: 0, Y: 0, Z: 0, M: 0}, opts.nodata);\r\n  }\r\n\r\n  /**\r\n   * @param {number} value value\r\n   */\r\n  writeUint8(value) {\r\n    this.writeQueue_.push([1, value]);\r\n  }\r\n\r\n  /**\r\n   * @param {number} value value\r\n   */\r\n  writeUint32(value) {\r\n    this.writeQueue_.push([4, value]);\r\n  }\r\n\r\n  /**\r\n   * @param {number} value value\r\n   */\r\n  writeDouble(value) {\r\n    this.writeQueue_.push([8, value]);\r\n  }\r\n\r\n  /**\r\n   * @param {import('../coordinate.js').Coordinate} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writePoint(coords, layout) {\r\n    /**\r\n     * @type {Object}\r\n     * @property {number} X NoData value for X\r\n     * @property {number} Y NoData value for Y\r\n     * @property {number} [Z] NoData value for Z\r\n     * @property {number} [M] NoData value for M\r\n     */\r\n    const coordsObj = Object.assign.apply(\r\n      null,\r\n      layout.split('').map((axis, idx) => ({[axis]: coords[idx]}))\r\n    );\r\n\r\n    for (const axis of this.layout_) {\r\n      this.writeDouble(\r\n        axis in coordsObj ? coordsObj[axis] : this.nodata_[axis]\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeLineString(coords, layout) {\r\n    this.writeUint32(coords.length); // numPoints\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writePoint(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} rings rings\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writePolygon(rings, layout) {\r\n    this.writeUint32(rings.length); // numRings\r\n    for (let i = 0; i < rings.length; i++) {\r\n      this.writeLineString(rings[i], layout); // as a LinearRing\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} wkbType WKB Type ID\r\n   * @param {number} [srid] SRID\r\n   */\r\n  writeWkbHeader(wkbType, srid) {\r\n    wkbType %= 1000; // Assume 1000 is an upper limit for type ID\r\n    if (this.layout_.includes('Z')) {\r\n      wkbType += this.isEWKB_ ? 0x80000000 : 1000;\r\n    }\r\n    if (this.layout_.includes('M')) {\r\n      wkbType += this.isEWKB_ ? 0x40000000 : 2000;\r\n    }\r\n    if (this.isEWKB_ && Number.isInteger(srid)) {\r\n      wkbType |= 0x20000000;\r\n    }\r\n\r\n    this.writeUint8(this.isLittleEndian_ ? 1 : 0);\r\n    this.writeUint32(wkbType);\r\n    if (this.isEWKB_ && Number.isInteger(srid)) {\r\n      this.writeUint32(srid);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeMultiPoint(coords, layout) {\r\n    this.writeUint32(coords.length); // numItems\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writeWkbHeader(1);\r\n      this.writePoint(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeMultiLineString(coords, layout) {\r\n    this.writeUint32(coords.length); // numItems\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writeWkbHeader(2);\r\n      this.writeLineString(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeMultiPolygon(coords, layout) {\r\n    this.writeUint32(coords.length); // numItems\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writeWkbHeader(3);\r\n      this.writePolygon(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import('../geom/Geometry.js').default>} geometries geometries\r\n   */\r\n  writeGeometryCollection(geometries) {\r\n    this.writeUint32(geometries.length); // numItems\r\n\r\n    for (let i = 0; i < geometries.length; i++) {\r\n      this.writeGeometry(geometries[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} [layout] layout\r\n   * @return {import(\"../geom/Geometry.js\").GeometryLayout} minimum layout made by common axes\r\n   */\r\n  findMinimumLayout(geom, layout = 'XYZM') {\r\n    /**\r\n     * @param {import(\"../geom/Geometry.js\").GeometryLayout} a A\r\n     * @param {import(\"../geom/Geometry.js\").GeometryLayout} b B\r\n     * @return {import(\"../geom/Geometry.js\").GeometryLayout} minimum layout made by common axes\r\n     */\r\n    const GeometryLayout_min = (a, b) => {\r\n      if (a === b) {\r\n        return a;\r\n      }\r\n\r\n      if (a === 'XYZM') {\r\n        // anything `b` is minimum\r\n        return b;\r\n      }\r\n      if (b === 'XYZM') {\r\n        // anything `a` is minimum\r\n        return a;\r\n      }\r\n\r\n      // otherwise, incompatible\r\n      return 'XY';\r\n    };\r\n\r\n    if (geom instanceof SimpleGeometry) {\r\n      return GeometryLayout_min(geom.getLayout(), layout);\r\n    }\r\n\r\n    if (geom instanceof GeometryCollection) {\r\n      const geoms = geom.getGeometriesArray();\r\n      for (let i = 0; i < geoms.length && layout !== 'XY'; i++) {\r\n        layout = this.findMinimumLayout(geoms[i], layout);\r\n      }\r\n    }\r\n\r\n    return layout;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\r\n   * @param {number} [srid] SRID\r\n   */\r\n  writeGeometry(geom, srid) {\r\n    /**\r\n     * @type {Object<import(\"../geom/Geometry.js\").Type, WKBGeometryType>}\r\n     */\r\n    const wkblut = {\r\n      Point: WKBGeometryType.POINT,\r\n      LineString: WKBGeometryType.LINE_STRING,\r\n      Polygon: WKBGeometryType.POLYGON,\r\n      MultiPoint: WKBGeometryType.MULTI_POINT,\r\n      MultiLineString: WKBGeometryType.MULTI_LINE_STRING,\r\n      MultiPolygon: WKBGeometryType.MULTI_POLYGON,\r\n      GeometryCollection: WKBGeometryType.GEOMETRY_COLLECTION,\r\n    };\r\n    const geomType = geom.getType();\r\n    const typeId = wkblut[geomType];\r\n\r\n    if (!typeId) {\r\n      throw new Error('GeometryType ' + geomType + ' is not supported');\r\n    }\r\n\r\n    // first call of writeGeometry() traverse whole geometries to determine its output layout if not specified on constructor.\r\n    if (!this.layout_) {\r\n      this.layout_ = this.findMinimumLayout(geom);\r\n    }\r\n\r\n    this.writeWkbHeader(typeId, srid);\r\n\r\n    if (geom instanceof SimpleGeometry) {\r\n      const writerLUT = {\r\n        Point: this.writePoint,\r\n        LineString: this.writeLineString,\r\n        Polygon: this.writePolygon,\r\n        MultiPoint: this.writeMultiPoint,\r\n        MultiLineString: this.writeMultiLineString,\r\n        MultiPolygon: this.writeMultiPolygon,\r\n      };\r\n      writerLUT[geomType].call(this, geom.getCoordinates(), geom.getLayout());\r\n    } else if (geom instanceof GeometryCollection) {\r\n      this.writeGeometryCollection(geom.getGeometriesArray());\r\n    }\r\n  }\r\n\r\n  getBuffer() {\r\n    const byteLength = this.writeQueue_.reduce((acc, item) => acc + item[0], 0);\r\n    const buffer = new ArrayBuffer(byteLength);\r\n    const view = new DataView(buffer);\r\n\r\n    let pos = 0;\r\n    this.writeQueue_.forEach((item) => {\r\n      switch (item[0]) {\r\n        case 1:\r\n          view.setUint8(pos, item[1]);\r\n          break;\r\n        case 4:\r\n          view.setUint32(pos, item[1], this.isLittleEndian_);\r\n          break;\r\n        case 8:\r\n          view.setFloat64(pos, item[1], this.isLittleEndian_);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      pos += item[0];\r\n    });\r\n\r\n    return buffer;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into multiple features on reading.\r\n * @property {boolean} [hex=true] Returns hex string instead of ArrayBuffer for output. This also is used as a hint internally whether it should load contents as text or ArrayBuffer on reading.\r\n * @property {boolean} [littleEndian=true] Use littleEndian for output.\r\n * @property {boolean} [ewkb=true] Use EWKB format for output.\r\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout=null] Use specific coordinate layout for output features (null: auto detect)\r\n * @property {number} [nodataZ=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of Z.\r\n * @property {number} [nodataM=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of M.\r\n * @property {number|boolean} [srid=true] SRID for output. Specify integer value to enforce the value as a SRID. Specify `true` to extract from `dataProjection`. `false` to suppress the output. This option only takes effect when `ewkb` is `true`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Geometry format for reading and writing data in the `Well-Known Binary` (WKB) format.\r\n * Also supports `Extended Well-Known Binary` (EWKB) format, used in PostGIS for example.\r\n *\r\n * @api\r\n */\r\nclass WKB extends FeatureFormat {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    this.splitCollection = Boolean(options.splitCollection);\r\n\r\n    this.viewCache_ = null;\r\n\r\n    this.hex_ = options.hex !== false;\r\n    this.littleEndian_ = options.littleEndian !== false;\r\n    this.ewkb_ = options.ewkb !== false;\r\n\r\n    this.layout_ = options.geometryLayout; // null for auto detect\r\n    this.nodataZ_ = options.nodataZ || 0;\r\n    this.nodataM_ = options.nodataM || 0;\r\n\r\n    this.srid_ = options.srid;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return this.hex_ ? 'text' : 'arraybuffer';\r\n  }\r\n\r\n  /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, options) {\r\n    return new Feature({\r\n      geometry: this.readGeometry(source, options),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Read all features from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    let geometries = [];\r\n    const geometry = this.readGeometry(source, options);\r\n    if (this.splitCollection && geometry instanceof GeometryCollection) {\r\n      geometries = geometry.getGeometriesArray();\r\n    } else {\r\n      geometries = [geometry];\r\n    }\r\n    return geometries.map((geometry) => new Feature({geometry}));\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   */\r\n  readGeometry(source, options) {\r\n    const view = getDataView(source);\r\n    if (!view) {\r\n      return null;\r\n    }\r\n\r\n    const reader = new WkbReader(view);\r\n    const geometry = reader.readGeometry();\r\n\r\n    this.viewCache_ = view; // cache for internal subsequent call of readProjection()\r\n    options = this.getReadOptions(source, options);\r\n    this.viewCache_ = null; // release\r\n\r\n    return transformGeometryWithOptions(geometry, false, options);\r\n  }\r\n\r\n  /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    const view = this.viewCache_ || getDataView(source);\r\n    if (!view) {\r\n      return undefined;\r\n    }\r\n\r\n    const reader = new WkbReader(view);\r\n    reader.readWkbHeader();\r\n\r\n    return (\r\n      (reader.getSrid() && getProjection('EPSG:' + reader.getSrid())) ||\r\n      undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   * @api\r\n   */\r\n  writeFeature(feature, options) {\r\n    return this.writeGeometry(feature.getGeometry(), options);\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   * @api\r\n   */\r\n  writeFeatures(features, options) {\r\n    return this.writeGeometry(\r\n      new GeometryCollection(features.map((f) => f.getGeometry())),\r\n      options\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   * @api\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    options = this.adaptOptions(options);\r\n\r\n    const writer = new WkbWriter({\r\n      layout: this.layout_,\r\n      littleEndian: this.littleEndian_,\r\n      ewkb: this.ewkb_,\r\n\r\n      nodata: {\r\n        Z: this.nodataZ_,\r\n        M: this.nodataM_,\r\n      },\r\n    });\r\n\r\n    // extract SRID from `dataProjection`\r\n    let srid = Number.isInteger(this.srid_) ? Number(this.srid_) : null;\r\n    if (this.srid_ !== false && !Number.isInteger(this.srid_)) {\r\n      const dataProjection =\r\n        options.dataProjection && getProjection(options.dataProjection);\r\n      if (dataProjection) {\r\n        const code = dataProjection.getCode();\r\n        if (code.startsWith('EPSG:')) {\r\n          srid = Number(code.substring(5));\r\n        }\r\n      }\r\n    }\r\n\r\n    writer.writeGeometry(\r\n      transformGeometryWithOptions(geometry, true, options),\r\n      srid\r\n    );\r\n    const buffer = writer.getBuffer();\r\n\r\n    return this.hex_ ? encodeHexString(buffer) : buffer;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ArrayBuffer} buffer source buffer\r\n * @return {string} encoded hex string\r\n */\r\nfunction encodeHexString(buffer) {\r\n  const view = new Uint8Array(buffer);\r\n  return Array.from(view.values())\r\n    .map((x) => (x < 16 ? '0' : '') + Number(x).toString(16).toUpperCase())\r\n    .join('');\r\n}\r\n\r\n/**\r\n * @param {string} text source text\r\n * @return {DataView} decoded binary buffer\r\n */\r\nfunction decodeHexString(text) {\r\n  const buffer = new Uint8Array(text.length / 2);\r\n  for (let i = 0; i < text.length / 2; i++) {\r\n    buffer[i] = parseInt(text.substr(i * 2, 2), 16);\r\n  }\r\n  return new DataView(buffer.buffer);\r\n}\r\n\r\n/**\r\n * @param {string | ArrayBuffer | ArrayBufferView} source source\r\n * @return {DataView} data view\r\n */\r\nfunction getDataView(source) {\r\n  if (typeof source === 'string') {\r\n    return decodeHexString(source);\r\n  }\r\n  if (ArrayBuffer.isView(source)) {\r\n    if (source instanceof DataView) {\r\n      return source;\r\n    }\r\n    return new DataView(source.buffer, source.byteOffset, source.byteLength);\r\n  }\r\n  if (source instanceof ArrayBuffer) {\r\n    return new DataView(source);\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default WKB;\r\n", "/**\r\n * @module ol/format/WKT\r\n */\r\nimport Feature from '../Feature.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport TextFeature from './TextFeature.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * Geometry constructors\r\n * @enum {function (new:import(\"../geom/Geometry.js\").default, Array, import(\"../geom/Geometry.js\").GeometryLayout)}\r\n */\r\nconst GeometryConstructor = {\r\n  'POINT': Point,\r\n  'LINESTRING': LineString,\r\n  'POLYGON': Polygon,\r\n  'MULTIPOINT': MultiPoint,\r\n  'MULTILINESTRING': MultiLineString,\r\n  'MULTIPOLYGON': MultiPolygon,\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into\r\n * multiple features on reading.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Token\r\n * @property {number} type Type.\r\n * @property {number|string} [value] Value.\r\n * @property {number} position Position.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst EMPTY = 'EMPTY';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst Z = 'Z';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst M = 'M';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst ZM = 'ZM';\r\n\r\n/**\r\n * @const\r\n * @enum {number}\r\n */\r\nconst TokenType = {\r\n  START: 0,\r\n  TEXT: 1,\r\n  LEFT_PAREN: 2,\r\n  RIGHT_PAREN: 3,\r\n  NUMBER: 4,\r\n  COMMA: 5,\r\n  EOF: 6,\r\n};\r\n\r\n/**\r\n * @type {Object<import(\"../geom/Geometry.js\").Type, string>}\r\n */\r\nconst wktTypeLookup = {\r\n  Point: 'POINT',\r\n  LineString: 'LINESTRING',\r\n  Polygon: 'POLYGON',\r\n  MultiPoint: 'MULTIPOINT',\r\n  MultiLineString: 'MULTILINESTRING',\r\n  MultiPolygon: 'MULTIPOLYGON',\r\n  GeometryCollection: 'GEOMETRYCOLLECTION',\r\n  Circle: 'CIRCLE',\r\n};\r\n\r\n/**\r\n * Class to tokenize a WKT string.\r\n */\r\nclass Lexer {\r\n  /**\r\n   * @param {string} wkt WKT string.\r\n   */\r\n  constructor(wkt) {\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.wkt = wkt;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.index_ = -1;\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @return {boolean} Whether the character is alphabetic.\r\n   * @private\r\n   */\r\n  isAlpha_(c) {\r\n    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @param {boolean} [decimal] Whether the string number\r\n   *     contains a dot, i.e. is a decimal number.\r\n   * @return {boolean} Whether the character is numeric.\r\n   * @private\r\n   */\r\n  isNumeric_(c, decimal) {\r\n    decimal = decimal !== undefined ? decimal : false;\r\n    return (c >= '0' && c <= '9') || (c == '.' && !decimal);\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @return {boolean} Whether the character is whitespace.\r\n   * @private\r\n   */\r\n  isWhiteSpace_(c) {\r\n    return c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\r\n  }\r\n\r\n  /**\r\n   * @return {string} Next string character.\r\n   * @private\r\n   */\r\n  nextChar_() {\r\n    return this.wkt.charAt(++this.index_);\r\n  }\r\n\r\n  /**\r\n   * Fetch and return the next token.\r\n   * @return {Token} Next string token.\r\n   */\r\n  nextToken() {\r\n    const c = this.nextChar_();\r\n    const position = this.index_;\r\n    /** @type {number|string} */\r\n    let value = c;\r\n    let type;\r\n\r\n    if (c == '(') {\r\n      type = TokenType.LEFT_PAREN;\r\n    } else if (c == ',') {\r\n      type = TokenType.COMMA;\r\n    } else if (c == ')') {\r\n      type = TokenType.RIGHT_PAREN;\r\n    } else if (this.isNumeric_(c) || c == '-') {\r\n      type = TokenType.NUMBER;\r\n      value = this.readNumber_();\r\n    } else if (this.isAlpha_(c)) {\r\n      type = TokenType.TEXT;\r\n      value = this.readText_();\r\n    } else if (this.isWhiteSpace_(c)) {\r\n      return this.nextToken();\r\n    } else if (c === '') {\r\n      type = TokenType.EOF;\r\n    } else {\r\n      throw new Error('Unexpected character: ' + c);\r\n    }\r\n\r\n    return {position: position, value: value, type: type};\r\n  }\r\n\r\n  /**\r\n   * @return {number} Numeric token value.\r\n   * @private\r\n   */\r\n  readNumber_() {\r\n    let c;\r\n    const index = this.index_;\r\n    let decimal = false;\r\n    let scientificNotation = false;\r\n    do {\r\n      if (c == '.') {\r\n        decimal = true;\r\n      } else if (c == 'e' || c == 'E') {\r\n        scientificNotation = true;\r\n      }\r\n      c = this.nextChar_();\r\n    } while (\r\n      this.isNumeric_(c, decimal) ||\r\n      // if we haven't detected a scientific number before, 'e' or 'E'\r\n      // hint that we should continue to read\r\n      (!scientificNotation && (c == 'e' || c == 'E')) ||\r\n      // once we know that we have a scientific number, both '-' and '+'\r\n      // are allowed\r\n      (scientificNotation && (c == '-' || c == '+'))\r\n    );\r\n    return parseFloat(this.wkt.substring(index, this.index_--));\r\n  }\r\n\r\n  /**\r\n   * @return {string} String token value.\r\n   * @private\r\n   */\r\n  readText_() {\r\n    let c;\r\n    const index = this.index_;\r\n    do {\r\n      c = this.nextChar_();\r\n    } while (this.isAlpha_(c));\r\n    return this.wkt.substring(index, this.index_--).toUpperCase();\r\n  }\r\n}\r\n\r\n/**\r\n * Class to parse the tokens from the WKT string.\r\n */\r\nclass Parser {\r\n  /**\r\n   * @param {Lexer} lexer The lexer.\r\n   */\r\n  constructor(lexer) {\r\n    /**\r\n     * @type {Lexer}\r\n     * @private\r\n     */\r\n    this.lexer_ = lexer;\r\n\r\n    /**\r\n     * @type {Token}\r\n     * @private\r\n     */\r\n    this.token_ = {\r\n      position: 0,\r\n      type: TokenType.START,\r\n    };\r\n\r\n    /**\r\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\r\n     * @private\r\n     */\r\n    this.layout_ = 'XY';\r\n  }\r\n\r\n  /**\r\n   * Fetch the next token form the lexer and replace the active token.\r\n   * @private\r\n   */\r\n  consume_() {\r\n    this.token_ = this.lexer_.nextToken();\r\n  }\r\n\r\n  /**\r\n   * Tests if the given type matches the type of the current token.\r\n   * @param {TokenType} type Token type.\r\n   * @return {boolean} Whether the token matches the given type.\r\n   */\r\n  isTokenType(type) {\r\n    return this.token_.type == type;\r\n  }\r\n\r\n  /**\r\n   * If the given type matches the current token, consume it.\r\n   * @param {TokenType} type Token type.\r\n   * @return {boolean} Whether the token matches the given type.\r\n   */\r\n  match(type) {\r\n    const isMatch = this.isTokenType(type);\r\n    if (isMatch) {\r\n      this.consume_();\r\n    }\r\n    return isMatch;\r\n  }\r\n\r\n  /**\r\n   * Try to parse the tokens provided by the lexer.\r\n   * @return {import(\"../geom/Geometry.js\").default} The geometry.\r\n   */\r\n  parse() {\r\n    this.consume_();\r\n    return this.parseGeometry_();\r\n  }\r\n\r\n  /**\r\n   * Try to parse the dimensional info.\r\n   * @return {import(\"../geom/Geometry.js\").GeometryLayout} The layout.\r\n   * @private\r\n   */\r\n  parseGeometryLayout_() {\r\n    /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\r\n    let layout = 'XY';\r\n    const dimToken = this.token_;\r\n    if (this.isTokenType(TokenType.TEXT)) {\r\n      const dimInfo = dimToken.value;\r\n      if (dimInfo === Z) {\r\n        layout = 'XYZ';\r\n      } else if (dimInfo === M) {\r\n        layout = 'XYM';\r\n      } else if (dimInfo === ZM) {\r\n        layout = 'XYZM';\r\n      }\r\n      if (layout !== 'XY') {\r\n        this.consume_();\r\n      }\r\n    }\r\n    return layout;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import(\"../geom/Geometry.js\").default>} A collection of geometries.\r\n   * @private\r\n   */\r\n  parseGeometryCollectionText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const geometries = [];\r\n      do {\r\n        geometries.push(this.parseGeometry_());\r\n      } while (this.match(TokenType.COMMA));\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return geometries;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} All values in a point.\r\n   * @private\r\n   */\r\n  parsePointText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePoint_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} All points in a linestring.\r\n   * @private\r\n   */\r\n  parseLineStringText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePointList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<number>>>} All points in a polygon.\r\n   * @private\r\n   */\r\n  parsePolygonText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parseLineStringTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} All points in a multipoint.\r\n   * @private\r\n   */\r\n  parseMultiPointText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      let coordinates;\r\n      if (this.token_.type == TokenType.LEFT_PAREN) {\r\n        coordinates = this.parsePointTextList_();\r\n      } else {\r\n        coordinates = this.parsePointList_();\r\n      }\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<number>>>} All linestring points\r\n   *                                          in a multilinestring.\r\n   * @private\r\n   */\r\n  parseMultiLineStringText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parseLineStringTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<Array<number>>>>} All polygon points in a multipolygon.\r\n   * @private\r\n   */\r\n  parseMultiPolygonText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePolygonTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} A point.\r\n   * @private\r\n   */\r\n  parsePoint_() {\r\n    const coordinates = [];\r\n    const dimensions = this.layout_.length;\r\n    for (let i = 0; i < dimensions; ++i) {\r\n      const token = this.token_;\r\n      if (this.match(TokenType.NUMBER)) {\r\n        coordinates.push(/** @type {number} */ (token.value));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    if (coordinates.length == dimensions) {\r\n      return coordinates;\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePointList_() {\r\n    const coordinates = [this.parsePoint_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePoint_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePointTextList_() {\r\n    const coordinates = [this.parsePointText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePointText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<number>>>} An array of points.\r\n   * @private\r\n   */\r\n  parseLineStringTextList_() {\r\n    const coordinates = [this.parseLineStringText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parseLineStringText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<Array<number>>>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePolygonTextList_() {\r\n    const coordinates = [this.parsePolygonText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePolygonText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the token implies an empty geometry.\r\n   * @private\r\n   */\r\n  isEmptyGeometry_() {\r\n    const isEmpty =\r\n      this.isTokenType(TokenType.TEXT) && this.token_.value == EMPTY;\r\n    if (isEmpty) {\r\n      this.consume_();\r\n    }\r\n    return isEmpty;\r\n  }\r\n\r\n  /**\r\n   * Create an error message for an unexpected token error.\r\n   * @return {string} Error message.\r\n   * @private\r\n   */\r\n  formatErrorMessage_() {\r\n    return (\r\n      'Unexpected `' +\r\n      this.token_.value +\r\n      '` at position ' +\r\n      this.token_.position +\r\n      ' in `' +\r\n      this.lexer_.wkt +\r\n      '`'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../geom/Geometry.js\").default} The geometry.\r\n   * @private\r\n   */\r\n  parseGeometry_() {\r\n    const token = this.token_;\r\n    if (this.match(TokenType.TEXT)) {\r\n      const geomType = /** @type {string} */ (token.value);\r\n      this.layout_ = this.parseGeometryLayout_();\r\n      const isEmpty = this.isEmptyGeometry_();\r\n      if (geomType == 'GEOMETRYCOLLECTION') {\r\n        if (isEmpty) {\r\n          return new GeometryCollection([]);\r\n        }\r\n        const geometries = this.parseGeometryCollectionText_();\r\n        return new GeometryCollection(geometries);\r\n      }\r\n      const ctor = GeometryConstructor[geomType];\r\n      if (!ctor) {\r\n        throw new Error('Invalid geometry type: ' + geomType);\r\n      }\r\n\r\n      let coordinates;\r\n\r\n      if (isEmpty) {\r\n        if (geomType == 'POINT') {\r\n          coordinates = [NaN, NaN];\r\n        } else {\r\n          coordinates = [];\r\n        }\r\n      } else {\r\n        switch (geomType) {\r\n          case 'POINT': {\r\n            coordinates = this.parsePointText_();\r\n            break;\r\n          }\r\n          case 'LINESTRING': {\r\n            coordinates = this.parseLineStringText_();\r\n            break;\r\n          }\r\n          case 'POLYGON': {\r\n            coordinates = this.parsePolygonText_();\r\n            break;\r\n          }\r\n          case 'MULTIPOINT': {\r\n            coordinates = this.parseMultiPointText_();\r\n            break;\r\n          }\r\n          case 'MULTILINESTRING': {\r\n            coordinates = this.parseMultiLineStringText_();\r\n            break;\r\n          }\r\n          case 'MULTIPOLYGON': {\r\n            coordinates = this.parseMultiPolygonText_();\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      return new ctor(coordinates, this.layout_);\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Geometry format for reading and writing data in the `WellKnownText` (WKT)\r\n * format.\r\n *\r\n * @api\r\n */\r\nclass WKT extends TextFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * Split GeometryCollection into multiple features.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.splitCollection_ =\r\n      options.splitCollection !== undefined ? options.splitCollection : false;\r\n  }\r\n\r\n  /**\r\n   * Parse a WKT string.\r\n   * @param {string} wkt WKT string.\r\n   * @return {import(\"../geom/Geometry.js\").default}\r\n   *     The geometry created.\r\n   * @private\r\n   */\r\n  parse_(wkt) {\r\n    const lexer = new Lexer(wkt);\r\n    const parser = new Parser(lexer);\r\n    return parser.parse();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    const geom = this.readGeometryFromText(text, options);\r\n    const feature = new Feature();\r\n    feature.setGeometry(geom);\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    let geometries = [];\r\n    const geometry = this.readGeometryFromText(text, options);\r\n    if (this.splitCollection_ && geometry.getType() == 'GeometryCollection') {\r\n      geometries = /** @type {GeometryCollection} */ (\r\n        geometry\r\n      ).getGeometriesArray();\r\n    } else {\r\n      geometries = [geometry];\r\n    }\r\n    const features = [];\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      const feature = new Feature();\r\n      feature.setGeometry(geometries[i]);\r\n      features.push(feature);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    const geometry = this.parse_(text);\r\n    return transformGeometryWithOptions(geometry, false, options);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      return this.writeGeometryText(geometry, options);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    if (features.length == 1) {\r\n      return this.writeFeatureText(features[0], options);\r\n    }\r\n    const geometries = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      geometries.push(features[i].getGeometry());\r\n    }\r\n    const collection = new GeometryCollection(geometries);\r\n    return this.writeGeometryText(collection, options);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    return encode(transformGeometryWithOptions(geometry, true, options));\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Point} geom Point geometry.\r\n * @return {string} Coordinates part of Point as WKT.\r\n */\r\nfunction encodePointGeometry(geom) {\r\n  const coordinates = geom.getCoordinates();\r\n  if (coordinates.length === 0) {\r\n    return '';\r\n  }\r\n  return coordinates.join(' ');\r\n}\r\n\r\n/**\r\n * @param {MultiPoint} geom MultiPoint geometry.\r\n * @return {string} Coordinates part of MultiPoint as WKT.\r\n */\r\nfunction encodeMultiPointGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getPoints();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodePointGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {GeometryCollection} geom GeometryCollection geometry.\r\n * @return {string} Coordinates part of GeometryCollection as WKT.\r\n */\r\nfunction encodeGeometryCollectionGeometry(geom) {\r\n  const array = [];\r\n  const geoms = geom.getGeometries();\r\n  for (let i = 0, ii = geoms.length; i < ii; ++i) {\r\n    array.push(encode(geoms[i]));\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {LineString|import(\"../geom/LinearRing.js\").default} geom LineString geometry.\r\n * @return {string} Coordinates part of LineString as WKT.\r\n */\r\nfunction encodeLineStringGeometry(geom) {\r\n  const coordinates = geom.getCoordinates();\r\n  const array = [];\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    array.push(coordinates[i].join(' '));\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {MultiLineString} geom MultiLineString geometry.\r\n * @return {string} Coordinates part of MultiLineString as WKT.\r\n */\r\nfunction encodeMultiLineStringGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getLineStrings();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodeLineStringGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {Polygon} geom Polygon geometry.\r\n * @return {string} Coordinates part of Polygon as WKT.\r\n */\r\nfunction encodePolygonGeometry(geom) {\r\n  const array = [];\r\n  const rings = geom.getLinearRings();\r\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\r\n    array.push('(' + encodeLineStringGeometry(rings[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {MultiPolygon} geom MultiPolygon geometry.\r\n * @return {string} Coordinates part of MultiPolygon as WKT.\r\n */\r\nfunction encodeMultiPolygonGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getPolygons();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodePolygonGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/SimpleGeometry.js\").default} geom SimpleGeometry geometry.\r\n * @return {string} Potential dimensional information for WKT type.\r\n */\r\nfunction encodeGeometryLayout(geom) {\r\n  const layout = geom.getLayout();\r\n  let dimInfo = '';\r\n  if (layout === 'XYZ' || layout === 'XYZM') {\r\n    dimInfo += Z;\r\n  }\r\n  if (layout === 'XYM' || layout === 'XYZM') {\r\n    dimInfo += M;\r\n  }\r\n  return dimInfo;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default): string>}\r\n */\r\nconst GeometryEncoder = {\r\n  'Point': encodePointGeometry,\r\n  'LineString': encodeLineStringGeometry,\r\n  'Polygon': encodePolygonGeometry,\r\n  'MultiPoint': encodeMultiPointGeometry,\r\n  'MultiLineString': encodeMultiLineStringGeometry,\r\n  'MultiPolygon': encodeMultiPolygonGeometry,\r\n  'GeometryCollection': encodeGeometryCollectionGeometry,\r\n};\r\n\r\n/**\r\n * Encode a geometry as WKT.\r\n * @param {import(\"../geom/Geometry.js\").default} geom The geometry to encode.\r\n * @return {string} WKT string for the geometry.\r\n */\r\nfunction encode(geom) {\r\n  const type = geom.getType();\r\n  const geometryEncoder = GeometryEncoder[type];\r\n  const enc = geometryEncoder(geom);\r\n  let wktType = wktTypeLookup[type];\r\n  if (typeof (/** @type {?} */ (geom).getFlatCoordinates) === 'function') {\r\n    const dimInfo = encodeGeometryLayout(\r\n      /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geom)\r\n    );\r\n    if (dimInfo.length > 0) {\r\n      wktType += ' ' + dimInfo;\r\n    }\r\n  }\r\n  if (enc.length === 0) {\r\n    return wktType + ' ' + EMPTY;\r\n  }\r\n  return wktType + '(' + enc + ')';\r\n}\r\n\r\nexport default WKT;\r\n", "/**\r\n * @module ol/format/WMSCapabilities\r\n */\r\nimport XML from './XML.js';\r\nimport {\r\n  makeArrayPusher,\r\n  makeObjectPropertyPusher,\r\n  makeObjectPropertySetter,\r\n  makeStructureNS,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {\r\n  readBooleanString,\r\n  readDecimal,\r\n  readDecimalString,\r\n  readNonNegativeIntegerString,\r\n  readPositiveInteger,\r\n  readString,\r\n} from './xsd.js';\r\nimport {readHref} from './xlink.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/wms'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Service': makeObjectPropertySetter(readService),\r\n  'Capability': makeObjectPropertySetter(readCapability),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CAPABILITY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Request': makeObjectPropertySetter(readRequest),\r\n  'Exception': makeObjectPropertySetter(readException),\r\n  'Layer': makeObjectPropertySetter(readCapabilityLayer),\r\n});\r\n\r\n/**\r\n * @classdesc\r\n * Format for reading WMS capabilities data\r\n *\r\n * @api\r\n */\r\nclass WMSCapabilities extends XML {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {string|undefined}\r\n     */\r\n    this.version = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Object|null} Object\r\n   */\r\n  readFromNode(node) {\r\n    this.version = node.getAttribute('version').trim();\r\n    const wmsCapabilityObject = pushParseAndPop(\r\n      {\r\n        'version': this.version,\r\n      },\r\n      PARSERS,\r\n      node,\r\n      []\r\n    );\r\n    return wmsCapabilityObject ? wmsCapabilityObject : null;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Name': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'KeywordList': makeObjectPropertySetter(readKeywordList),\r\n  'OnlineResource': makeObjectPropertySetter(readHref),\r\n  'ContactInformation': makeObjectPropertySetter(readContactInformation),\r\n  'Fees': makeObjectPropertySetter(readString),\r\n  'AccessConstraints': makeObjectPropertySetter(readString),\r\n  'LayerLimit': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxWidth': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxHeight': makeObjectPropertySetter(readPositiveInteger),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_INFORMATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ContactPersonPrimary': makeObjectPropertySetter(readContactPersonPrimary),\r\n  'ContactPosition': makeObjectPropertySetter(readString),\r\n  'ContactAddress': makeObjectPropertySetter(readContactAddress),\r\n  'ContactVoiceTelephone': makeObjectPropertySetter(readString),\r\n  'ContactFacsimileTelephone': makeObjectPropertySetter(readString),\r\n  'ContactElectronicMailAddress': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_PERSON_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ContactPerson': makeObjectPropertySetter(readString),\r\n  'ContactOrganization': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'AddressType': makeObjectPropertySetter(readString),\r\n  'Address': makeObjectPropertySetter(readString),\r\n  'City': makeObjectPropertySetter(readString),\r\n  'StateOrProvince': makeObjectPropertySetter(readString),\r\n  'PostCode': makeObjectPropertySetter(readString),\r\n  'Country': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EXCEPTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Format': makeArrayPusher(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LAYER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Name': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'KeywordList': makeObjectPropertySetter(readKeywordList),\r\n  'CRS': makeObjectPropertyPusher(readString),\r\n  'EX_GeographicBoundingBox': makeObjectPropertySetter(\r\n    readEXGeographicBoundingBox\r\n  ),\r\n  'BoundingBox': makeObjectPropertyPusher(readBoundingBox),\r\n  'Dimension': makeObjectPropertyPusher(readDimension),\r\n  'Attribution': makeObjectPropertySetter(readAttribution),\r\n  'AuthorityURL': makeObjectPropertyPusher(readAuthorityURL),\r\n  'Identifier': makeObjectPropertyPusher(readString),\r\n  'MetadataURL': makeObjectPropertyPusher(readMetadataURL),\r\n  'DataURL': makeObjectPropertyPusher(readFormatOnlineresource),\r\n  'FeatureListURL': makeObjectPropertyPusher(readFormatOnlineresource),\r\n  'Style': makeObjectPropertyPusher(readStyle),\r\n  'MinScaleDenominator': makeObjectPropertySetter(readDecimal),\r\n  'MaxScaleDenominator': makeObjectPropertySetter(readDecimal),\r\n  'Layer': makeObjectPropertyPusher(readLayer),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ATTRIBUTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'OnlineResource': makeObjectPropertySetter(readHref),\r\n  'LogoURL': makeObjectPropertySetter(readSizedFormatOnlineresource),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'westBoundLongitude': makeObjectPropertySetter(readDecimal),\r\n  'eastBoundLongitude': makeObjectPropertySetter(readDecimal),\r\n  'southBoundLatitude': makeObjectPropertySetter(readDecimal),\r\n  'northBoundLatitude': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst REQUEST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'GetCapabilities': makeObjectPropertySetter(readOperationType),\r\n  'GetMap': makeObjectPropertySetter(readOperationType),\r\n  'GetFeatureInfo': makeObjectPropertySetter(readOperationType),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OPERATIONTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Format': makeObjectPropertyPusher(readString),\r\n  'DCPType': makeObjectPropertyPusher(readDCPType),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DCPTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'HTTP': makeObjectPropertySetter(readHTTP),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Get': makeObjectPropertySetter(readFormatOnlineresource),\r\n  'Post': makeObjectPropertySetter(readFormatOnlineresource),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Name': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'LegendURL': makeObjectPropertyPusher(readSizedFormatOnlineresource),\r\n  'StyleSheetURL': makeObjectPropertySetter(readFormatOnlineresource),\r\n  'StyleURL': makeObjectPropertySetter(readFormatOnlineresource),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst FORMAT_ONLINERESOURCE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Format': makeObjectPropertySetter(readString),\r\n  'OnlineResource': makeObjectPropertySetter(readHref),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst KEYWORDLIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Keyword': makeArrayPusher(readString),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Attribution object.\r\n */\r\nfunction readAttribution(node, objectStack) {\r\n  return pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object} Bounding box object.\r\n */\r\nfunction readBoundingBox(node, objectStack) {\r\n  const extent = [\r\n    readDecimalString(node.getAttribute('minx')),\r\n    readDecimalString(node.getAttribute('miny')),\r\n    readDecimalString(node.getAttribute('maxx')),\r\n    readDecimalString(node.getAttribute('maxy')),\r\n  ];\r\n\r\n  const resolutions = [\r\n    readDecimalString(node.getAttribute('resx')),\r\n    readDecimalString(node.getAttribute('resy')),\r\n  ];\r\n\r\n  return {\r\n    'crs': node.getAttribute('CRS'),\r\n    'extent': extent,\r\n    'res': resolutions,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {import(\"../extent.js\").Extent|undefined} Bounding box object.\r\n */\r\nfunction readEXGeographicBoundingBox(node, objectStack) {\r\n  const geographicBoundingBox = pushParseAndPop(\r\n    {},\r\n    EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!geographicBoundingBox) {\r\n    return undefined;\r\n  }\r\n  const westBoundLongitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['westBoundLongitude']);\r\n  const southBoundLatitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['southBoundLatitude']);\r\n  const eastBoundLongitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['eastBoundLongitude']);\r\n  const northBoundLatitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['northBoundLatitude']);\r\n  if (\r\n    westBoundLongitude === undefined ||\r\n    southBoundLatitude === undefined ||\r\n    eastBoundLongitude === undefined ||\r\n    northBoundLatitude === undefined\r\n  ) {\r\n    return undefined;\r\n  }\r\n  return [\r\n    westBoundLongitude,\r\n    southBoundLatitude,\r\n    eastBoundLongitude,\r\n    northBoundLatitude,\r\n  ];\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Capability object.\r\n */\r\nfunction readCapability(node, objectStack) {\r\n  return pushParseAndPop({}, CAPABILITY_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Service object.\r\n */\r\nfunction readService(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Contact information object.\r\n */\r\nfunction readContactInformation(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_INFORMATION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Contact person object.\r\n */\r\nfunction readContactPersonPrimary(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_PERSON_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Contact address object.\r\n */\r\nfunction readContactAddress(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_ADDRESS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<string>|undefined} Format array.\r\n */\r\nfunction readException(node, objectStack) {\r\n  return pushParseAndPop([], EXCEPTION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Layer object.\r\n */\r\nfunction readCapabilityLayer(node, objectStack) {\r\n  const layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\r\n\r\n  if (layerObject['Layer'] === undefined) {\r\n    return Object.assign(layerObject, readLayer(node, objectStack));\r\n  }\r\n\r\n  return layerObject;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Layer object.\r\n */\r\nfunction readLayer(node, objectStack) {\r\n  const parentLayerObject = /**  @type {!Object<string,*>} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n\r\n  const layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\r\n\r\n  if (!layerObject) {\r\n    return undefined;\r\n  }\r\n  let queryable = readBooleanString(node.getAttribute('queryable'));\r\n  if (queryable === undefined) {\r\n    queryable = parentLayerObject['queryable'];\r\n  }\r\n  layerObject['queryable'] = queryable !== undefined ? queryable : false;\r\n\r\n  let cascaded = readNonNegativeIntegerString(node.getAttribute('cascaded'));\r\n  if (cascaded === undefined) {\r\n    cascaded = parentLayerObject['cascaded'];\r\n  }\r\n  layerObject['cascaded'] = cascaded;\r\n\r\n  let opaque = readBooleanString(node.getAttribute('opaque'));\r\n  if (opaque === undefined) {\r\n    opaque = parentLayerObject['opaque'];\r\n  }\r\n  layerObject['opaque'] = opaque !== undefined ? opaque : false;\r\n\r\n  let noSubsets = readBooleanString(node.getAttribute('noSubsets'));\r\n  if (noSubsets === undefined) {\r\n    noSubsets = parentLayerObject['noSubsets'];\r\n  }\r\n  layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;\r\n\r\n  let fixedWidth = readDecimalString(node.getAttribute('fixedWidth'));\r\n  if (!fixedWidth) {\r\n    fixedWidth = parentLayerObject['fixedWidth'];\r\n  }\r\n  layerObject['fixedWidth'] = fixedWidth;\r\n\r\n  let fixedHeight = readDecimalString(node.getAttribute('fixedHeight'));\r\n  if (!fixedHeight) {\r\n    fixedHeight = parentLayerObject['fixedHeight'];\r\n  }\r\n  layerObject['fixedHeight'] = fixedHeight;\r\n\r\n  // See 7.2.4.8\r\n  const addKeys = ['Style', 'CRS', 'AuthorityURL'];\r\n  addKeys.forEach(function (key) {\r\n    if (key in parentLayerObject) {\r\n      const childValue = layerObject[key] || [];\r\n      layerObject[key] = childValue.concat(parentLayerObject[key]);\r\n    }\r\n  });\r\n\r\n  const replaceKeys = [\r\n    'EX_GeographicBoundingBox',\r\n    'BoundingBox',\r\n    'Dimension',\r\n    'Attribution',\r\n    'MinScaleDenominator',\r\n    'MaxScaleDenominator',\r\n  ];\r\n  replaceKeys.forEach(function (key) {\r\n    if (!(key in layerObject)) {\r\n      const parentValue = parentLayerObject[key];\r\n      layerObject[key] = parentValue;\r\n    }\r\n  });\r\n\r\n  return layerObject;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object} Dimension object.\r\n */\r\nfunction readDimension(node, objectStack) {\r\n  const dimensionObject = {\r\n    'name': node.getAttribute('name'),\r\n    'units': node.getAttribute('units'),\r\n    'unitSymbol': node.getAttribute('unitSymbol'),\r\n    'default': node.getAttribute('default'),\r\n    'multipleValues': readBooleanString(node.getAttribute('multipleValues')),\r\n    'nearestValue': readBooleanString(node.getAttribute('nearestValue')),\r\n    'current': readBooleanString(node.getAttribute('current')),\r\n    'values': readString(node),\r\n  };\r\n  return dimensionObject;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Online resource object.\r\n */\r\nfunction readFormatOnlineresource(node, objectStack) {\r\n  return pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Request object.\r\n */\r\nfunction readRequest(node, objectStack) {\r\n  return pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} DCP type object.\r\n */\r\nfunction readDCPType(node, objectStack) {\r\n  return pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} HTTP object.\r\n */\r\nfunction readHTTP(node, objectStack) {\r\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Operation type object.\r\n */\r\nfunction readOperationType(node, objectStack) {\r\n  return pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Online resource object.\r\n */\r\nfunction readSizedFormatOnlineresource(node, objectStack) {\r\n  const formatOnlineresource = readFormatOnlineresource(node, objectStack);\r\n  if (formatOnlineresource) {\r\n    const size = [\r\n      readNonNegativeIntegerString(node.getAttribute('width')),\r\n      readNonNegativeIntegerString(node.getAttribute('height')),\r\n    ];\r\n    formatOnlineresource['size'] = size;\r\n    return formatOnlineresource;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Authority URL object.\r\n */\r\nfunction readAuthorityURL(node, objectStack) {\r\n  const authorityObject = readFormatOnlineresource(node, objectStack);\r\n  if (authorityObject) {\r\n    authorityObject['name'] = node.getAttribute('name');\r\n    return authorityObject;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Metadata URL object.\r\n */\r\nfunction readMetadataURL(node, objectStack) {\r\n  const metadataObject = readFormatOnlineresource(node, objectStack);\r\n  if (metadataObject) {\r\n    metadataObject['type'] = node.getAttribute('type');\r\n    return metadataObject;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Style object.\r\n */\r\nfunction readStyle(node, objectStack) {\r\n  return pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<string>|undefined} Keyword list.\r\n */\r\nfunction readKeywordList(node, objectStack) {\r\n  return pushParseAndPop([], KEYWORDLIST_PARSERS, node, objectStack);\r\n}\r\n\r\nexport default WMSCapabilities;\r\n", "/**\r\n * @module ol/format/WMSGetFeatureInfo\r\n */\r\nimport GML2 from './GML2.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {extend} from '../array.js';\r\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst featureIdentifier = '_feature';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst layerIdentifier = '_layer';\r\n\r\n/**\r\n * @classdesc\r\n * Format for reading WMSGetFeatureInfo format. It uses\r\n * {@link module:ol/format/GML2~GML2} to read features.\r\n *\r\n * @api\r\n */\r\nclass WMSGetFeatureInfo extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\r\n\r\n    /**\r\n     * @private\r\n     * @type {GML2}\r\n     */\r\n    this.gmlFormat_ = new GML2();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>|null}\r\n     */\r\n    this.layers_ = options.layers ? options.layers : null;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<string>|null} layers\r\n   */\r\n  getLayers() {\r\n    return this.layers_;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<string>|null} layers Layers to parse.\r\n   */\r\n  setLayers(layers) {\r\n    this.layers_ = layers;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @private\r\n   */\r\n  readFeatures_(node, objectStack) {\r\n    node.setAttribute('namespaceURI', this.featureNS_);\r\n    const localName = node.localName;\r\n    /** @type {Array<import(\"../Feature.js\").default>} */\r\n    let features = [];\r\n    if (node.childNodes.length === 0) {\r\n      return features;\r\n    }\r\n    if (localName == 'msGMLOutput') {\r\n      for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\r\n        const layer = node.childNodes[i];\r\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\r\n          continue;\r\n        }\r\n\r\n        const layerElement = /** @type {Element} */ (layer);\r\n        const context = objectStack[0];\r\n\r\n        const toRemove = layerIdentifier;\r\n        const layerName = layerElement.localName.replace(toRemove, '');\r\n\r\n        if (this.layers_ && !this.layers_.includes(layerName)) {\r\n          continue;\r\n        }\r\n\r\n        const featureType = layerName + featureIdentifier;\r\n\r\n        context['featureType'] = featureType;\r\n        context['featureNS'] = this.featureNS_;\r\n\r\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\r\n        const parsers = {};\r\n        parsers[featureType] = makeArrayPusher(\r\n          this.gmlFormat_.readFeatureElement,\r\n          this.gmlFormat_\r\n        );\r\n        const parsersNS = makeStructureNS(\r\n          [context['featureNS'], null],\r\n          parsers\r\n        );\r\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\r\n        const layerFeatures = pushParseAndPop(\r\n          [],\r\n          // @ts-ignore\r\n          parsersNS,\r\n          layerElement,\r\n          objectStack,\r\n          this.gmlFormat_\r\n        );\r\n        if (layerFeatures) {\r\n          extend(features, layerFeatures);\r\n        }\r\n      }\r\n    }\r\n    if (localName == 'FeatureCollection') {\r\n      const gmlFeatures = pushParseAndPop(\r\n        [],\r\n        this.gmlFormat_.FEATURE_COLLECTION_PARSERS,\r\n        node,\r\n        [{}],\r\n        this.gmlFormat_\r\n      );\r\n      if (gmlFeatures) {\r\n        features = gmlFeatures;\r\n      }\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    const internalOptions = {};\r\n    if (options) {\r\n      Object.assign(internalOptions, this.getReadOptions(node, options));\r\n    }\r\n    return this.readFeatures_(node, [internalOptions]);\r\n  }\r\n}\r\n\r\nexport default WMSGetFeatureInfo;\r\n", "/**\r\n * @module ol/format/WMTSCapabilities\r\n */\r\nimport OWS from './OWS.js';\r\nimport XML from './XML.js';\r\nimport {boundingExtent} from '../extent.js';\r\nimport {\r\n  makeArrayPusher,\r\n  makeObjectPropertyPusher,\r\n  makeObjectPropertySetter,\r\n  makeStructureNS,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {readDecimal, readPositiveInteger, readString} from './xsd.js';\r\nimport {readHref} from './xlink.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/wmts/1.0'];\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst OWS_NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Contents': makeObjectPropertySetter(readContents),\r\n});\r\n\r\n/**\r\n * @classdesc\r\n * Format for reading WMTS capabilities data.\r\n *\r\n * @api\r\n */\r\nclass WMTSCapabilities extends XML {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {OWS}\r\n     * @private\r\n     */\r\n    this.owsParser_ = new OWS();\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Object|null} Object\r\n   */\r\n  readFromNode(node) {\r\n    let version = node.getAttribute('version');\r\n    if (version) {\r\n      version = version.trim();\r\n    }\r\n    let WMTSCapabilityObject = this.owsParser_.readFromNode(node);\r\n    if (!WMTSCapabilityObject) {\r\n      return null;\r\n    }\r\n    WMTSCapabilityObject['version'] = version;\r\n    WMTSCapabilityObject = pushParseAndPop(\r\n      WMTSCapabilityObject,\r\n      PARSERS,\r\n      node,\r\n      []\r\n    );\r\n    return WMTSCapabilityObject ? WMTSCapabilityObject : null;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTENTS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Layer': makeObjectPropertyPusher(readLayer),\r\n  'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LAYER_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'Style': makeObjectPropertyPusher(readStyle),\r\n    'Format': makeObjectPropertyPusher(readString),\r\n    'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),\r\n    'Dimension': makeObjectPropertyPusher(readDimensions),\r\n    'ResourceURL': makeObjectPropertyPusher(readResourceUrl),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Title': makeObjectPropertySetter(readString),\r\n    'Abstract': makeObjectPropertySetter(readString),\r\n    'WGS84BoundingBox': makeObjectPropertySetter(readBoundingBox),\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'LegendURL': makeObjectPropertyPusher(readLegendUrl),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Title': makeObjectPropertySetter(readString),\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_LINKS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'TileMatrixSet': makeObjectPropertySetter(readString),\r\n  'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_LIMITS_LIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_LIMITS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'TileMatrix': makeObjectPropertySetter(readString),\r\n  'MinTileRow': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxTileRow': makeObjectPropertySetter(readPositiveInteger),\r\n  'MinTileCol': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxTileCol': makeObjectPropertySetter(readPositiveInteger),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DIMENSION_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'Default': makeObjectPropertySetter(readString),\r\n    'Value': makeObjectPropertyPusher(readString),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst WGS84_BBOX_READERS = makeStructureNS(OWS_NAMESPACE_URIS, {\r\n  'LowerCorner': makeArrayPusher(readCoordinates),\r\n  'UpperCorner': makeArrayPusher(readCoordinates),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'WellKnownScaleSet': makeObjectPropertySetter(readString),\r\n    'TileMatrix': makeObjectPropertyPusher(readTileMatrix),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'SupportedCRS': makeObjectPropertySetter(readString),\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n    'BoundingBox': makeObjectPropertySetter(readBoundingBox),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TM_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'TopLeftCorner': makeObjectPropertySetter(readCoordinates),\r\n    'ScaleDenominator': makeObjectPropertySetter(readDecimal),\r\n    'TileWidth': makeObjectPropertySetter(readPositiveInteger),\r\n    'TileHeight': makeObjectPropertySetter(readPositiveInteger),\r\n    'MatrixWidth': makeObjectPropertySetter(readPositiveInteger),\r\n    'MatrixHeight': makeObjectPropertySetter(readPositiveInteger),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Attribution object.\r\n */\r\nfunction readContents(node, objectStack) {\r\n  return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Layers object.\r\n */\r\nfunction readLayer(node, objectStack) {\r\n  return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Tile Matrix Set object.\r\n */\r\nfunction readTileMatrixSet(node, objectStack) {\r\n  return pushParseAndPop({}, TMS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Style object.\r\n */\r\nfunction readStyle(node, objectStack) {\r\n  const style = pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\r\n  if (!style) {\r\n    return undefined;\r\n  }\r\n  const isDefault = node.getAttribute('isDefault') === 'true';\r\n  style['isDefault'] = isDefault;\r\n  return style;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Tile Matrix Set Link object.\r\n */\r\nfunction readTileMatrixSetLink(node, objectStack) {\r\n  return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Dimension object.\r\n */\r\nfunction readDimensions(node, objectStack) {\r\n  return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Resource URL object.\r\n */\r\nfunction readResourceUrl(node, objectStack) {\r\n  const format = node.getAttribute('format');\r\n  const template = node.getAttribute('template');\r\n  const resourceType = node.getAttribute('resourceType');\r\n  const resource = {};\r\n  if (format) {\r\n    resource['format'] = format;\r\n  }\r\n  if (template) {\r\n    resource['template'] = template;\r\n  }\r\n  if (resourceType) {\r\n    resource['resourceType'] = resourceType;\r\n  }\r\n  return resource;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} BBox object.\r\n */\r\nfunction readBoundingBox(node, objectStack) {\r\n  const coordinates = pushParseAndPop(\r\n    [],\r\n    WGS84_BBOX_READERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (coordinates.length != 2) {\r\n    return undefined;\r\n  }\r\n  return boundingExtent(coordinates);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Legend object.\r\n */\r\nfunction readLegendUrl(node, objectStack) {\r\n  const legend = {};\r\n  legend['format'] = node.getAttribute('format');\r\n  legend['href'] = readHref(node);\r\n  return legend;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Coordinates object.\r\n */\r\nfunction readCoordinates(node, objectStack) {\r\n  const coordinates = readString(node).split(/\\s+/);\r\n  if (!coordinates || coordinates.length != 2) {\r\n    return undefined;\r\n  }\r\n  const x = +coordinates[0];\r\n  const y = +coordinates[1];\r\n  if (isNaN(x) || isNaN(y)) {\r\n    return undefined;\r\n  }\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} TileMatrix object.\r\n */\r\nfunction readTileMatrix(node, objectStack) {\r\n  return pushParseAndPop({}, TM_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} TileMatrixSetLimits Object.\r\n */\r\nfunction readTileMatrixLimitsList(node, objectStack) {\r\n  return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} TileMatrixLimits Array.\r\n */\r\nfunction readTileMatrixLimits(node, objectStack) {\r\n  return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);\r\n}\r\n\r\nexport default WMTSCapabilities;\r\n"],
  "mappings": "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",
  "names": ["buffer", "offset", "buffer", "clone", "error", "transform", "equals", "extend", "isEmpty", "coordinates", "offset", "equals", "extend", "isEmpty", "intersects", "RADIUS", "EXTENT", "METERS_PER_UNIT", "PROJECTIONS", "add", "get", "transform", "add", "equals", "rotate", "scale", "squaredDistance", "wrapX", "distance", "add", "get", "toEPSG4326", "get", "add", "get", "equals", "get", "transform", "PROJECTIONS", "offset", "transform", "rotate", "scale", "translate", "transform", "clone", "extent", "get", "scale", "coordinates", "rotate", "scale", "translate", "transform", "offset", "coordinates", "squaredDistance", "offset", "coordinates", "rotate", "extend", "offset", "squaredDistance", "offset", "squaredDistance", "offset", "offset", "coordinates", "offset", "coordinates", "offset", "offset", "offset", "offset", "offset", "coordinates", "coordinates", "ends", "layout", "offset", "coordinates", "squaredDistance", "coordinates", "squaredDistance", "offset", "offset", "offset", "coordinates", "linearRing", "linearRings", "offset", "isEmpty", "angle", "linearRingss", "offset", "coordinates", "offset", "linearRingss", "tmpTransform", "linearRingss", "offset", "transform", "get", "scale", "Feature_default", "get", "Feature_default", "transform", "coordinates", "geometry", "Geometry", "Feature_default", "get", "coordinates", "get", "Feature_default", "readGeometry", "writeGeometry", "readPointGeometry", "readLineStringGeometry", "readPolygonGeometry", "readMultiPointGeometry", "readMultiLineStringGeometry", "readMultiPolygonGeometry", "coordinates", "writePointGeometry", "writeLineStringGeometry", "writePolygonGeometry", "writeMultiPointGeometry", "writeMultiLineStringGeometry", "writeMultiPolygonGeometry", "geometry", "Feature_default", "coordinates", "get", "get", "coordinates", "linearRing", "schemaLocation", "MULTIGEOMETRY_TO_MEMBER_NODENAME", "get", "linearRing", "get", "nodeName", "coordinates", "Feature_default", "get", "level", "scale", "scale", "parse", "names", "toString", "cache", "error", "Image_default", "get", "scale", "get", "image", "offset", "toString", "cache", "transform", "scale", "scale", "add", "scale", "Circle_default", "Circle_default", "scale", "NAMESPACE_URIS", "SCHEMA_LOCATION", "LINK_PARSERS", "get", "NAMESPACE_URIS", "SCHEMA_LOCATION", "geometry", "offset", "scale", "imageState", "imageSize", "coordinates", "type", "LINK_PARSERS", "rgba", "names", "GEOMETRY_TYPE_TO_NODENAME", "linearRing", "linearRings", "Feature_default", "get", "PBF", "NAMESPACE_URIS", "offset", "get", "coordinates", "get", "transform", "scale", "translate", "GEOMETRY_READERS", "readPointGeometry", "readLineStringGeometry", "readPolygonGeometry", "readMultiPointGeometry", "readMultiLineStringGeometry", "readMultiPolygonGeometry", "coordinates", "get", "distance", "buffer", "Feature_default", "geometry", "get", "GeometryConstructor", "coordinates", "isEmpty", "NAMESPACE_URIS", "PARSERS", "readStyle", "HTTP_PARSERS", "STYLE_PARSERS", "NAMESPACE_URIS", "PARSERS", "readLayer", "LAYER_PARSERS", "readStyle", "readBoundingBox", "STYLE_PARSERS", "coordinates"]
}
