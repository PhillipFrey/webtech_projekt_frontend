import { default as __DTS_6__ } from 'ol/proj/Projection';
import { default as __DTS_5__ } from 'ol/events/Event';
import { EventsKey, Listener } from 'ol/events';
import { ObjectOnSignature } from 'ol/Object';
import { Extent } from 'ol/extent';
import { TransformFunction, ProjectionLike } from 'ol/proj';
import { default as __DTS_3__ } from 'ol/geom/SimpleGeometry';
import { GeometryLayout, default as __DTS_4__, Type } from 'ol/geom/Geometry';
import { default as __DTS_2__ } from 'ol/geom/Point';
import { default as __DTS_1__ } from 'ol/geom/LinearRing';
import { DefineComponent, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType } from 'vue';
import Geolocation, { type Options } from "ol/Geolocation";
import type { Coordinate } from "ol/coordinate";
import type Polygon from "ol/geom/Polygon";
declare const _default: __VLS_WithTemplateSlots<DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options>, {
    projection: string;
    tracking: boolean;
    trackingOptions: () => {
        enableHighAccuracy: boolean;
    };
}>, {
    geoLoc: ComputedRef<Geolocation>;
    position: Ref<number[] | undefined>;
    accuracy: Ref<number | undefined>;
    altitude: Ref<number | undefined>;
    altitudeAccuracy: Ref<number | undefined>;
    speed: Ref<number | undefined>;
    heading: Ref<number | undefined>;
    accuracyGeometry: Ref<{
        appendLinearRing: (linearRing: __DTS_1__) => void;
        clone: () => Polygon;
        getArea: () => number;
        getCoordinates: (right?: boolean | undefined) => Coordinate[][];
        getEnds: () => number[];
        getFlatInteriorPoint: () => number[];
        getInteriorPoint: () => __DTS_2__;
        getLinearRingCount: () => number;
        getLinearRing: (index: number) => __DTS_1__ | null;
        getLinearRings: () => __DTS_1__[];
        getOrientedFlatCoordinates: () => number[];
        setCoordinates: (coordinates: Coordinate[][], layout?: GeometryLayout | undefined) => void;
        getFirstCoordinate: () => Coordinate;
        getFlatCoordinates: () => number[];
        getLastCoordinate: () => Coordinate;
        getLayout: () => GeometryLayout;
        getSimplifiedGeometry: (squaredTolerance: number) => __DTS_3__;
        getStride: () => number;
        setFlatCoordinates: (layout: GeometryLayout, flatCoordinates: number[]) => void;
        simplifyTransformedInternal: (...arg0: any[]) => __DTS_4__;
        simplifyTransformed: (squaredTolerance: number, transform?: TransformFunction | undefined) => __DTS_4__;
        closestPointXY: (x: number, y: number, closestPoint: Coordinate, minSquaredDistance: number) => number;
        containsXY: (x: number, y: number) => boolean;
        getClosestPoint: (point: Coordinate, closestPoint?: Coordinate | undefined) => Coordinate;
        intersectsCoordinate: (coordinate: Coordinate) => boolean;
        getExtent: (extent?: Extent | undefined) => Extent;
        rotate: (angle: number, anchor: Coordinate) => void;
        scale: (sx: number, sy?: number | undefined, anchor?: Coordinate | undefined) => void;
        simplify: (tolerance: number) => __DTS_4__;
        getType: () => Type;
        applyTransform: (transformFn: TransformFunction) => void;
        intersectsExtent: (extent: Extent) => boolean;
        translate: (deltaX: number, deltaY: number) => void;
        transform: (source: ProjectionLike, destination: ProjectionLike) => __DTS_4__;
        on: ObjectOnSignature<EventsKey>;
        once: ObjectOnSignature<EventsKey>;
        un: ObjectOnSignature<void>;
        get: (key: string) => any;
        getKeys: () => string[];
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: Listener) => void;
        removeChangeListener: (key: string, listener: Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: Listener) => void;
        dispatchEvent: (event: string | __DTS_5__) => boolean | undefined;
        getListeners: (type: string) => Listener[] | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: Listener) => void;
        dispose: () => void;
    } | null>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options>, {
    projection: string;
    tracking: boolean;
    trackingOptions: () => {
        enableHighAccuracy: boolean;
    };
}>>>, {
    tracking: boolean;
    trackingOptions: PositionOptions;
    projection: string | __DTS_6__;
}, {}>, {
    default?(_: {
        position: number[] | undefined;
        speed: number | undefined;
        heading: number | undefined;
        accuracy: number | undefined;
        altitude: number | undefined;
        altitudeAccuracy: number | undefined;
        accuracyGeometry: {
            appendLinearRing: (linearRing: __DTS_1__) => void;
            clone: () => Polygon;
            getArea: () => number;
            getCoordinates: (right?: boolean | undefined) => Coordinate[][];
            getEnds: () => number[];
            getFlatInteriorPoint: () => number[];
            getInteriorPoint: () => __DTS_2__;
            getLinearRingCount: () => number;
            getLinearRing: (index: number) => __DTS_1__ | null;
            getLinearRings: () => __DTS_1__[];
            getOrientedFlatCoordinates: () => number[];
            setCoordinates: (coordinates: Coordinate[][], layout?: GeometryLayout | undefined) => void;
            getFirstCoordinate: () => Coordinate;
            getFlatCoordinates: () => number[];
            getLastCoordinate: () => Coordinate;
            getLayout: () => GeometryLayout;
            getSimplifiedGeometry: (squaredTolerance: number) => __DTS_3__;
            getStride: () => number;
            setFlatCoordinates: (layout: GeometryLayout, flatCoordinates: number[]) => void;
            simplifyTransformedInternal: (...arg0: any[]) => __DTS_4__;
            simplifyTransformed: (squaredTolerance: number, transform?: TransformFunction | undefined) => __DTS_4__;
            closestPointXY: (x: number, y: number, closestPoint: Coordinate, minSquaredDistance: number) => number;
            containsXY: (x: number, y: number) => boolean;
            getClosestPoint: (point: Coordinate, closestPoint?: Coordinate | undefined) => Coordinate;
            intersectsCoordinate: (coordinate: Coordinate) => boolean;
            getExtent: (extent?: Extent | undefined) => Extent;
            rotate: (angle: number, anchor: Coordinate) => void;
            scale: (sx: number, sy?: number | undefined, anchor?: Coordinate | undefined) => void;
            simplify: (tolerance: number) => __DTS_4__;
            getType: () => Type;
            applyTransform: (transformFn: TransformFunction) => void;
            intersectsExtent: (extent: Extent) => boolean;
            translate: (deltaX: number, deltaY: number) => void;
            transform: (source: ProjectionLike, destination: ProjectionLike) => __DTS_4__;
            on: ObjectOnSignature<EventsKey>;
            once: ObjectOnSignature<EventsKey>;
            un: ObjectOnSignature<void>;
            get: (key: string) => any;
            getKeys: () => string[];
            getProperties: () => {
                [x: string]: any;
            };
            getPropertiesInternal: () => {
                [x: string]: any;
            } | null;
            hasProperties: () => boolean;
            notify: (key: string, oldValue: any) => void;
            addChangeListener: (key: string, listener: Listener) => void;
            removeChangeListener: (key: string, listener: Listener) => void;
            set: (key: string, value: any, silent?: boolean | undefined) => void;
            setProperties: (values: {
                [x: string]: any;
            }, silent?: boolean | undefined) => void;
            unset: (key: string, silent?: boolean | undefined) => void;
            changed: () => void;
            getRevision: () => number;
            addEventListener: (type: string, listener: Listener) => void;
            dispatchEvent: (event: string | __DTS_5__) => boolean | undefined;
            getListeners: (type: string) => Listener[] | undefined;
            hasListener: (type?: string | undefined) => boolean;
            removeEventListener: (type: string, listener: Listener) => void;
            dispose: () => void;
        } | null;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
