import { DefineComponent, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType } from 'vue';
import type { TextPlacement } from "ol/style/Text";
import { type Options as StrokeOptions } from "ol/style/Stroke";
import type { Color } from "ol/color";
import type { ColorLike } from "ol/colorlike";
declare const _default: __VLS_WithTemplateSlots<DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    font?: string | undefined;
    maxAngle?: number | undefined;
    offsetX?: number | undefined;
    offsetY?: number | undefined;
    overflow?: boolean | undefined;
    placement?: TextPlacement | undefined;
    scale?: number | undefined;
    rotateWithView?: boolean | undefined;
    rotation?: number | undefined;
    text?: string | undefined;
    textAlign?: CanvasTextAlign | undefined;
    textBaseline?: CanvasTextBaseline | undefined;
    padding?: [number, number, number, number] | undefined;
    fill?: Color | ColorLike | undefined;
    stroke?: StrokeOptions | undefined;
    backgroundFill?: Color | ColorLike | undefined;
    backgroundStroke?: StrokeOptions | undefined;
}>, {
    maxAngle: number;
    offsetX: number;
    offsetY: number;
    overflow: boolean;
    placement: string;
    rotateWithView: boolean;
    rotation: number;
    textBaseline: string;
    padding: () => number[];
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    font?: string | undefined;
    maxAngle?: number | undefined;
    offsetX?: number | undefined;
    offsetY?: number | undefined;
    overflow?: boolean | undefined;
    placement?: TextPlacement | undefined;
    scale?: number | undefined;
    rotateWithView?: boolean | undefined;
    rotation?: number | undefined;
    text?: string | undefined;
    textAlign?: CanvasTextAlign | undefined;
    textBaseline?: CanvasTextBaseline | undefined;
    padding?: [number, number, number, number] | undefined;
    fill?: Color | ColorLike | undefined;
    stroke?: StrokeOptions | undefined;
    backgroundFill?: Color | ColorLike | undefined;
    backgroundStroke?: StrokeOptions | undefined;
}>, {
    maxAngle: number;
    offsetX: number;
    offsetY: number;
    overflow: boolean;
    placement: string;
    rotateWithView: boolean;
    rotation: number;
    textBaseline: string;
    padding: () => number[];
}>>>, {
    rotation: number;
    padding: [number, number, number, number];
    rotateWithView: boolean;
    maxAngle: number;
    offsetX: number;
    offsetY: number;
    overflow: boolean;
    placement: TextPlacement;
    textBaseline: CanvasTextBaseline;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
